using Nitra;
using Nitra.BackEnd.Cci;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using System.Threading;
using ND = Nitra.Declarations;

[assembly: ProjectSupport("TdlLang", typeof(Tdl.ProjectSupport))]

namespace Tdl
{
  public partial class ProjectSupport : IProjectSupport, IDisposable
  {
    static NoLocation : Location       = Location(SourceSnapshot.Default.File, NSpan(0));
    static NoFile : ProjectSystem.File = SourceSnapshot.Default.File;
    static NoSpan : NSpan              = NSpan(0);

    internal static ScenarioParameterScope : Scope { get { _scenarioParameterScope } }
    static mutable _scenarioParameterScope : TableScope;
    internal static RequiredScenarioParameters : ImmutableArray[FormalParameterSymbol] { get { _requiredScenarioParameters } }
    static mutable _requiredScenarioParameters : ImmutableArray[FormalParameterSymbol];
    internal static ExternalSymbolTable : TableScope { get { _externalSymbol.MemberTable } }
    static mutable _externalSymbol : ExternalSymbol;

    mutable _backEnd : CciBackEnd;

    public this()
    {
      DotNet.AstUtils.MakeDefault = DotNet.Coverters.MakeDefaultParameters;
    }

    public RefreshReferences(cancellationToken : CancellationToken, project : Project) : object
    {
      TypeUnifier.InitInstance();

      def bindNs(scope : Scope, name : string) : Ref[NamespaceSymbol]
      {
        //assert2(false);
        def res = Reference(Location.Default, name).Bind.[NamespaceSymbol](scope);
        assert2(!res.IsUnresolved);
        assert2(!res.IsAmbiguous);
        assert2(res.Symbols.Length == 1);
        res
      }
      def bindType(scope : Scope, name : string) : Ref[TopGenericTypeSymbol]
      {
        //assert2(false);
        def res = Reference(Location.Default, name).Bind.[TopGenericTypeSymbol](scope);
        assert2(!res.IsUnresolved);
        assert2(!res.IsAmbiguous);
        assert2(res.Symbols.Length == 1);
        res
      }
      def defineAlias(context : DependentPropertyEvalContext, systemNs : NamespaceSymbol, declaredIn : NamespaceSymbol, name : string, aliasName : string) : void
      {
        def symbolRef  = bindType(systemNs.Scope, name);
        unless (symbolRef.IsSymbolEvaluated)
          return;

        def symbol     = symbolRef.Symbol;
        def decl       = symbol.FirstDeclarationOrDefault :> IExternalTopTypeDeclaration;
        def aliasDecl  = ExternalTopTypeDeclaration.[TypeAliasSymbol](ND.Name(Location.Default, aliasName), decl.Type);
        def alias      = aliasDecl.DefineSymbol(declaredIn.MemberTable);
        alias.Replacement = symbolRef;
        alias.TypeParametersCount = 0;
        alias.TypeParameters      = ImmutableArray.Empty;
        alias.DeclaredIn          = declaredIn;
        alias.EvalProperties(context);
      }

      when (_backEnd != null)
        _backEnd.Dispose();
      def backEnd = CciBackEnd();
      _backEnd = backEnd;
      backEnd.CancellationToken = cancellationToken;
      def context = DependentPropertyEvalContext(project);
      def rootNamespace = backEnd.LoadExternalSymbols(project.Libs, project.ProjectDir, project.CompilerMessages, context);
      def systemNsRef = bindNs(rootNamespace.Scope, "System");
      when (systemNsRef.IsSymbolEvaluated)
      {
        def systemNs = systemNsRef.Symbol;

        defineAlias(context, systemNs, rootNamespace, "Object",  "object");
        defineAlias(context, systemNs, rootNamespace, "Void",    "void");
        defineAlias(context, systemNs, rootNamespace, "String",  "string");
        defineAlias(context, systemNs, rootNamespace, "Boolean", "bool");
        defineAlias(context, systemNs, rootNamespace, "Byte",    "byte");
        defineAlias(context, systemNs, rootNamespace, "SByte",   "sbyte");
        defineAlias(context, systemNs, rootNamespace, "Int16",   "short");
        defineAlias(context, systemNs, rootNamespace, "UInt16",  "ushort");
        defineAlias(context, systemNs, rootNamespace, "Int32",   "int");
        defineAlias(context, systemNs, rootNamespace, "UInt32",  "uint");
        defineAlias(context, systemNs, rootNamespace, "Int64",   "long");
        defineAlias(context, systemNs, rootNamespace, "UInt64",  "ulong");
        defineAlias(context, systemNs, rootNamespace, "Single",  "float");
        defineAlias(context, systemNs, rootNamespace, "Double",  "double");
        defineAlias(context, systemNs, rootNamespace, "Decimal", "decimal");
        defineAlias(context, systemNs, rootNamespace, "Char",    "char");
      }

      MakeExternalSymbol(context, rootNamespace);
      MakeScenarioParametersScope(backEnd, context);
      
      (backEnd : IDotNetBackEnd, context, rootNamespace)
    }

    public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
    {
      def (backEnd, context, rootNamespace) = (data :> IDotNetBackEnd * DependentPropertyEvalContext * NamespaceSymbol);
      context.CancellationToken = cancellationToken;
      backEnd.CancellationToken = cancellationToken;

      def removeParsedSymbols(tableScope : TableScope)
      {
        tableScope.Undefine(x => x.IsParsed);
        foreach (symbols in tableScope.Symbols)
        foreach (symbol is NamespaceSymbol in symbols)
          removeParsedSymbols(symbol.MemberTable);
      }
      removeParsedSymbols(rootNamespace.MemberTable);
      removeParsedSymbols(ExternalSymbolTable);

      when (cancellationToken.IsCancellationRequested)
        return;

      def evalHost = TdlProjectEvalPropertiesHost(files, rootNamespace);
      evalHost.EvalProperties(context, "SymbolHierarchy", 0);
      evalHost.EvalProperties(context, "Scopes", 1);
      evalHost.EvalProperties(context, "Stage 2", 2);
      evalHost.EvalProperties(context, "Stage 3", 3);
    }

    public GetSymbolById(data : object, symbolId : int) : ValueOption[DeclarationSymbol]
    {
      def (_, _, rootNamespace) = DecomposeData(data);
      // TODO: cache symbols an use it cache to find symbol by id
      def findSymbol(symbols : Seq[DeclarationSymbol]) : ValueOption[DeclarationSymbol]
      {
        foreach (symbol in symbols)
        {
          when (symbol.Id == symbolId)
            return ValueOption.Some(symbol);

          match (symbol)
          {
            | t is GenericContainerTypeSymbol =>
              def result = findSymbol(t.NestedTypes);
              when (result.IsSome)
                return result;

            | NamespaceSymbol as ns =>
              foreach (symbols in ns.MemberTable.Symbols)
              {
                def result = findSymbol(symbols);
                when (result.IsSome)
                  return result;
              }

            | _ => ()
          }
        }

        ValueOption.None()
      }

      foreach (symbols in rootNamespace.MemberTable.Symbols)
      {
        def result = findSymbol(symbols);
        when (result.IsSome)
          return result;
      }

      ValueOption.None()
    }

    public DeconstructType(symbol : DeclarationSymbol, type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool
    {
      match (symbol)
      {
        | s is TopConstructedTypeSymbol    => type = s.TypeInfo; typeArgs = s.Args; true
        | s is NestedConstructedTypeSymbol => type = s.TypeInfo; typeArgs = s.Args; true
        | _ => type = null; typeArgs = ImmutableArray.Empty; false
      }
    }

    public VisitGlobalSymbols(data : object, callback : Predicate[DeclarationSymbol]) : void
    {
      def (_, _, rootNamespace) = DecomposeData(data);
      _ = rootNamespace.VisitChildrenAndSelf(SymbolUtils.GetNestedSymbol, callback);
    }

    public Postprocessing(cancellationToken : System.Threading.CancellationToken, project : Nitra.ProjectSystem.Project, asts : System.Collections.Immutable.ImmutableArray[(Nitra.Declarations.IAst * bool)], data : object) : void
    {
      IgnoreParams();
    }

    public DecomposeData(data : object) : IDotNetBackEnd * DependentPropertyEvalContext * NamespaceSymbol
    {
      data :> (IDotNetBackEnd * DependentPropertyEvalContext * NamespaceSymbol)
    }

    public MakeExternalSymbol(context : DependentPropertyEvalContext, rootNamespace : NamespaceSymbol) : void
    {
      def parameterName = Name(NoLocation, "external");
      def symbol = ExternalSymbolDeclaration(parameterName).DefineSymbol(rootNamespace.MemberTable);
      symbol.EvalProperties(context);
      _externalSymbol = symbol;
    }
    
    public MakeScenarioParametersScope(backEnd : IDotNetBackEnd, context : DependentPropertyEvalContext) : void
    {
      _scenarioParameterScope = TableScope("ScenarioParameterScope");
      def requiredScenarioParametersBuilder = ImmutableArray.CreateBuilder();
      
      mutable index;
      
      def defineParameter(context : DependentPropertyEvalContext, name : string, type : TypeSymbol, required : bool) : void
      {
        def parameterName = Name(NoLocation, name); // TODO: type.Name.UniqueKey
        def parameter = ScenarioParameterDeclaration(parameterName).DefineSymbol(_scenarioParameterScope);
        when (required)
          _ = requiredScenarioParametersBuilder.Add(parameter);
        parameter.Type = type;
        parameter.Modifier = ParameterModifier.None;
        parameter.Index = index;
        index++;
        parameter.EvalProperties(context);
      }

      def platformType = backEnd.PlatformType;
      
      defineParameter(context, "Area",                    platformType.String,  required=false);
      defineParameter(context, "NeedUnsignedAgent",       platformType.Boolean, required=false);
      defineParameter(context, "RequireInternet",         platformType.Int32,   required=false);
      defineParameter(context, "RerunCountOnTestFailure", platformType.Int32,   required=false);
      defineParameter(context, "RerunCountOnTestSuccess", platformType.Int32,   required=false);
      defineParameter(context, "Responsible",             platformType.String,  required=false);
      defineParameter(context, "RevertAgentAfter",        platformType.Boolean, required=false);
      defineParameter(context, "RevertAgentBefore",       platformType.Boolean, required=false);
      defineParameter(context, "TfsId",                   platformType.Int32,   required=false);
      defineParameter(context, "Timeout",                 platformType.Int32,   required=true);
      defineParameter(context, "UniqueId",                platformType.String,  required=true);

      _requiredScenarioParameters = requiredScenarioParametersBuilder.ToImmutable();
    }
    
    public Dispose() : void
    {
      when (_backEnd != null)
        _backEnd.Dispose();
    }
  }

  // Predeclaration
  public partial class ExternalSymbol : SymbolBase, DeclarationSymbol, ContainerSymbol { }
  
  [Record]
  public class ExternalSymbolDeclaration : ExternalDeclaration[ExternalSymbol]
  {
    public override CreateSymbol() : DeclarationSymbol { ExternalSymbol() }
  }

  [Record]
  public class ScenarioParameterDeclaration : ExternalDeclaration[FormalParameterSymbol]
  {
    public override CreateSymbol() : DeclarationSymbol { FormalParameterSymbol() }
  }
}
