using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Tdl
{
  module TdlUtils
  {
    public MakeDeployments(deploymentRefs : ImmutableArray[Ref[DeclarationSymbol]]) : ImmutableArray[DeploymentSymbol]
    {
      def builder = ImmutableArray.CreateBuilder();
      foreach (deploymentRef in deploymentRefs)
      {
        def r = deploymentRef.Resolve();
        when (r.IsSymbolEvaluated)
          builder.Add(r.Symbol);
      }
      builder.ToImmutable()
    }

    public MakeScenarios(scenariosRefs : ImmutableArray[Ref[DeclarationSymbol]]) : ImmutableArray[ScenarioSymbol]
    {
      def builder = ImmutableArray.CreateBuilder();
      foreach (scenariosRef in scenariosRefs)
      {
        def r = scenariosRef.Resolve();
        when (r.IsSymbolEvaluated)
          builder.Add(r.Symbol);
      }
      builder.ToImmutable()
    }

    public MakeAggregateParametersScope(deployments : ImmutableArray[DeploymentSymbol]) : Scope
    {
      def visited = HashSet();
      mutable builder = UnionScopeBuilder();
      CollectDeployments(visited, ref builder, deployments);
      builder.ToScope()
    }

    private CollectDeployments(visited : HashSet[int], builder : ref UnionScopeBuilder, deployments : ImmutableArray[DeploymentSymbol]) : void
    {
      foreach (deployment in deployments)
      {
        unless (visited.Add(deployment.Id))
          return;

        match (deployment)
        {
          | s is Deployment.ScriptSymbol => UnionScopeBuilder.Add(s.ParameterScope, ref builder);
          | s is Deployment.SetSymbol => CollectDeployments(visited, ref builder, s.Deployments);
          | _ => ()
        }
      }
    }

    public MakeAggregateParametersScope(scenarios : ImmutableArray[ScenarioSymbol]) : Scope
    {
      def visited = HashSet();
      mutable builder = UnionScopeBuilder();
      CollectScenarios(visited, ref builder, scenarios);
      builder.ToScope()
    }

    private CollectScenarios(visited : HashSet[int], builder : ref UnionScopeBuilder, scenarios : ImmutableArray[ScenarioSymbol]) : void
    {
      foreach (deployment in scenarios)
      {
        unless (visited.Add(deployment.Id))
          return;

        match (deployment)
        {
          | s is Scenario.DefSymbol => UnionScopeBuilder.Add(s.Deployment.AggregateParametersScope, ref builder);
          | s is Scenario.SetSymbol => CollectScenarios(visited, ref builder, s.Scenarios);
          | _ => ()
        }
      }
    }

    public MakeExpected(intLiteral : IntLiteral) : ParsedValue[int]
    {
      intLiteral.Value
    }
    
    public MakePath(str : CSharp.StringLiteral) : ParsedValue[string]
    {
      def builder = Text.StringBuilder();
      foreach (part in str.Parts)
      {
        | Interpolation           => ()
        | InterpolationFormated   => ()
        | InterpolatedOpenEscape  => _ = builder.Append("{");
        | InterpolatedCloseEscape => _ = builder.Append("}");
        | Error                   => ()
        | SimpleEscape            => _ = builder.Append(part.Location.GetText()); // FIXME:
        | UnicodeEscape           => _ = builder.Append(part.Location.GetText()); // FIXME:
        | HexadecimalEscape       => _ = builder.Append(part.Location.GetText()); // FIXME:
        | RegulaChars             => _ = builder.Append(part.Location.GetText());
        | VerbatimEscape          => _ = builder.Append(part.Location.GetText()); // FIXME:
        | _                       => ()
      }

      ParsedValue(str.Location.Span, builder.ToString())
    }
  }
}
