namespace Tdl
{
  syntax module Grammar
  {
    using Nitra.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Literals;
    using CSharp.TokenNames;
    using CSharp.TopDeclarations;
    using CSharp.Types;

    [StartRule]
    syntax Module = MemberDeclaration*;

    regex LispIdent = (CSharp.CsIdentifiers.IdentifierBody "-"+)+ CSharp.CsIdentifiers.IdentifierBody?;

    extend token Name
    {
      | String = '\"' Body=(!NotAllowedRegularStringLiteralChar Any)+ '\"'
      | ListStyle = Body=LispIdent
    }

    extend token Reference
    {
      | String = '\"' Body=(!NotAllowedRegularStringLiteralChar Any)+ '\"'
      | ListStyle = Body=LispIdent
    }
    
    syntax StringLiteral
    {
      | RegularStringLiteral  = Lit=RegularStringLiteral
      | VerbatimStringLiteral = Lit=VerbatimStringLiteral
    }

    syntax MemberDeclaration
    {
      | Alias            = "using" sm Name sm "=" sm QualifiedIdentifier ";" nl;
      | Open             = "using" sm QualifiedIdentifier ";" nl;
      | Platform         = "platform" sm Name ";" nl;
      | PlatformSet      = "platform" sm Name sm "=" sm Platforms=(Reference; "," sm)+ ";" nl;
      | DeploymentScript = "deployment" sm Name "(" (FormalParameter; ","sm)* ")" sm "script" ScriptPath=StringLiteral sm  nl Body;
      //| Product          = "product" sm Name nl Body;
      //| ProductSet       = "product" sm Name sm "=" sm Platforms=(Reference; "," sm)+ ";" nl;
    }

    syntax Body = outline_begin_before "{" inl DefDeclaration* d "}" nl outline_end_before;

    syntax DefDeclaration = Name sm "=" sm DefExpr ";" nl;

    syntax DefExpr
    {
      | StringLiteral
      //| "true"
      //| "false"
      //| RealLiteral;
      //| DecimalIntegerLiteral             = Lit=DecimalIntegerLiteral
      //| HexadecimalIntegerLiteral         = Lit=HexadecimalIntegerLiteral
      //| InterpolatedRegularStringLiteral  = Lit=InterpolatedRegularStringLiteral
      //| InterpolatedVerbatimStringLiteral = Lit=InterpolatedVerbatimStringLiteral
    }
  }
}
