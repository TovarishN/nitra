namespace Tdl
{
  syntax module Grammar
  {
    using Nitra.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Literals;
    using CSharp.TokenNames;

    [StartRule]
    syntax Module = MemberDeclaration*;

    syntax StringLiteral
    {
      | RegularStringLiteral;
      | VerbatimStringLiteral;
    }

    syntax MemberDeclaration
    {
      | Alias            = "using" sm Name sm "=" sm QualifiedIdentifier ";" nl;
      | Open             = "using" sm QualifiedIdentifier ";" nl;
      | Platform         = "platform" sm Name ";" nl;
      | PlatformSet      = "platform" sm Name sm "=" sm Platforms=(Reference; "," sm)+ ";" nl;
      //| Product          = "product" sm Name nl Body;
      //| ProductSet       = "product" sm Name sm "=" sm Platforms=(Reference; "," sm)+ ";" nl;
      //| DeploymentScript = "deployment" sm Name sm "script" ScriptPath=StringLiteral sm  nl Body;
    }

    syntax Body = outline_begin_before "{" inl DefDeclaration* d "}" nl outline_end_before;

    syntax DefDeclaration = Name sm "=" sm DefExpr ";" nl;

    syntax DefExpr
    {
      | StringLiteral
      | "true"
      | "false"
      | RealLiteral;
      | DecimalIntegerLiteral     = Lit=DecimalIntegerLiteral
      | HexadecimalIntegerLiteral = Lit=HexadecimalIntegerLiteral
    }
  }
}
