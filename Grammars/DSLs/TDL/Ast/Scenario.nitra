using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Scenario : NamespaceMember
  {
    symbol
    {
    stage 3:
      in AggregateParametersScope : Scope;
    }
    | Def
      {
        symbol
        {
          in Defs         : ImmutableArray[Def];
        stage 1:
          in Method       : Member.MethodSymbol;
          in Deployment   : DeploymentSymbol;
          in Environments : ImmutableArray[Environment];

          Kind      = "scenario";
          SpanClass = TdlLang.ScenarioSpanClass;
        }
      stage 1:
        out MethodRef      : Ref[Member.MethodSymbol];
        out DeploymentRef  : Ref[DeploymentSymbol];

        Symbol.AggregateParametersScope = Symbol.Deployment.AggregateParametersScope;

        Method.Scope                    = Scope;
        MethodRef                       = Method.Ref.Resolve();
        Symbol.Method                   = MethodRef.Symbol;

        Deployment.Scope                = Scope;
        DeploymentRef                   = Deployment.Ref.Resolve();
        Symbol.Deployment               = DeploymentRef.Symbol;

        Environments.Scope              = Scope;
        Symbol.Environments             = Environments.Environment;

        Definitions.DefinitionScope     = ProjectSupport.ScenarioParameterScope;
        Symbol.Defs                     = TdlUtils.MakeDefinitions(Definitions);

        when (TdlUtils.IsMissingRequiredOptions(Definitions.SymbolRef))
          Name.Error(context, $"Missing required option: $(TdlUtils.GetMissingRequiredOptionMessage(Definitions.SymbolRef))");

        Deployment   : Reference;
        Method       : QualifiedReference;
        Environments : EnvironmentAst*;
        Definitions  : Definition*;
      }
    | Set
      {
        symbol
        {
        stage 1:
          in Scenarios : ImmutableArray[ScenarioSymbol];

          Kind      = "scenario set";
          SpanClass = TdlLang.ScenarioSpanClass;
        }

        Symbol.Scenarios = TdlUtils.MakeScenarios(Scenarios.Ref);
        Symbol.AggregateParametersScope = TdlUtils.MakeAggregateParametersScope(Symbol.Scenarios);

        Scenarios.Scope = Scope;
        Scenarios : Reference*;
      }
  } // Scenario
}
