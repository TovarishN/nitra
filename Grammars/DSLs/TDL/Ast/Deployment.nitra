using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Deployment : NamespaceMember
  {
    symbol
    {
    stage 2:
      in AggregateParametersScope : Scope;
    }

    | Script : Parameterizable
      {
        symbol
        {
          in Path     : ParsedValue[string];
          in Expected : ParsedValue[int];

          Kind      = "deployment";
          SpanClass = TdlLang.DeploymentSpanClass;
        }

        Symbol.AggregateParametersScope = Symbol.ParameterScope;

        // Definitions.DefinitionScope = parameters scope from script
        Definitions.Scope = Symbol.ParameterScope;
        Symbol.Path       = TdlUtils.MakePath(Path);
        Symbol.Expected   = TdlUtils.MakeExpected(Expected);

        Path : CSharp.StringLiteral;
        Definitions : Definition*;
        Expected : IntLiteral;
      }
    | Set
      {
        symbol
        {
        stage 1:
          in Deployments : ImmutableArray[DeploymentSymbol];

          Kind      = "deployment set";
          SpanClass = TdlLang.DeploymentSpanClass;
        }

        Symbol.AggregateParametersScope = TdlUtils.MakeAggregateParametersScope(Symbol.Deployments);
        Symbol.Deployments = TdlUtils.MakeDeployments(Deployments.Ref);
        Deployments.Scope = Scope;
        Deployments : Reference*;
      }
  } // Deployment
}
