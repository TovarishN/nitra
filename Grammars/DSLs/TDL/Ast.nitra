using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

namespace Tdl
{
  declaration Module : NamespaceBody, Container
  {
  stage 0:
    in RootNamespace : NamespaceSymbol;

    Members.DeclaredIn      = RootNamespace;
    Members.ContainingTable = Symbol.MemberTable;
    EnteredScope            = Scope.HideWith(Symbol.MemberTable);
  }

  abstract declaration Platform : NamespaceMember
  {
    | Def
      {
        symbol
        {
          Kind      = "platform set";
          SpanClass = TdlLang.PlatformSpanClass;
        }
      }
    | Set
      {
        symbol
        {
          Kind      = "platform";
          SpanClass = TdlLang.PlatformSpanClass;
        }

        Platforms.Scope = Scope;
        Platforms : Reference*;
      }
  }

  declaration DeploymentScript : NamespaceMember, Parametrizable
  {
    symbol
    {
      in Path       : string;

      Kind      = "deployment";
      SpanClass = TdlLang.DeploymentSpanClass;

    }

    Parameters.Scope = Scope;

    Path : TdlExpr;
    //Definitions : Definition*;
  }

  abstract ast TdlExpr
  {
    | RegularStringLiteral  { }
    | VerbatimStringLiteral { }
  }

  //declaration Parameter
  //{
  //  symbol
  //  {
  //    in Type : TypeSymbol;
  //  }
  //
  //  Type : Reference;
  //}
  //
  //ast Definition
  //{
  //  ParameterReference : Reference;
  //  Expr               : DefExpr;
  //}
}
