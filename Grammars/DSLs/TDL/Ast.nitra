using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

namespace Tdl
{
  declaration Module : NamespaceBody
  {
    symbol
    {
      Kind  = "tdl module";
    }
  stage 0:
    in RootNamespace : NamespaceSymbol;

    Members.DeclaredIn      = RootNamespace;
    Members.ContainingTable = RootNamespace.MemberTable;
    EnteredScope            = Scope;
  }

  abstract declaration Platform : NamespaceMember
  {
    | Def
      {
        symbol
        {
          Kind      = "platform set";
          SpanClass = TdlLang.PlatformSpanClass;
        }
      }
    | Set
      {
        symbol
        {
          Kind      = "platform";
          SpanClass = TdlLang.PlatformSpanClass;
        }

        Platforms.Scope = Scope;
        Platforms : Reference*;
      }
  }

  abstract ast TdlExpr
  {
    | RegularStringLiteral  { }
    | VerbatimStringLiteral { }
  }

  abstract declaration Deployment : NamespaceMember
  {
    | Script : Parameterizable
      {
        symbol
        {
          in Path       : string;

          Kind      = "deployment";
          SpanClass = TdlLang.DeploymentSpanClass;
        }

        Path : TdlExpr;
        //Definitions : Definition*;
      }
    | Set
      {
        symbol
        {
          Kind      = "deployment set";
          SpanClass = TdlLang.DeploymentSpanClass;
        }

        Deployments.Scope = Scope;
        Deployments : Reference*;
      }
  } // Deployment

  declaration ProductType : NamespaceMember
  {
    symbol
    {
      Kind      = "product type";
      SpanClass = TdlLang.ProductTypeSpanClass;
    }
  }

  abstract declaration Product : NamespaceMember
  {
    symbol
    {
    stage 1:
      in Type : ProductTypeSymbol;
      SpanClass = TdlLang.ProductSpanClass;
    }
  stage 1:
    out TypeRef : Ref[ProductTypeSymbol];

    Type.Scope  = Scope;
    TypeRef     = Type.Ref.Resolve();
    Symbol.Type = TypeRef.Symbol;

    Type : Reference;

    | Def
      {
        symbol
        {
          Kind      = "product";
        }

        //Definitions : Definition*;
      }
    | Set
      {
        symbol
        {
          Kind      = "product set";
        }

        Products.Scope = Scope;
        Products : Reference*;
      }
  } // Product

  abstract declaration Scenario : NamespaceMember
  {
    | Def
      {
        symbol
        {
        stage 1:
          in ProductType : ProductTypeSymbol;

          Kind      = "scenario";
          SpanClass = TdlLang.ScenarioSpanClass;
        }
      stage 1:
        out ProductTypeRef : Ref[ProductTypeSymbol];

        ProductType.Scope  = Scope;
        ProductTypeRef     = ProductType.Ref.Resolve();
        Symbol.ProductType = ProductTypeRef.Symbol;

        ProductType : Reference;
      }
    | Set
      {
        symbol
        {
          Kind      = "scenario set";
          SpanClass = TdlLang.ScenarioSpanClass;
        }

        Scenarios.Scope = Scope;
        Scenarios : Reference*;
      }
  } // Scenario

  declaration Suite : NamespaceMember
  {
    symbol
    {
      Kind      = "suite";
      SpanClass = TdlLang.SuiteSpanClass;
    }
  }
}
