using DotNet;
using Nitra.Declarations;

namespace Tdl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Следующий код добавляет в шарповые идентификаторы поддержку идентификаторов в Lisp-стиле и "заковыченых"

  map syntax Grammar.Name.String    -> Nitra.Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));
  map syntax Grammar.Name.ListStyle -> Nitra.Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));

  map syntax Grammar.Name.String(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }
  map syntax Grammar.Name.ListStyle(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }

  map syntax Grammar.Reference.String    -> Nitra.Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));
  map syntax Grammar.Reference.ListStyle -> Nitra.Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));

  map syntax Grammar.Module -> Module
  {
    Name = Name(Location.FromStart(), Location.Source.File.Name);
    MemberDeclarations -> Members;
  }

  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  map syntax Grammar.MemberDeclaration -> NamespaceMember
  {
    | Open             -> UsingOpenDirective  {               QualifiedIdentifier -> NamespaceOrTypeName; }
    | Alias            -> UsingAliasDirective { Name -> Name; QualifiedIdentifier -> NamespaceOrTypeName; }
    | Platform         -> Platform.Def        { Name -> Name; }
    | PlatformSet      -> Platform.Set        { Name -> Name; Platforms.Item1 -> Platforms; }
    | DeploymentScript -> Deployment.Script
      {
        Name                                 -> Name;
        ScriptPath                           -> Path;
        FormalParameters.Item1               -> Parameters;
        DeploymentScriptBody.DefDeclarations -> Definitions;
      }
    | DeploymentSet    -> Deployment.Set      { Name -> Name; Deployments.Item1 -> Deployments; }
    | ProductType      -> ProductType         { Name -> Name; ProductTypeBody.Fields -> Fields; }
    | Product          -> Product.Def         { Name -> Name; Type -> Type; ProductBody.DefDeclarations -> Definitions; }
    | ProductSet       -> Product.Set         { Name -> Name; Type -> Type; Products.Item1 -> Products; }
    | Scenario         -> Scenario.Def
      {
        Name                                    -> Name;
        ScenarioBody.Deployment.Reference       -> Deployment;
        ScenarioBody.Method.QualifiedIdentifier -> Method;
        ScenarioBody.Environments.Elems.Item1   -> Environments;
      }
    | ScenarioSet      -> Scenario.Set        { Name -> Name; Scenarios.Item1 -> Scenarios; }
    | Suite            -> Suite
      {
        Name                         -> Name;
        SuiteBody.Platform.Reference -> Platform;
        SuiteBody.Product.Reference  -> Product;
        SuiteBody.DefDeclarations    -> Definitions;
        SuiteBody.SuiteStatements    -> Statements;
      }
  }

  map syntax Grammar.DefDeclaration -> Definition
  {
    Reference -> Reference;
    DefExpr   -> Expr;
  }

  map syntax Grammar.DefExpr -> DefExpr
  {
    | StringLiteral             -> String                    { StringLiteral -> Value; }
    | True                      -> True                      {  }
    | False                     -> False                     {  }
    | RealLiteral               -> RealLiteral               {  }
    | DecimalIntegerLiteral     -> DecimalIntegerLiteral     {  }
    | HexadecimalIntegerLiteral -> HexadecimalIntegerLiteral {  }
    | Reference                 -> Reference                 {  }
  }

  map syntax Grammar.Field -> Field
  {
    Name    -> Name;
    AnyType -> Type;
  }

  map syntax Grammar.SuiteBody.SuiteStatement -> SuiteStatement
  {
    | CallTest -> CallScenario { Scenario -> Scenario; }
  }

  map syntax Grammar.ScenarioBody.Environment -> Environment
  {
    Platform -> Platform;
    Product  -> Product;
  }

  map syntax Grammar.StringLiteral -> CSharp.StringLiteral {}

  map syntax Grammar.StringLiteral.RegularStringLiteral -> CSharp.StringLiteral { Lit }

  map syntax Grammar.StringLiteral.VerbatimStringLiteral -> CSharp.StringLiteral { Lit }
}
