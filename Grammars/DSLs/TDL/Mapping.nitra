using DotNet;
using Nitra.Declarations;

namespace Tdl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Следующий код добавляет в шарповые идентификаторы поддержку идентификаторов в Lisp-стиле и "заковыченых" 

  map syntax Grammar.Name.String    -> Nitra.Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));
  map syntax Grammar.Name.ListStyle -> Nitra.Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));

  map syntax Grammar.Name.String(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }
  map syntax Grammar.Name.ListStyle(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }

  map syntax Grammar.Reference.String    -> Nitra.Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));
  map syntax Grammar.Reference.ListStyle -> Nitra.Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));

  map syntax Grammar.Module -> Module
  {
    Name = Name(Location.FromStart(), Location.Source.File.Name);
    MemberDeclarations -> Members;
  }

  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  map syntax Grammar.MemberDeclaration -> NamespaceMember
  {
    | Open             -> UsingOpenDirective  {               QualifiedIdentifier -> NamespaceOrTypeName; }
    | Alias            -> UsingAliasDirective { Name -> Name; QualifiedIdentifier -> NamespaceOrTypeName; }
    | Platform         -> Platform.Def        { Name -> Name; }
    | PlatformSet      -> Platform.Set        { Name -> Name; Platforms.Item1 -> Platforms; }
    | DeploymentScript -> Deployment.Script   { Name -> Name; ScriptPath -> Path; FormalParameters.Item1 -> Parameters; }
    | DeploymentSet    -> Deployment.Set      { Name -> Name; Deployments.Item1 -> Deployments; }
    | ProductType      -> ProductType         { Name -> Name; }
    | Product          -> Product.Def         { Name -> Name; Type -> Type; }
    | ProductSet       -> Product.Set         { Name -> Name; Type -> Type; Products.Item1 -> Products; }
    | Scenario         -> Scenario.Def        { Name -> Name; ScenarioBody.ProductType.Reference -> ProductType; }
    | ScenarioSet      -> Scenario.Set        { Name -> Name; Scenarios.Item1 -> Scenarios; }
    | Suite            -> Suite               { Name -> Name; }
  }

  map syntax Grammar.StringLiteral -> TdlExpr
  {
    | RegularStringLiteral  -> RegularStringLiteral  { }
    | VerbatimStringLiteral -> VerbatimStringLiteral { }
  }
}
