using Nitra;
using Nitra.Runtime;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Console;
using System.Linq;
using System.Threading;

module Program
{
  Main() : void
  {
    def language = Sample.Instance;
    def session  = ParseSession(language.StartRule, language.CompositeGrammar, compilerMessages = ConsoleCompilerMessages());
    while (true)
    {
      Write("input>");
      def text = ReadLine();
      when (string.IsNullOrEmpty(text))
        break;

      def source    = SourceSnapshot(text);
      def result    = session.Parse(source);
      def parseTree = result.CreateParseTree();

      Write("print>");
      WriteLine(parseTree);
      WriteLine();
    }
  }
}

public partial class Top : AstBase, IProjectSupport
{
  public RefreshReferences(_cancellationToken : CancellationToken, _project : Project) : object
  {
    null
  }

  public RefreshProject(_cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], _data : object) : void
  {
    def context  = DependentPropertyEvalContext();
    def scope    = TableScope("Variables");
    def evalHost = SampleProjectEvalPropertiesHost(files, scope);
    evalHost.EvalProperties(context, "Collect variables", 0);
    evalHost.EvalProperties(context, "Compute variables", 1);
  }

  public GetSymbolById(_ : object, _ : int) : ValueOption[DeclarationSymbol] { VNone() }
  public DeconstructType(_symbol : DeclarationSymbol, type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool
  {
    type = null;
    typeArgs = ImmutableArray.Empty;
    false
  }

  public VisitGlobalSymbols(data : object, callback : Predicate[DeclarationSymbol]) : void
  {
  }
}

class SampleProjectEvalPropertiesHost : ProjectEvalPropertiesHost
{
  private _rootScope : TableScope;

  public this(files : ImmutableArray[FileEvalPropertiesData], rootScope : TableScope)
  {
    base(files);
    _rootScope = rootScope;
  }

  protected override BeforeStage(context : DependentPropertyEvalContext, _passName : string) : void
  {
    when (context.Stage == 0)
      foreach (file in _files)
        when (file.Ast is Top as top)
          top.ContainingTable = _rootScope;
  }
}

