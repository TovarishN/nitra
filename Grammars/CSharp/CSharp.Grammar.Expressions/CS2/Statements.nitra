namespace CSharp
{
  syntax module Statements
  {
    using Nitra.Core;

    using Core;
    using TokenNames;
    using Literals;
    using CSharp.CsIdentifiers;
    using Expressions;
    using Types;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias BooleanExpression   = Expression;
    alias ConstantExpression  = Expression;
    alias VariableDeclarators = (VariableDeclarator; ","sm)+;
    alias ConstantDeclarators = (ConstantDeclarator; ","sm)+;

    syntax SwitchLabel
    {
      | Case    = "case" sm ConstantExpression ":";
      | Default = "default" ":";
    }

    syntax SwitchSection = SwitchLabel+ inl Statement+ d;

    syntax LocalVariableDeclaration
    {
      | Multi = LocalVariableType sm VariableDeclarators; // local-variable-declaration
    }

    syntax ForInitializer
    {
      | Var = LocalVariableDeclaration;
      | List = (Expression; ","sm)+;
    }

    syntax ForIterator = (Expression; ","sm)+;

    alias  ForCondition            = Expression;

    syntax LocalVariableType
    {
      | Var = "var"
      | Type = !"var" AnyType;
    }

    [ExplicitSpaces]
    syntax CastPredicate
    {
      | CastPredicate01 = '~';
      | CastPredicate02 = '!' !'=';
      | CastPredicate03 = '&' !'=';
      | CastPredicate04 = '&' !'&';
      | CastPredicate05 = '(';
      | CastPredicate06 = !("as"S) CsIdentifiers.IdentifierStartCharacter;
      | CastPredicate07 = !("is"S) CsIdentifiers.IdentifierStartCharacter;
      | CastPredicate08 = '@';
      | HexadecimalIntegerLiteral
      | DecimalIntegerLiteral
      | CharacterLiteral
      | "true" S
      | "false" S;
      | RegularStringLiteral;
      | "null" S;
      | RealLiteral;
    }

    syntax ResourceAcquisition
    {
      | LocalVar   = LocalVariableDeclaration /* &")" */;
      | Expression;
    }

    syntax CatchSpecifier = "(" AnyType Name=(sm Name)? ")";

    syntax CatchClause
    {
      | Simple        = "catch"   sm Block;
      | WithSpecifier = "catch"   sm CatchSpecifier sm Block;
    }

    syntax FinallyClause = "finally" sm Block;

    //  Statement internals
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    //  Statements

    extend syntax Statement
    {
      | LocalVariable     = LocalVariableDeclaration ";"nl;
      | LocalConstant     = "const" sm AnyType ConstantDeclarators ";"nl;
    }

    extend syntax EmbeddedStatement
    {
      // selection-statement
      | If          = "if" sm "(" BooleanExpression ")" IndentedEmbeddedStatement ("else" IndentedEmbeddedStatement)?;
      | Switch      = "switch" sm "(" Expression ")"nl "{" inl SwitchSection* d "}" nl;
      // iteration-statement
      | While       = "while" sm "(" BooleanExpression ")" IndentedEmbeddedStatement;
      | Do          = "do" nl IndentedEmbeddedStatement "while" sm "(" BooleanExpression ")" ";" nl;
      | For         = "for" "(" ForInitializer? ";"sm ForCondition? ";"sm ForIterator? ")" IndentedEmbeddedStatement;
      | Foreach     = "foreach" "(" LocalVariableType sm Name sm "in" sm Expression ")" IndentedEmbeddedStatement;

      | Checked     = "checked" sm   Block; // checked-statement
      | Unchecked   = "unchecked" sm Block; // unchecked-statement

      | Lock        = "lock" sm  "(" Expression ")"          IndentedEmbeddedStatement; // lock-statement
      | Using       = "using" sm "(" ResourceAcquisition ")" IndentedEmbeddedStatement; // using-statement

      | YieldReturn = "yield" sm "return" sm Expression ";"nl; // try-statement
      | YieldBreak  = "yield" sm "break"    ";"nl;             // try-statement

      | TryCatch    =  "try" sm Block CatchClause+ FinallyClause?;
      | TryFinally  =  "try" sm Block FinallyClause;


      // jump-statement
      | Break       = "break"                ";" nl;
      | Continue    = "continue"             ";" nl;
      | Return      = "return"sm Expression  ";" nl;
      | ReturnVoid  = "return"               ";" nl;
      | Throw       = !Expression "throw" sm Expression? ";" nl;
    }
  }
}
