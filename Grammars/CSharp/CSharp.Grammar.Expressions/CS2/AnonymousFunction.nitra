namespace CSharp
{
  syntax module AnonymousFunction
  {
    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Types;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    regex  ExplicitAnonymousFunctionParameterModifier = "ref" | "out";
    syntax ExplicitAnonymousFunctionParameter         = ExplicitAnonymousFunctionParameterModifier? AnyType sm Name;
    syntax ExplicitAnonymousFunctionSignature         = "(" (ExplicitAnonymousFunctionParameter; ","sm)* ")";

    syntax ImplicitAnonymousFunctionSignature         = "(" (Name; ","sm)+ ")";

    syntax AnonymousFunctionBody
    {
      | Block;
      | Expression;
    }

    extend syntax Expression
    {
      // Lambdas  //TODO:Move to CS3
      | Lambda_SingleParam1    =            Name                               sm "=>" sm AnonymousFunctionBody;
      | Lambda_ExplicitParams1 =            ExplicitAnonymousFunctionSignature sm "=>" sm AnonymousFunctionBody;
      | Lambda_ImplicitParams1 =            ImplicitAnonymousFunctionSignature sm "=>" sm AnonymousFunctionBody;

      // Anonymous function // Rename to Anonymous Method
      | AnonymousFunction1     =            "delegate"sm ExplicitAnonymousFunctionSignature? nl "{" inl Statement* d "}";
    }
  }
}
