using DotNet;

using Nitra;
using Nitra.Declarations;

using Nemerle.Collections;

using System.Globalization;

namespace CSharp
{
  map syntax CS7.Argument.OutVar -> DotNet.Expr
  {
    OutVarArgument
    {
      LocalVariableType -> VariableType;
      Name -> Name;
      // ArgumentNameOpt -> Name;
      // Modifier -> Modifier;
    }
  }

  map syntax CS7.Argument.OutWildcard -> DotNet.Expr
  {
    IgnoreOutVarArgument
    {
      // ArgumentNameOpt -> Name;
      // Modifier -> Modifier;
    }
  }

  map syntax CS7.TupleArgument -> DotNet.TupleExprField
  {
    | Named   -> NamedTupleExprField   { Expression -> Expr; Reference -> Reference; }
    | Unnamed -> UnnamedTupleExprField { Expression -> Expr; }
  }

  map syntax CS7.Expression.Ref -> DotNet.Expr
  {
    RefExpr { Expression -> Expr1; }
  }

  map syntax CS7.Expression.Throw -> DotNet.Expr
  {
    ThrowExpr { Expression -> Expr1; }
  }

  map syntax CS7.Expression.Tuple -> DotNet.Expr
  {
    TupleExpr { TupleArguments.Item1 -> Fields; }
  }

  map syntax CS7.Expression.PatternMatching -> DotNet.Expr
  {
    PatternMatching { Expr1 -> Expr1; TypeName -> TypeName; }
  }

  map syntax CS7.TupleTypeField -> TupleTypeField
  {
    | Named   -> NamedTupleField   { AnyType -> Type; Name -> Name; }
    | Unnamed -> UnnamedTupleField { AnyType -> Type;  }
  }

  map syntax CS7.TypeName.Tuple -> QualifiedReference
  {
    TupleType { TupleTypeFields.Item1 -> Fields; }
  }

  map syntax CS7.TypeMemberDeclaration.RefMethod -> TypeMember*
  {
    [Member.Method
      {
        MethodHeader.Name             -> Name;
        MethodHeader.InterfaceTypeOpt -> InterfaceType;
        match(MethodHeader.TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        MethodHeader.TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(NSpan(), false);
        MethodHeader.AnyType          -> ReturnType; // TODO: Wrap the ReturnType in RefType()
        MethodHeader.FormalParameters.Item1 -> Parameters;
        Attributes                    -> Attributes;
        Modifiers                     -> Modifiers;
      }]
  }

  map syntax CS7.TypeMemberDeclaration.RefProperty -> TypeMember*
  {
    [Member.Property
      {
        Name             -> Name;
        AnyType          -> Type; // TODO: Wrap the ReturnType in RefType()
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
  }

  map syntax CS7.TypeMemberDeclaration.RefIndexer -> TypeMember*
  {
    [Member.Indexer
      {
        Name = Name(this.Location.WithSpan(this.KwThis), "#Item");
        FormalParameters.Item1 -> Parameters;
        AnyType          -> Type; // TODO: Wrap the ReturnType in RefType()
        InterfaceTypeOpt -> InterfaceType;
        PropertyBody.AccessorDeclarations -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
  }

  map syntax CS7.TypeMemberDeclaration.RefPropertyExpressionBodied -> TypeMember*
  {
    [Member.Property
    {
      Name             -> Name;
      AnyType          -> Type;
      InterfaceTypeOpt -> InterfaceType;
      [] -> Accessors; // TODO: mage getter from Expression
      Attributes       -> Attributes;
      Modifiers        -> Modifiers;
    }]
  }

  map syntax CS7.TypeMemberDeclaration.RefMethodExpressionBodied -> TypeMember*
  {
    [Member.Method
      {
        MethodHeader.Name             -> Name;
        MethodHeader.InterfaceTypeOpt -> InterfaceType;
        match(MethodHeader.TypeParametersOpt) { Some(value) -> value | None() -> [] } -> TypeParameterAliases;
        MethodHeader.TypeParameterConstraintsClauses -> TypeParameterConstraints;
        IsPartial = ParsedValue(NSpan(), false);
        MethodHeader.AnyType          -> ReturnType; // TODO: Wrap the ReturnType in RefType()
        MethodHeader.FormalParameters.Item1 -> Parameters;
        Attributes                    -> Attributes;
        Modifiers                     -> Modifiers;
      }]
  }

  map syntax CS7.TypeMemberDeclaration.RefIndexerExpressionBodied -> TypeMember*
  {
    [Member.Indexer
      {
        Name = Name(this.Location.WithSpan(this.KwThis), "#Item");
        FormalParameters.Item1 -> Parameters;
        AnyType          -> Type; // TODO: Wrap the ReturnType in RefType()
        InterfaceTypeOpt -> InterfaceType;
        //PropertyBody.AccessorDeclarations -> Accessors;
        [] -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
  }

  map syntax CS7.TypeMemberDeclaration.IndexerExpressionBodied -> TypeMember*
  {
    [Member.Indexer
      {
        Name = Name(this.Location.WithSpan(this.KwThis), "#Item");
        FormalParameters.Item1 -> Parameters;
        AnyType          -> Type;
        InterfaceTypeOpt -> InterfaceType;
        //PropertyBody.AccessorDeclarations -> Accessors;
        [] -> Accessors;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
  }

  map syntax CS7.TypeMemberDeclaration.ConstructorExpressionBodied -> TypeMember*
  {
    [Member.Constructor
      {
        Name                      -> Name;
        FormalParameters.Item1    -> Parameters;
        Attributes                -> Attributes;
        Modifiers                 -> Modifiers;
        ConstructorInitializerOpt -> Initializer;
      }]
  }

  map syntax CS7.TypeMemberDeclaration.DestructorExpressionBodied -> TypeMember*
  {
    [Member.Destructor
      {
        Name             -> Name;
        FormalParameters.Item1 -> Parameters;
        Attributes       -> Attributes;
        Modifiers        -> Modifiers;
      }]
  }

  map syntax CS7.Expression.RealLiteralWithSeparator -> DotNet.Expr
  {
    RealLiteral { Value = ParseUtils.MakeRealLiteral(this, RealLiteralWithSeparator); }
  }

  map syntax CS7.Expression.DecimalIntegerLiteralWithSeparator -> DotNet.Expr
  {
    IntegerLiteral { Value = ParseUtils.MakeIntegerLiteral(Lit, Lit.Digits, Lit.SuffixOpt, 10); }
  }

  map syntax CS7.Expression.BinaryLiteralWithSeparator -> DotNet.Expr
  {
    IntegerLiteral { Value = ParseUtils.MakeIntegerLiteral(Lit, Lit.Digits, Lit.SuffixOpt, 2) ;}
  }

  map syntax CS7.Expression.HexadecimalIntegerLiteralWithSeparator -> DotNet.Expr
  {
    IntegerLiteral { Value = ParseUtils.MakeIntegerLiteral(Lit, Lit.Digits, Lit.SuffixOpt, 16) ;}
  }
}
