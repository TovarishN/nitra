namespace CSharp
{
  syntax module AnonymousType
  {
    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    syntax MemberDeclarator
    {
      | Named      = Reference sm "=" sm Expression;
      // We need to accept any expressions (not only valid) for IntelliSense needs.
      // TODO: Verify that the Expression is a simple-name or a member-access during mapping (see member-declarator in C# spec)
      | Expression = !(Reference "=") Expression
    }

    extend syntax Expression
    {
      | NewAnonymous = "new" sm "{"sm (MemberDeclarator; ","sm; ?)* sm "}";
    }
  }
}
