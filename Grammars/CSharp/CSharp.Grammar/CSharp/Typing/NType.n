using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Runtime.Binding;
using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  [Record]
  public class NType : ITypeReference
  {
    public this(symbol : ISymbol2) { Symbol = symbol :> ITypeReference; Arguments = []; }
    public this(symbol : ISymbol2, arguments : IList[ISymbol2]) { Symbol = symbol :> ITypeReference; Arguments = arguments.Map(x => x.ResolutionResult :> ITypeReference); }

    public Symbol : ITypeReference { get; }
    public Arguments : list[ITypeReference] { get; }
    
    public Name     : string { get { Symbol.Name } }
    public FullName : string
    {
      get
      {
      if (Arguments.IsEmpty)
        $<#$(Symbol.FullName)#>
      else
        $<#$(Symbol.FullName)[..$(Arguments; ", "; _.FullName)]#>
      }
    }

    public override ToString() : string { FullName }
  }
}
