namespace CSharp
{
  syntax module ObjectAndCollectionInitializers
  {
    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Expressions;
    using CSharp.Types;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    syntax MemberInitializer
    {
      | Member = Reference sm "=" sm InitializerValue;
    }

    syntax InitializerValue
    {
      | Expression
      | ObjectOrCollectionInitializer
    }

    syntax ObjectOrCollectionInitializer
    {
      | ObjectInitializer = "{" sm (MemberInitializer; "," sm; ?)* sm "}"
        {
        }

      | CollectionInitializer = "{" sm (ElementInitializer; "," sm; ?)* sm "}"
        {
          syntax ElementInitializer
          {
            | NonAssignmentExpression = !(Reference "=") Expression // TODO: check for non-assignment-expression (see 7.18 C# spec) while mapping
            | ExpressionList = "{" sm (Expression; "," sm)* sm "}"
          }
        }
    }

    extend syntax Expression
    {
      | NewObject_2            = "new" sm AnyNonArrayType "(" (Argument; ","sm)* ")" sm ObjectOrCollectionInitializer;
      | NewObject_3            = "new" sm AnyNonArrayType sm ObjectOrCollectionInitializer;
    }
  }
}
