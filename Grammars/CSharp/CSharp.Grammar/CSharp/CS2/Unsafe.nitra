namespace CSharp
{
  syntax module Unsafe
  {
    using Nitra.Core;
    using CSharp.Core;
    using CSharp.Types;
    using CSharp.Expressions;
    using CSharp.Statements;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    regex Pointer = "*";
    syntax PointerSpecifiers = Pointer*;

    extend syntax TypeSpecifier
    {
      | PointerSpecifier = Pointer;
    }

    extend syntax Modifier
    {
      | Unsafe    = "unsafe"sm;
    }

    extend syntax Expression
    {
      | StackallocInitializer  = "stackalloc"sm AnyType "[" Expression "]";

      | NewArray_1             = "new" sm AnyNonArrayType PointerSpecifiers "[" (Expression; ","sm)+ "]" RankSpecifier*;                       // array-creation-expression  (1)
      | NewArray_2             = "new" sm AnyNonArrayType PointerSpecifiers "[" (Expression; ","sm)+ "]" RankSpecifier* sm ArrayInitializer; // array-creation-expression  (1)

      precedence Unary:
      | Addressof              = "&"  Expression;

      precedence Primary:
      | PointerMemberAccess    =  Expression "->" Expression;
    }

    alias  VariableDeclarators = (VariableDeclarator; ","sm)+;
    extend syntax EmbeddedStatement
    {
      | Unsafe      = "unsafe" Block;
      | Fixed       = "fixed" sm "(" LocalVariableType sm VariableDeclarators ")"nl IndentedEmbeddedStatement;
    }
  }
}
