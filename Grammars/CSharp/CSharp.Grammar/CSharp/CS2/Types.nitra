namespace CSharp
{
  syntax module Types
  {
    using Nitra.Core;

    using CSharp.Core;
    using CSharp.TokenNames;
    using Literals;
    using CSharp.CsIdentifiers;
    using Expressions;
    using Attributes;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias Attributes              = AttributeSection*;

    ////////////////////////////////////////////////////////////////////////////////////
    // TypeParameters

    regex InOrOut  = "in" | "out";
    syntax VarianceAnnotation  = Annotation=InOrOut sm;
    syntax TypeParameter       = Attributes VarianceAnnotation? Name;
    [ExplicitSpaces]
    syntax TypeParameters   = OpenBrace s (TypeParameter; s "," s sm)+ s CloseBrace
    {
      [SpanClass(OpenBrace)]
      regex OpenBrace = "<";

      [SpanClass(CloseBrace)]
      regex CloseBrace = ">";
    }

    syntax TypeParameterConstraint
    {
      | Ctor   = "new" "(" ")";
      | Class  = "class";
      | Struct = "struct";
      | Base   = AnyType;
    }

    syntax TypeParameterConstraints        = (TypeParameterConstraint; ","sm)+;
    syntax TypeParameterConstraintsClause  =  "where"sm Reference ":"sm TypeParameterConstraints nl;
    syntax TypeParameterConstraintsClauses = TypeParameterConstraintsClause*;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    // Types

    [SpanClass(Keyword)]
    regex EnumBaseType      = "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong";
    [SpanClass(Keyword)]
    regex IntegralType      = EnumBaseType | "char";
    [SpanClass(Keyword)]
    regex FloatingPointType = "float" | "double";
    [SpanClass(Keyword)]
    regex NumericType       = IntegralType | FloatingPointType | "decimal";
    [SpanClass(Keyword)]
    regex PredefinedType    = NumericType | "void"  | "bool" | "string" | "dynamic" | "object";

    [ExplicitSpaces]
    syntax TypeName
    {
      | PredefinedType
      | QualifiedName = !PredefinedType QualifiedIdentifier
    }

    regex RankSeparator = ",";
    [ExplicitSpaces] syntax RankSpecifier = "[" s RankSeparators=(RankSeparator s)* "]";

    [ExplicitSpaces]
    syntax TypeSpecifier
    {
      | RankSpecifier;
    }

    [ExplicitSpaces] syntax NullableSpecifier = "?" !"?"; // dont't collide with `??' operator
    [ExplicitSpaces] syntax AnyNonArrayType             = TypeName (s NullableSpecifier)?;
    [ExplicitSpaces] syntax AnyNonArrayTypeNullableHack = TypeName NullableSpecifier=(s NullableSpecifier !(Expression ":" Expression))?; // don't collide with ternary op ? : // BUG:
    [ExplicitSpaces] syntax AnyType                     = AnyNonArrayType (s TypeSpecifier)*;
    [ExplicitSpaces] syntax AnyTypeNullableHack         = AnyNonArrayTypeNullableHack (s TypeSpecifier)*;

    //
    ////////////////////////////////////////////////////////////////////////////////////
  }
}
