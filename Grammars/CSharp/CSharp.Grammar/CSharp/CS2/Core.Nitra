namespace CSharp
{
  syntax module Core
  {
    using Nitra.Core;
    using Nitra.CStyleComments;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    extend token IgnoreToken
    {
      | [SpanClass(InlineComment),    ExplicitSpaces] Preprocessor = Start='#' Body=(!NewLineCharacter Any)* End=NewLine?;
      | [SplitAtCompletionPosition] SpaceToken = Spaces;
    }

    syntax Expression
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////
    //  Statement internals

    syntax Block    = nl "{" inl Statement* d "}" nl;

    syntax IndentedEmbeddedStatement
    {
      | Statement = !"{" (inl EmbeddedStatement d); // not a block statment
      | Block     = &"{" Stmt=Block;
    }

    syntax Statement
    {
      | EmbeddedStatement;
    }

    syntax EmbeddedStatement
    {
      | Empty       = ";" nl;
      | Block;
      | ExpressionStatement = Expression ";" nl;
    }

    //
    ////////////////////////////////////////////////////////////////////////////////////

    [DynamicSyntaxExtentionPoint]
    syntax NamespaceMemberDeclaration
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////
    // Modifiers

    syntax Modifiers = Modifier*;

    syntax Modifier
    {
      | New       = "new"sm;
      | Public    = "public"sm;
      | Protected = "protected"sm;
      | Internal  = "internal"sm;
      | Private   = "private"sm;
      | Virtual   = "virtual"sm;
      | Volatile  = "volatile"sm;
      | Static    = "static"sm;
      | Readonly  = "readonly"sm;
      | Sealed    = "sealed"sm;
      | Override  = "override"sm;
      | Abstract  = "abstract"sm;
      | Extern    = "extern"sm;
    }

    //
    ////////////////////////////////////////////////////////////////////////////////////
  }
}
