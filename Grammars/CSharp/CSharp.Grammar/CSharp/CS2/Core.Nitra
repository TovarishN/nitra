namespace CSharp
{
  syntax module Core
  {
    using Nitra.Core;
    using Nitra.CStyleComments;
    using CsIdentifiers;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_']+ rule S;

    alias ConstantExpression  = Expression;

    extend token IgnoreToken
    {
      | [SpanClass(InlineComment),    ExplicitSpaces] Preprocessor = Start='#' Body=(!NewLineCharacter Any)* End=NewLine?;
      | [SplitAtCompletionPosition] SpaceToken = Spaces;
    }

    syntax Expression
    {
      map DotNet.Expr;
    }

    syntax VariableInitializer
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////
    // Variables

    syntax VariableDeclarator  = Name (sm "=" sm VariableInitializer)?;
    alias  VariableDeclarators = (VariableDeclarator; ","sm)+;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    // Constants

    syntax ConstantDeclarator  = Name sm "=" sm ConstantExpression;
    alias  ConstantDeclarators = (ConstantDeclarator; ","sm)+;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    // Arguments

    regex ArgumentModfier = "ref" | "out";
    syntax ArgumentName    = Reference !"::" ":" sm;
    syntax Argument
    {
      | Ref    = ArgumentName? Modfier="ref" sm Expression;
      | Out    = ArgumentName? Modfier="out" sm Expression;
      | Simple = ArgumentName?                  Expression;
    }

    syntax ArgumentList    = (Argument; ","sm)*;

    //
    ////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////
    //  Statement internals

    syntax Block    = nl "{" inl Statement* d "}" nl;

    syntax IndentedEmbeddedStatement
    {
      | Statement = !"{" (inl EmbeddedStatement d); // not a block statment
      | Block     = &"{" Stmt=Block;
    }

    syntax Statement
    {
      | EmbeddedStatement;
    }

    syntax EmbeddedStatement
    {
      | Empty       = ";" nl;
      | Block;
      | ExpressionStatement = Expression ";" nl;
    }

    //
    ////////////////////////////////////////////////////////////////////////////////////

    [DynamicSyntaxExtentionPoint]
    syntax NamespaceMemberDeclaration
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////
    // Modifiers

    syntax Modifiers = Modifier*;

    syntax Modifier
    {
      | New       = "new"sm;
      | Public    = "public"sm;
      | Protected = "protected"sm;
      | Internal  = "internal"sm;
      | Private   = "private"sm;
      | Virtual   = "virtual"sm;
      | Volatile  = "volatile"sm;
      | Static    = "static"sm;
      | Readonly  = "readonly"sm;
      | Sealed    = "sealed"sm;
      | Override  = "override"sm;
      | Abstract  = "abstract"sm;
      | Extern    = "extern"sm;
    }

    //
    ////////////////////////////////////////////////////////////////////////////////////
  }
}
