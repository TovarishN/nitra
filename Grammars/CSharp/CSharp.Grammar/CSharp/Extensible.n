using Nitra;
using Nitra.Internal;
using Nitra.Runtime.Reflection;
using System.Text;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime;
using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  public partial abstract class Extensible
  {
    private class UsingImportDeclarationWalker : WalkerBase[int]
    {
      public Name : StringBuilder = StringBuilder();

      public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : IParseResult, context : int) : void
      {
        IgnoreParams();
        when (ruleInfo.Descriptor : object == CsIdentifiers.IdentifierBody)
        {
          _ = Name.Append(parseResult.SourceSnapshot.Text, startPos, endPos - startPos).Append(".")
        }
      }

      public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : int) : void
      {
        if (ruleInfo.RuleParser.Descriptor : object == CsIdentifiers.QualifiedIdentifier)
        {
          _ = Name.Clear();
          WalkSimple(startPos, endPos, ruleInfo.RuleParser, parseResult, context);
          Name.Length = Name.Length - 1;
        }
        else
          WalkSimple(startPos, endPos, ruleInfo.RuleParser, parseResult, context);
      }
    }

    UsingSyntaxHandler(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PrefixRuleParser, parseResult : IParseResult, grammar : CompositeGrammar) : CompositeGrammar
    {
      def walker = UsingImportDeclarationWalker();
      walker.WalkPrefix(rawTreePtr, startPos, endPos, ruleParser, parseResult, 0);

      def descriptor = (parseResult :> ParseResult).TryGetDynamicSyntaxExtension(walker.Name.ToString());
      if (descriptor != null)
        grammar.Add(descriptor);
      else
        grammar
    }
  }
}
