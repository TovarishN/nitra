using Nitra;
using Nitra.BackEnd.Cci;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using System.Threading;
using ND = Nitra.Declarations;

[assembly: ProjectSupport("Nitra C#", typeof(CSharp.CompilationUnit))]

namespace CSharp
{
  public partial class CompilationUnit : AstBase, IProjectSupport, NamespaceBody
  {
    public RefreshReferences(cancellationToken : CancellationToken, project : Project) : object
    {
      def noTypeParameters = array(0);
      def bindNs(scope : Scope, name : string) : Ref[NamespaceSymbol]
      {
        scope.Bind.[NamespaceSymbol](Reference(Location.Default, name))
      }
      def bindType(scope : Scope, name : string) : Ref[TopGenericTypeSymbol]
      {
        scope.Bind.[TopGenericTypeSymbol](Reference(Location.Default, name))
      }
      def defineAlias(context : DependentPropertyEvalContext, systemNs : NamespaceSymbol, declaredIn : NamespaceSymbol, name : string, aliasName : string) : void
      {
        def symbolRef  = bindType(systemNs.Scope, name);
        unless (symbolRef.IsSymbolEvaluated)
          return;
          
        def symbol     = symbolRef.Symbol;
        def decl       = symbol.FirstDeclarationOrDefault :> IExternalTopTypeDeclaration;
        def aliasDecl  = ExternalTopTypeDeclaration.[TypeAliasSymbol](ND.Name(Location.Default, aliasName), decl.Type);
        def alias      = aliasDecl.DefineSymbol(declaredIn.MemberTable);
        alias.Replacement = symbolRef;
        alias.TypeParametersCount = 0;
        alias.TypeParameters      = noTypeParameters;
        alias.DeclaredIn          = declaredIn;
        alias.EvalProperties(context);
      }

      def backEnd = CciBackEnd();
      backEnd.CancellationToken = cancellationToken;
      def context = DependentPropertyEvalContext();
      def rootNamespace = backEnd.LoadExternalSymbols(project.Libs, project.ProjectDir, project.CompilerMessages, context);
      def systemNsRef = bindNs(rootNamespace.Scope, "System");
      when (systemNsRef.IsSymbolEvaluated)
      {
        def systemNs = systemNsRef.Symbol;
      
        defineAlias(context, systemNs, rootNamespace, "Object",  "object");
        defineAlias(context, systemNs, rootNamespace, "Void",    "void");
        defineAlias(context, systemNs, rootNamespace, "String",  "string");
        defineAlias(context, systemNs, rootNamespace, "Boolean", "bool");
        defineAlias(context, systemNs, rootNamespace, "Byte",    "byte");
        defineAlias(context, systemNs, rootNamespace, "SByte",   "sbyte");
        defineAlias(context, systemNs, rootNamespace, "Int16",   "short");
        defineAlias(context, systemNs, rootNamespace, "UInt16",  "ushort");
        defineAlias(context, systemNs, rootNamespace, "Int32",   "int");
        defineAlias(context, systemNs, rootNamespace, "UInt32",  "uint");
        defineAlias(context, systemNs, rootNamespace, "Int64",   "long");
        defineAlias(context, systemNs, rootNamespace, "UInt64",  "ulong");
        defineAlias(context, systemNs, rootNamespace, "Single",  "float");
        defineAlias(context, systemNs, rootNamespace, "Double",  "double");
        defineAlias(context, systemNs, rootNamespace, "Decimal", "decimal");
        defineAlias(context, systemNs, rootNamespace, "Char",    "char");
      }

      (backEnd, context, rootNamespace)
    }
    
    public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
    {
      def (_backEnd, context, rootNamespace) = (data :> CciBackEnd * DependentPropertyEvalContext * NamespaceSymbol);
      context.CancellationToken = cancellationToken;
      _backEnd.CancellationToken = cancellationToken;

      def removeParsedSymbols(tableScope : TableScope)
      {
        tableScope.Undefine(_.IsParsed);
        foreach (symbols in tableScope.Symbols)
        foreach (symbol is NamespaceSymbol in symbols)
          removeParsedSymbols(symbol.MemberTable);
      }
      removeParsedSymbols(rootNamespace.MemberTable);

      when (cancellationToken.IsCancellationRequested)
        return;

      def evalHost = CSharpProjectEvalPropertiesHost(files, rootNamespace);
      evalHost.EvalProperties(context, "SymbolHierarchy", 0);
      evalHost.EvalProperties(context, "Scopes", 1);
      evalHost.EvalProperties(context, "Type bodies binding", 2);
    }
  }

  class CSharpProjectEvalPropertiesHost : ProjectEvalPropertiesHost
  {
    private _rootNamespace : NamespaceSymbol;

    public this(files : ImmutableArray[FileEvalPropertiesData], rootNamespace : NamespaceSymbol)
    {
      base(files, ImmutableArray.Create(rootNamespace));
      _rootNamespace = rootNamespace;
    }

    protected override BeforeStage(context : DependentPropertyEvalContext, _passName : string) : void
    {
      match (context.Stage)
      {
        | 0 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.RootNamespace = _rootNamespace;

        | 1 =>
          foreach (file in _files)
            when (file.Ast is CompilationUnit as cu)
              cu.Scope = _rootNamespace.Scope;

        | _ => ()
      }
    }
  }
}
