using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace DotNet
{
  abstract ast Expr : DotNet.ExprBase
  {
    | Nop { Type = context.CreateFreeTypeVar(); }
    | String
      {
        Value : CSharp.StringLiteral;
        Type = context.GetStringType();
      }
    | Char
      {
        Value : char;
        Type = context.GetCharType();
      }
    | BooleanLiteral
      {
        Value : bool;
        Type = context.GetBooleanType();
      }
    | NullLiteral
      {
        Type = context.CreateNullTypeVar();
      }

    | Parenthesized
      {
        Expression : Expr;

        Expression.ScopeIn = ScopeIn;
        Expression.BuildInvocationScope = BuildInvocationScope;
        Expression.ExpectedType = ExpectedType;
        Type = Expression.Type;
      }
    | Argument : ExprArgument { }
    | OutArgument : ExprArgument { }
    | RefArgument : ExprArgument { }
    | IgnoreOutVarArgument : OutVarArgumentBase { Type = ExpectedType; }
    | NewObject_1
      {
        ConstructorType : QualifiedReference;

        ConstructorType.Scope = ScopeIn;
        // Arguments : Expr.Argument*;
        // Arguments.Scope = ScopeIn;
        // Arguments.IndexIn = 0;
        // Arguments.Used = true;
        //
        // stage 2:
        // out Ref : Ref[Member.ConstructorSymbol] = this.FindSuitableConstructor(ConstructorType.Ref.Symbol, Arguments.ArgumentType, context);
        //
        // Type = Ref.Symbol.DeclaredIn;
        Type = context.GetVoidType();
      }
    | Conditional
      {
        Condition : Expr;
        Expr1     : Expr;
        Expr2     : Expr;

        Condition.ExpectedType = context.GetBooleanType();
        Expr1.ExpectedType = ExpectedType;
        Expr2.ExpectedType = ExpectedType;
        Condition.ScopeIn = ScopeIn;
        Condition.Used = true;
        Expr1.ScopeIn = ScopeIn;
        Expr1.BuildInvocationScope = BuildInvocationScope;
        Expr1.Used = true;
        Expr2.ScopeIn = ScopeIn;
        Expr2.BuildInvocationScope = BuildInvocationScope;
        Expr2.Used = true;
        //Type = TypeUnifier.Instance.Unify(Expr1.Type, Expr2.Type);
        Type = Expr1.Type;
        ScopeOut = Condition.ScopeOut;
      }
    | NullCoalescing
      {
        Expr1 : Expr;
        Expr2 : Expr;

        Expr1.ScopeIn = ScopeIn;
        Expr1.BuildInvocationScope = BuildInvocationScope;
        Expr1.Used = true;
        Expr2.ScopeIn = ScopeIn;
        Expr2.BuildInvocationScope = BuildInvocationScope;
        Expr2.Used = true;
        //Type = TypeUnifier.Instance.Unify(Expr1.Type, Expr2.Type);
        Type = Expr1.Type;
      }
    | Cast
      {
        TypeName   : QualifiedReference;
        Expression : Expr;

        TypeName.Scope                  = ScopeIn;
        Expression.ScopeIn              = ScopeIn;
        Expression.BuildInvocationScope = BuildInvocationScope;
        Expression.Used                 = true;
      stage 2:
        out TypeRef : Ref[TypeSymbol] = TypeName.Ref.Resolve();
        Type = TypeRef.Symbol;
      }
    | ThisAccess
      {
        Type = context.GetObjectType(); // FIXME
      }
    | BaseAccessMember
      {
        Type = context.GetObjectType(); // FIXME
      }
    | BaseAccessIndexer
      {
        Type = context.GetObjectType(); // FIXME
      }
    | NewArray
      {
        Type = context.GetObjectType(); // FIXME
      }
    | TypeOf
      {
        Type = context.GetTypeType();
      }
    | Checked
      {
        Type = context.GetObjectType(); // FIXME
      }
    | Unchecked
      {
        Type = context.GetObjectType(); // FIXME
      }
    | Default
      {
        Type = context.CreateFreeTypeVar();
      }
    | Sizeof
      {
        Type = context.GetInt32Type(); // FIXME
      }
    | Assignment
      {
        Type = context.CreateFreeTypeVar();
      }
    | MulAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | DivAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | RemainderAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | AddAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | SubAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | ShiftLeftAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | ShiftRightAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | AndAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | XorAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | OrAssignment
      {
        Type = context.GetObjectType(); // FIXME
      }
    | ConditionalOr : OrAndExpr
      {
        Operation = BinaryOp.Or();
      }
    | ConditionalAnd : OrAndExpr
      {
        Operation = BinaryOp.And();
      }
    | LogicalOr : OrAndExpr
      {
        Operation = BinaryOp.Or(); // FIXME
      }
    | LogicalXor : OrAndExpr
      {
        Operation = BinaryOp.And(); // FIXME
      }
    | LogicalAnd : OrAndExpr
      {
        Operation = BinaryOp.And(); // FIXME
      }
    | Equal         : EqualExpr
      {
        Operation = BinaryOp.Equal();
      }
    | NotEqual      : EqualExpr
      {
        Operation = BinaryOp.NotEqual();
      }
    | LessThanOrEqual : Comparison
      {
        Operation = BinaryOp.LessEqual();
      }
    | Less          : Comparison
      {
        Operation = BinaryOp.Less();
      }
    | GreaterThanOrEqual  : Comparison
      {
        Operation = BinaryOp.GreaterEqual();
      }
    | Is
      {
      stage 2:
        out TypeNameTypeRef : Ref[TypeSymbol];
        out TypeNameType : TypeSymbol;

        Expr1.ScopeIn              = ScopeIn;
        Expr1.BuildInvocationScope = BuildInvocationScope;
        TypeName.Scope             = ScopeIn;
        TypeNameTypeRef            = TypeName.Ref.Resolve();
        TypeNameType               = TypeNameTypeRef.Symbol;
        Type                       = context.GetBooleanType();

        Expr1    : Expr;
        TypeName : QualifiedReference;
      }
    | As
      {
        stage 2:
          out TypeRef : Ref[TypeSymbol];

        Expr1.ScopeIn  = ScopeIn;
        Expr1.BuildInvocationScope = BuildInvocationScope;
        TypeName.Scope = ScopeIn;
        TypeRef        = TypeName.Ref.Resolve();
        Type           = TypeRef.Symbol;

        Expr1    : Expr;
        TypeName : QualifiedReference;
      }
    | ShiftLeft       : Arithmetic
      {
        Operation = BinaryOp.Greater();
      }
    | ShiftRight       : Arithmetic
      {
        Operation = BinaryOp.Greater();
      }
    | PointerIndirection
      {
        Expr1 : Expr;

        Expr1.ScopeIn              = ScopeIn;
        Expr1.BuildInvocationScope = BuildInvocationScope;
        Expr1.Used                 = true;
        Type                       = Expr1.Type; // FIXME
      }
    | Greater : Comparison
      {
        Operation = BinaryOp.Greater();
      }
    | Sum : Arithmetic
      {
        Operation = BinaryOp.Sum();
      }
    | Sub : Arithmetic
      {
        Operation = BinaryOp.Sub();
      }
    | Modulus : Arithmetic
      {
        Operation = BinaryOp.Mod();
      }
    | Multiply : Arithmetic
      {
        Operation = BinaryOp.Mul();
      }
    | Divide : Arithmetic
      {
        Operation = BinaryOp.Div();
      }
    | Identity : NumericUnary
      {
        Operation = UnaryOp.Identity();
      }
    | Negation : NumericUnary
      {
        Operation = UnaryOp.Negation();
      }
    | LogicalNegation : BoolUnary
      {
        Operation = UnaryOp.LogicalNegation();
      }
    | BitwiseNegation : NumericUnary
      {
        Operation = UnaryOp.BitwiseNegation();
      }
    | PreIncrement : NumericUnary
      {
        Operation = UnaryOp.PreIncrement();
      }
    | PreDecrement : NumericUnary
      {
        Operation = UnaryOp.PreDecrement();
      }
    | SimpleName
      {
        Reference.Scope = ScopeIn;
        Ref             = Reference.Ref.Resolve();
        Type            = Ref.Symbol.Type;
        Member          = Ref.Resolve(); // Результат Ref может быть неоднозначным.
      stage 2:
        out Ref : Ref[TypedDeclarationSymbol];

        Reference : Reference;
      }
    | MemberAccess1
      {
        Expr1.ScopeIn              = ScopeIn;
        Expr1.BuildInvocationScope = BuildInvocationScope;
        Ref                        = Reference.Ref.Resolve();
        Type                       = Ref.Symbol.Type;
        Reference.Scope            = if (Options == ExprOptions.Invocation) BuildInvocationScope(Expr1.Type, Expr1.Type.Scope) else Expr1.Type.Scope;
        Member                     = Ref.Resolve(); // Результат Ref может быть неоднозначным.
      stage 2:
        out Ref : Ref[TypedDeclarationSymbol];

        Expr1 : Expr;
        Reference : Reference;
      }
    | MemberAccess2
      {
        // TypeName : QualifiedReference;
        // TypeName.ScopeIn = ScopeIn;
        // QualifiedName : QualifiedReference;
        // QualifiedName.ScopeIn = TypeNameRef.ScopeIn;
        Type = context.GetVoidType(); // this.GetMemberAccessReturnType(QualifiedNameRef);
      stage 2:
        // out TypeNameRef : Ref[TypeSymbol] = TypeName.Ref.Resolve();
        // out QualifiedNameRef : Ref[DeclarationSymbol] = TypeName.Ref.Resolve();
      }
    | Invocation
      {
      stage 2:
        out Method : Ref[FunctionalSymbol];

        //Left.ExpectedType       = ExpectedFunctionType;
        Left.Options              = ExprOptions.Invocation;
        Left.ScopeIn              = ScopeIn;
        Left.BuildInvocationScope = BuildInvocationScope;

        Arguments.ScopeIn         = ScopeIn;
        Arguments.IndexIn         = 0;
        Arguments.Used            = true;

        Type                      = Method.Symbol.ReturnType;
        Member                    = context.InvocationResolveFunc(Left, Method, Arguments.Type, Arguments);
        Method                    = Left.Member.Resolve();
        Left.Type                 = Method.Symbol.Type;

        //unless (Left.Type.Unify(Member.Symbol.Type))
        //  Error(context, $"The $(Left.Type) not unify with $(Member.Symbol.Type)");

        Left      : Expr;
        Arguments : DotNet.Argument*;
      }
    | IndexerAccess
      {
        Left.Options              = ExprOptions.Invocation;
        Left.ScopeIn              = ScopeIn;
        Left.BuildInvocationScope = BuildInvocationScope;

        Arguments.ScopeIn         = ScopeIn;
        Arguments.IndexIn         = 0;
        Arguments.Used            = true;

        Type                      = context.CreateFreeTypeVar();

        Left      : Expr;
        Arguments : DotNet.Argument*;
      }
    | PostIncrement : NumericUnary
      {
        Operation = UnaryOp.PostIncrement();
      }
    | PostDecrement : NumericUnary
      {
        Operation = UnaryOp.PostDecrement();
      }
    | Lambda_SingleParam1
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Lambda_ExplicitParams1
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Lambda_ImplicitParams1
      {
        Type = context.GetVoidType(); // FIXME
      }
    | AnonymousFunction1
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Lambda_SingleParam2
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Lambda_ExplicitParams2
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Lambda_ImplicitParams3
      {
        Type = context.GetVoidType(); // FIXME
      }
    | AnonymousFunction2
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Await
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Query
      {
        Type = context.GetVoidType(); // FIXME
      }
    | StackallocInitializer
      {
        Type = context.GetVoidType(); // FIXME
      }
    | NewArray_1
      {
        Type = context.GetVoidType(); // FIXME
      }
    | NewArray_2
      {
        Type = context.GetVoidType(); // FIXME
      }
    | Addressof
      {
        Type = context.GetVoidType(); // FIXME
      }
    | PointerMemberAccess
      {
        Type = context.GetVoidType(); // FIXME
      }
    | NewObject_2
      {
        Type = context.GetVoidType(); // FIXME
      }
    | NewObject_3
      {
        Type = context.GetVoidType(); // FIXME
      }
    | NameofExpression
      {
        Type = context.GetVoidType(); // FIXME
      }
    | NullConditional1
      {
        Type = context.GetVoidType(); // FIXME
      }
    | NullConditional2
      {
        Type = context.GetVoidType(); // FIXME
      }
    | AnonymousTypeInstantiation
      {
        Type = context.GetVoidType(); // FIXME
      }
  }

  abstract ast Argument : Expr
  {
    inout Index : int;
    IndexOut = IndexIn + 1;
    // Name : Reference?;
    // Modifier : ArgumentModifier?;
  }

  abstract ast OptionalName
  {
    | Some { Name : Reference; }
    | None { }
  }

  abstract ast ExprArgument : Argument
  {
    ParameterNameOpt : OptionalName;

    Expr.ScopeIn              = ScopeIn;
    Expr.BuildInvocationScope = BuildInvocationScope;
    Expr.Used                 = true;
    //ExpectedType            = ???;
    Type                      = Expr.Type;
  stage 2:
    out ArgumentType : TypeSymbol = Type;

    Expr : Expr;
  }

  abstract ast OutVarArgumentBase : Argument
  {
  }

  declaration OutVarArgument : OutVarArgumentBase
  {
    VariableType : QualifiedReference;

    // TODO: нужно создать новый скоп содерожащий таблицу в которой будте определяться переменая.
    // Если вызов функции производится из if, то скопом будут выражения идущие за функцией и true-веька if-а.
    // Если просто в выражении, то скопом будут выражения идущие за функцией.
    // Например: x = Foo() && Bar(out var outVar) && outVar.
    // Таким образом скопы нужнло протаскивать хитрым образом. Они должны идти для выражений
    VariableType.Scope = ScopeOut;
    Type = ExpectedType; // TODO: Временное решение. Нужно производить унификацию с VariableType.
  }

  //ast LambdaExpr
  //{
  //  in TypeScope    : Scope;
  //  in ExpectedType : TypeSymbol;
  //
  //  //Parameter.ContainingTable = ???; // TODO: Make separate TableScope for parameters.
  //  Parameter.TypeScope             = TypeScope;
  //  Expression.ExpectedType         = ExpectedType;
  //  Expression.ScopeIn              = TypeScope;
  //  Expression.BuildInvocationScope = BuildInvocationScope;
  //  //stage 2:
  //  //out AstValue : BuildResult = this.BuildAstValue(Expression, Expression.Type, Parameter.Symbol.Name, Parameter.Symbol.Type, context);
  //
  //  // TODO: Convert to declaration
  //  Parameter : LambdaParameter;
  //  Expression : Expr;
  //}

  declaration LambdaParameter : TypedDeclaration
  {
    symbol
    {
      Kind      = "lambda parameter";
      SpanClass = DotNetLang.ParameterSpanClass;
      Scope     = Type.Scope;
    }

    Type : LambdaParameterType?;

    Type.TypeScope = TypeScope;
    Symbol.Type = this.ResolveLambdaParameterType(Type.TypeNameRef, context);
    in TypeScope : Scope;
  }

  ast LambdaParameterType
  {
    TypeName : QualifiedReference;

    TypeName.Scope = TypeScope;
    in TypeScope : Scope;
  stage 2:
    out TypeNameRef : Ref[TypeSymbol] = TypeName.Ref.Resolve();
  }

  abstract ast ArgumentModifier
  {
    | None
    | Ref
    | Out
  }
  abstract ast Unary : Expr
  {
    out Operation : UnaryOp;

    Expr1.ScopeIn              = ScopeIn;
    Expr1.BuildInvocationScope = BuildInvocationScope;
    Expr1.Used                 = true;
    Type                       = Expr1.Type;

    Expr1 : Expr;
  }
  abstract ast NumericUnary : Unary
  {
    //unless (Expr1.Type == context.GetInt32Type() ||
    //        Expr1.Type == context.GetDoubleType())
    //  Expr1.Error(context, $"Expected int or float, but found $(self.Expr1.Type)");
  }
  abstract ast BoolUnary : Unary
  {
    Expr1.ExpectedType = context.GetBooleanType();
  }
  abstract ast BinaryExpr : Expr
  {
    out Operation : BinaryOp;

    Expr1.ScopeIn              = ScopeIn;
    Expr1.BuildInvocationScope = BuildInvocationScope;
    Expr2.ScopeIn              = ScopeIn;
    Expr2.BuildInvocationScope = BuildInvocationScope;
    Expr1.Used                 = true;
    Expr2.Used                 = true;

    Expr1 : Expr;
    Expr2 : Expr;
  }
  abstract ast SameTypesExpr : BinaryExpr { }
  abstract ast OrAndExpr : SameTypesExpr
  {
    Expr1.ExpectedType = context.GetBooleanType();
    Expr2.ExpectedType = Expr1.ExpectedType;
    Type = context.GetBooleanType();
  }
  abstract ast EqualExpr : SameTypesExpr
  {
    Type = context.GetBooleanType();
  }
  abstract ast NumericBinary : SameTypesExpr { }
  abstract ast Comparison : NumericBinary
  {
    Type = context.GetBooleanType();
  }
  abstract ast Arithmetic : NumericBinary
  {
    Type = this.GetArithmeticType(Expr1.Type, Expr2.Type, context);
  }
}
