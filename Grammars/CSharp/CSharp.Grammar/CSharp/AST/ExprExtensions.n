using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

using Nitra;
using Nitra.Declarations;
using DotNet;

namespace DotNet
{
  public module AstExprExtensions
  {
    public static NoLocation : Location       = Location(SourceSnapshot.Default.File, NSpan(0));
    public static NoFile : ProjectSystem.File = SourceSnapshot.Default.File;
    public static NoSpan : NSpan              = NSpan(0);

    public GetArithmeticType(this host : Expr, e1Type : TypeSymbol, e2Type : TypeSymbol, context : DependentPropertyEvalContext) : TypeSymbol
    {
      // TODO: Переделать на типах.
      match (host, e1Type.FullName, e2Type.FullName) {
        | (Expr.Sum, "System.String", _) => e1Type
        | (Expr.Sum, _, "System.String") => e2Type
        | (Expr.Sum, "System.Char", "System.Char") => context.GetStringType()
        | (Expr.Sum, _, "System.Char") when e1Type.IsNumeric(context) => e1Type
        | (Expr.Sum, "System.Char", _) when e2Type.IsNumeric(context) => e2Type
        | (_, "System.Double", _) => context.GetDoubleType()
        | (_, _, "System.Double") => context.GetDoubleType()
        | (_, "System.Float", _) => e1Type
        | (_, _, "System.Float") => e2Type
        | (_, "System.Int64", _) => e1Type
        | (_, _, "System.Int64") => e2Type
        | (_, _, _) when e1Type.IsNumeric(context) && e2Type.IsNumeric(context) => e1Type
        | _ => e1Type
      }
    }

    public IsBinaryOpCompatible(this expr : BinaryExpr, left : TypeSymbol, right : TypeSymbol, context : DependentPropertyEvalContext) : bool
    {
      if (left.IsNumeric(context) && right.IsNumeric(context)) true
      else if (left.IsNumeric(context) && !right.IsNumeric(context)) false
      else if ((left.FullName == "System.String" || right.FullName == "System.String") && expr is Expr.Sum) true
      else true
    }

    public FindSuitableConstructor(this ctor : Expr, type : DeclarationSymbol, argumentTypes : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : Ref[Member.ConstructorSymbol]
    {
      match (type)
      {
        | type is TypeSymbol =>
          def bind(ctor : Member.ConstructorSymbol) : bool
          {
            DoArgumentsMatchParameters(ctor.ParameterScope, argumentTypes, context)
          }
          def res = type.Scope.Bind(bind);
          Ref.CreateBind(ctor.Location, res)

        | _ => Ref.CreateBind(ctor.Location, ".ctor", BindResult.Nil())
      }
    }

    private DoArgumentsMatchParameters(parameterScope : TableScope, argumentTypes : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : bool
    {
      def parms = parameterScope.Symbols
                                .SelectMany(s => s)
                                .OfType.[FormalParameterSymbol]()
                                .OrderBy(p => p.Index)
                                .ToList();

      when (parms.Count != argumentTypes.Length)
        return false;

      def zipped = parms.Zip(argumentTypes, (parm, argType) => (parm, argType));

      foreach ((parm, argType) in zipped)
        when(!argType.IsSubtypeOf(parm.Type) && !argType.HasImplicitConversion(parm.Type, context))
          return false;

      true
    }

    public GetOverloadResolutionAlgorithm[TSymbol, TConcreteSymbol](this _methodCall : Expr, argumentTypes : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : ResolutionAlgorithm[TSymbol, TConcreteSymbol]
      where TSymbol         : DeclarationSymbol
      where TConcreteSymbol : DeclarationSymbol
    {
      fun (symbol : TSymbol) : ValueOption[TConcreteSymbol] {
        | x is Member.MethodSymbol when DoArgumentsMatchParameters(x.ParameterScope, argumentTypes, context) =>
          VSome(symbol :> TConcreteSymbol);
        | _ =>
          VNone()
      }
    }

    enum Convertion
    {
        | NotWorse = -4
        | Worse    = -3
        | Best     = -2
        | No       = -1
        | Rang1    = 0
        | Rang2
        | Rang3
        | Rang4
        | Rang5
        | Rang6
        | Rang7
        | Rang8
        | Rang9
        | Rang10
        | Rang11
        | Rang12
        | Rang13
        | Rang14
        | Rang15
        | Rang16
        | Rang17
        | Rang18
        | Rang19
        | Rang20
    }

    Add(convertion : Convertion) : Convertion
    {
      ((convertion :> int) + 1) :> Convertion;
    }

    Inc(convertion : ref Convertion) : void
    {
      convertion = Add(convertion);
    }

    Sub(convertion : Convertion) : Convertion
    {
      ((convertion :> int) - 1) :> Convertion;
    }

    public TryGetReturnType(this context : DependentPropertyEvalContext, memberType : DeclarationSymbol) : TypeSymbol
    {
      match (memberType)
      {
        | method is FunctionalSymbol => method.ReturnType
        | _ => context.CreateFreeTypeVar()
      }
    }

    public InvocationResolveFunc(this context : DependentPropertyEvalContext, funcExpr : Expr, funcRef : Ref[FunctionalSymbol], argumentTypes : ImmutableArray[TypeSymbol], args : Argument.IAstList) : Ref[DeclarationSymbol]
    {
      if (funcRef == null)
        Ref.CreateUnresolved(funcExpr.Location)
      else if (funcRef.IsUnresolved)
        funcRef.Resolve()
      else if (funcRef.IsAmbiguous)
      {
        mutable bestFunc;
        mutable prevFunc;
        mutable prevParam;
        mutable funcIndex;

        // 6.1.1 Identity conversion
        def hasIdentityConversion(type1 : TypeSymbol, type2 : TypeSymbol) : bool
        {
          // An identity conversion converts from any type to the same type. This conversion exists such that an entity
          // that already has a required type can be said to be convertible to that type.
          // Because object and dynamic are considered equivalent there is an identity conversion between object and dynamic,
          // and between constructed types that are the same when replacing all occurences of dynamic with object.

          // TODO: Add object and dynamic unification

          type1.TryUnify(type2)
        }
        // 6.1 Implicit conversions
        def hasImplicitConversions(type1 : TypeSymbol, type2 : TypeSymbol) : bool
        {
          type1.IsSubtypeOf(type2) || type1.HasImplicitConversion(type2, context)
        }
        // 7.5.3.5 Better conversion target
        def isBetterConversionTarget(type1 : TypeSymbol, type2 : TypeSymbol) : bool
        {
          // Given two different types T¹ and T², T¹ is a better conversion target than T² if at least one of the
          // following holds:
          // •	An implicit conversion from T¹ to T² exists, and no implicit conversion from T² to T¹ exists
          // •	T¹ is a signed integral type and T² is an unsigned integral type. Specifically:
          //    *	T¹ is sbyte and T² is byte, ushort, uint, or ulong
          //    *	T¹ is short and T² is ushort, uint, or ulong
          //    *	T¹ is int and T² is uint, or ulong
          //    *	T¹ is long and T² is ulong

          // TODO: поддержать неявные приведения типов

          hasImplicitConversions(type1, type2) && !hasImplicitConversions(type2, type1)
        }

        def argumentsCount = argumentTypes.Length;
        def isApplicableFunction(sym : FunctionalSymbol) : bool
        {
            unless (sym.IsParametersEvaluated && sym.Parameters.Length >= argumentsCount)
              return false;

            for (mutable ai = 0; ai < argumentsCount; ai++) // ai - argument index
            {
              def argumentType = argumentTypes[ai];
              when (!hasImplicitConversions(argumentType, sym.Parameters[ai].Type))
                return false;
            }

            when (sym.IsParametersEvaluated && sym.Parameters.Length != argumentsCount) // TODO: Сделать поддержку опциональных параметров
              return false;

            true;
        }

        def candidats = funcRef.Symbols.FilterToArray(isApplicableFunction);

        // 1. Для одного кандидата возвращать результат без обработки.
        // 2. Для пустого списка параметров decisionTable не формировать.

        // 7.5.3.2 Better function member
        def typeTable      = array(candidats.Length, argumentsCount);
        def decisionTable  = array(candidats.Length, argumentsCount);
        def candidatsCount = candidats.Length;
        // 7.5.3.3 Better conversion from expression. 0 - no one is better; 1 - first is better; 2 - second is better.
        def betterConversionFromExpression(argType : TypeSymbol, param : Argument, param1Type : TypeSymbol, param2Type : TypeSymbol) : int
        {
          // Given an implicit conversion C¹ that converts from an expression E to a type T¹, and an implicit
          // conversion C² that converts from an expression E to a type T², C¹ is a better conversion than C²
          // if at least one of the following holds:
          // • E has a type S and an identity conversion exists from S to T¹ but not from S to T²
          // • E is not an anonymous function and T¹ is a better conversion target than T² (§7.5.3.5)
          // • E is an anonymous function, T¹ is either a delegate type D¹ or an expression tree type Expression<D¹>, T²
          //   is either a delegate type D² or an expression tree type Expression<D²> and one of the following holds:
          //      * D¹ is a better conversion target than D²
          //      * D¹ and D² have identical parameter lists, and one of the following holds:
          //         • D¹ has a return type Y¹, and D² has a return type Y², an inferred return type X exists for E in
          //           the context of that parameter list (§7.5.2.12), and the conversion from X to Y¹ is better than
          //           the conversion from X to Y²
          //         • E is async, D¹ has a return type Task<Y¹>, and D² has a return type Task<Y²>, an inferred return type
          //           Task<X> exists for E in the context of that parameter list (§7.5.2.12), and the conversion from X to Y¹
          //           is better than the conversion from X to Y²
          //         • D¹ has a return type Y, and D² is void returning
          if (hasIdentityConversion(argType, param1Type))
          {
            when (hasIdentityConversion(argType, param2Type))
              return 0;

            return 1;
          }
          else when (hasIdentityConversion(argType, param2Type))
              return 2;

          //isBetterConversionTarget(param1Type, param2Type)
          // 7.5.3.5 Лучшая цель преобразования
          if (hasImplicitConversions(param1Type, param2Type))
          {
            when (hasImplicitConversions(param2Type, param1Type))
              return 0;

            return 1;
          }
          else when (hasImplicitConversions(param2Type, param1Type))
              return 2;
          0
        }

        for (mutable ai = 0; ai < argumentsCount; ai++) // Перебераем параметры. Их должно быть одинаковое число.
        {
          foreach (func in candidats with ci)
            typeTable[ci, ai] = func.Parameters[ai].Type; // TODO: параметры могут быть именованными. Добавить поддержку этого.
        }

        def findBetterFunction(candidats : array[FunctionalSymbol], argumentTypes : ImmutableArray[TypeSymbol], args : Argument.IAstList, argumentsCount : int, candidatsCount : int, typeTable : array.[2][TypeSymbol], decisionTable : array.[2][Convertion])
        {
          // Размечаем decisionTable целыми значениями. Чем больше значение, тем лучше преобразование.
          for (mutable ai = 0; ai < argumentsCount; ai++) // ai - argument index
          {
            mutable prevParamIndex = -1;
            mutable prevParamType;
            def argumentType = argumentTypes[ai];

            for (mutable ci = 0; ci < candidatsCount; ci++) // ci - candidat index
            {
              def paramType = typeTable[ci, ai];

              if (prevParamIndex < 0)
              {
                  prevParamIndex = ai;
                  prevParamType  = paramType;
                  decisionTable[ci, ai] = Convertion.Rang1;
              }
              else
              {
                def res = betterConversionFromExpression(argumentType, args[ai], paramType, prevParamType);
                match (res)
                {
                  | 1 =>
                    //decisionTable[ci, prevParamIndex] = Convertion.Worse;
                    decisionTable[ci, ai] = Add(decisionTable[ci, prevParamIndex]);
                    prevParamIndex = ai;
                    prevParamType  = paramType;

                  | 2 =>
                    decisionTable[ci, ai] = Sub(decisionTable[ci, prevParamIndex]);

                  | _ => // 0 - равны
                    decisionTable[ci, ai] = decisionTable[ci, prevParamIndex];
                }
              }
            }
          }
        }

        findBetterFunction(candidats, argumentTypes, args, argumentsCount, candidatsCount, typeTable, decisionTable);

        def supplementedTo(str : string, len : int) : string
        {
            if (str.Length > len)
              str
            else
              str + string(' ', len - str.Length)
        }

        def bestFunctionChoice(candidats : array[FunctionalSymbol], decisionTable : array.[2][Convertion]) : Ref[_]
        {
          // Находим максимальное значение преобразование (значение лучшего преобразования).
          // Определяем: а) есть ли другие такие же значения для параметра;
          //             б) есть ли значения меньшие чем максимальное (блее худшие).
          // Если лучшее значение одно, заменяем его на Best, а остальные на Worse.
          // Если лучшее значение не одно, заменяем его на NotWorse, а остальные на Worse.

          for (mutable ai = 0; ai < argumentsCount; ai++) // ai - argument index
          {
            mutable max = int.MinValue;
            mutable maxCount = 0;
            foreach (candidat when candidat != null in candidats with ci) // ci - candidat index
            {
                def rang = decisionTable[ci, ai] :> int;
                if (rang > max)
                {
                  max      = rang;
                  maxCount = 0;
                }
                else when (rang == max)
                  maxCount++;
            }

            foreach (candidat when candidat != null in candidats with ci) // ci - candidat index
              if (decisionTable[ci, ai] :> int == max)
                decisionTable[ci, ai] = if (maxCount == 1) Convertion.Best else Convertion.NotWorse;
              else
                decisionTable[ci, ai] = Convertion.Worse;

            foreach (candidat when candidat != null in candidats with ci) // ci - candidat index
            {
              if (decisionTable[ci, ai] == Convertion.Worse)
                candidats[ci] = null;
              else
              {
              //  def paramToStr(p : FormalParameterSymbol) : string { p.Type + " " + p.Name + " (" + decisionTable[ci, ai] + ")" }
              //  Debug.WriteLine($<#$(candidat.Name)(..$(candidat.Parameters; ", "; paramToStr))#>);
              }
            }
          }

          def res = LightList();
          foreach (candidat when candidat != null in candidats)
            res.Add(candidat);

          // TODO: Реализовать эвристики из стандарта

          match (res.Count)
          {
            | 0 => funcRef.CreateRevole(BindResult.Nil())
            | 1 => funcRef.CreateRevole(BindResult.Single(res[0]))
            | _ => funcRef.CreateRevole(BindResult.Multiple(res.ToImmutableArray()))
          }
        }

        bestFunctionChoice(candidats, decisionTable)
      }
      else
        funcRef.Resolve()
    }

    //private ExprInvocation(leftAst : InitAst, method : Member.MethodSymbol, arguments : array[InitAst]) : InitAst
    //{
    //  match (leftAst) {
    //    | ti is InitAst.TypeInfo => InitAst.StaticCall(ti, method.Name, arguments)
    //    | _ => InitAst.Call(leftAst, method.Name, arguments)
    //  }
    //}

    //private ExprMemberAccess(host : Expr, leftAst : InitAst, member : DeclarationSymbol, _context : DependentPropertyEvalContext) : InitAst
    //{
    //  match (member) {
    //    | x is Member.PropertySymbol when leftAst is InitAst.TypeInfo => InitAst.StaticProperty(leftAst :> InitAst.TypeInfo, x.Name)
    //    | x is Member.PropertySymbol when x.IsStatic() =>
    //      throw ExprException("Instance can't be used to access static property", host);

    //    | x is Member.PropertySymbol => InitAst.Property(leftAst, x.Name)
    //    | x is Member.FieldSymbol when leftAst is InitAst.TypeInfo => InitAst.StaticField(leftAst :> InitAst.TypeInfo, x.Name)
    //    | x is Member.FieldSymbol when x.IsStatic() =>
    //      throw ExprException("Instance can't be used to access static field", host);

    //    | x is Member.FieldSymbol => InitAst.Field(leftAst, x.Name)

    //    | _ is Member.MethodSymbol when leftAst is InitAst.TypeInfo => leftAst
    //    | x is Member.MethodSymbol when x.IsStatic() =>
    //      throw ExprException("Instance can't be used to access static method", host);

    //    | _ is Member.MethodSymbol => leftAst
    //    | x is EnumMemberSymbol =>
    //      InitAst.PrimitiveValue(x.DeclaredIn.AsTypeInfo(), x.FullName, false)

    //    | _ => throw ExprException("This member type is not supported as member access in expression", host)
    //  }
    //}

    //private ExprQualifiedName(host : Expr, key : QualifiedReference, symbol : DeclarationSymbol, context : DependentPropertyEvalContext) : InitAst
    //{
    //  match (key) {
    //    | QualifiedReference.Simple =>
    //      match (symbol) {
    //        | x is LambdaParameterSymbol => InitAst.Parameter(x.Name, x.Type.FullName)
    //        | x is TypeSymbol => x.AsTypeInfo()
    //        | _ => throw ExprException("Invalid qualified name expression", host)
    //      }

    //    | qualified is QualifiedReference.Qualified =>
    //      match (symbol) {
    //        | prop is Member.PropertySymbol when prop.IsStatic() =>
    //          InitAst.StaticProperty(prop.DeclaredIn.AsTypeInfo(), prop.Name)
    //        | _ =>
    //          def left = ExprQualifiedName(host, qualified.Qualifier, qualified.Qualifier.Ref.Symbol, context);
    //          ExprMemberAccess(host, left, symbol, context)
    //      }

    //    | _ => throw ExprException("Unknown reference: " + key, host)
    //  }
    //}

    public ResolveLambdaParameterType(this _parm : LambdaParameter, typeRef : ValueOption[Ref[TypeSymbol]], context : DependentPropertyEvalContext) : TypeSymbol
    {
      if (typeRef.HasValue && typeRef.Value.IsSymbolEvaluated) {
        match (typeRef.Value.Symbol) {
          | alias is TypeAliasSymbol => alias.Replacement.Symbol :> TypeSymbol
          | x => x
        }
      } else {
        context.GetObjectType();
      }
    }
    /*
    public ArrayRefGetType(this expr : Expr, leftType : TypeSymbol, indexType : TypeSymbol, context : DependentPropertyEvalContext) : TypeSymbol
    {
      match (leftType.FirstDeclarationOrDefault) {
        | atd is IExternalTopTypeDeclaration =>
          def systemType = atd.Type;

          if (systemType.IsArray) {
            def elementType = systemType.GetElementType();
            mutable elementTypeSymbol;

            if (elementType != null && context.TypeMap.TryGetValue(elementType.FullName, out elementTypeSymbol))
              elementTypeSymbol;
            else
              context.GetObjectType()
          } else {
            def parmTypeMatches(prop) {
              def indexerParms = prop.GetIndexParameters();
              mutable parmTypeSymbol;
              if (indexerParms.Length == 1 && context.TypeMap.TryGetValue(indexerParms[0].ParameterType.FullName, out parmTypeSymbol)) {
                indexType.IsDescendant(parmTypeSymbol)
              } else {
                false
              }
            }

            def indexer = systemType.GetProperties()
                                    .FirstOrDefault(p => parmTypeMatches(p));

            mutable indexerTypeSymbol;
            if (indexer != null && context.TypeMap.TryGetValue(indexer.PropertyType.FullName, out indexerTypeSymbol))
              indexerTypeSymbol
            else {
              expr.Error(context, "Indexer of type " + indexType.GetFullName() + " is not compatible with " + leftType.GetFullName());
              context.GetObjectType()
            }
          }
        | _ => {
          expr.Error(context, "Indexer of type " + indexType.GetFullName() + " is not compatible with " + leftType.GetFullName());
          context.GetObjectType();
        }
      }
    }*/

    //private BinaryOp(host : BinaryExpr, op : BinaryOp, leftExprType : TypeSymbol, leftAst : InitAst, rightExprType : TypeSymbol, rightAst : InitAst, context : DependentPropertyEvalContext) : InitAst
    //{
    //  def context = context.ToAmmyContext();
    //  def types = context.Types;

    //  match (host) {
    //    | Expr.Sum when leftExprType.IsDescendant(types.String)
    //    | Expr.Sum when rightExprType.IsDescendant(types.String) =>

    //    if (leftExprType.IsDescendant(types.String) && rightExprType.IsDescendant(types.String))
    //      InitAst.Binary(op, leftAst, rightAst)
    //    else
    //      InitAst.StaticCall(types.String.AsTypeInfo(), "Concat", array[leftAst, rightAst])

    //    | EqualExpr when leftExprType.IsNumeric(contect) && rightExprType.IsNumeric()
    //    | NumericBinary =>
    //      mutable resultType;
    //      def (l, r) = BinaryNumericPromotion(op, leftExprType, leftAst, rightExprType, rightAst, context, out resultType);

    //      when (!host.IsTypeEvaluated)
    //        host.Type = resultType;

    //      InitAst.Binary(op, l, r)

    //    | EqualExpr =>
    //      InitAst.Binary(op, leftAst, rightAst)

    //    | OrAndExpr =>
    //      when (!leftExprType.IsDescendant(context.Types.Boolean))
    //        host.Expr1.Error(context, "Expected boolean expression, got " + leftExprType.GetFullName());

    //      when (!rightExprType.IsDescendant(context.Types.Boolean))
    //        host.Expr2.Error(context, "Expected boolean expression, got " + rightExprType.GetFullName());

    //      InitAst.Binary(op, leftAst, rightAst)

    //    | _ =>
    //      throw Exception("Invalid binary expression: " + host)
    //  }
    //}

    //private BinaryNumericPromotion(_op : BinaryOp, leftExprType : TypeSymbol, leftExprAst : InitAst, rightExprType : TypeSymbol, rightExprAst : InitAst, context : DependentPropertyEvalContext, resultType : out TypeSymbol) : (InitAst*InitAst)
    //{
    //  def context = context.ToAmmyContext();

    //  match (leftExprType.GetFullName(), rightExprType.GetFullName()) {
    //    | (l, r) when l == r    =>
    //      resultType = leftExprType;
    //      (leftExprAst, rightExprAst)

    //    | ("System.Decimal", _) =>
    //      resultType = leftExprType;
    //      (leftExprAst, InitAst.Cast(InitAst.TypeInfo("System.Decimal"), rightExprAst))
    //    | (_, "System.Decimal") =>
    //      resultType = rightExprType;
    //      (InitAst.Cast(InitAst.TypeInfo("System.Decimal"), leftExprAst), rightExprAst)

    //    | ("System.Double", _) =>
    //      resultType = leftExprType;
    //      (leftExprAst, InitAst.Cast(InitAst.TypeInfo("System.Double"), rightExprAst))

    //    | (_, "System.Double") =>
    //      resultType = rightExprType;
    //      (InitAst.Cast(InitAst.TypeInfo("System.Double"), leftExprAst), rightExprAst)

    //    | ("System.Single", _) =>
    //      resultType = leftExprType;
    //      (leftExprAst, InitAst.Cast(InitAst.TypeInfo("System.Single"), rightExprAst))

    //    | (_, "System.Single") =>
    //      resultType = rightExprType;
    //      (InitAst.Cast(InitAst.TypeInfo("System.Single"), leftExprAst), rightExprAst)

    //    | ("System.System.UInt64", r) =>
    //        if (r != "System.SByte" && r != "System.Int16" && r != "System.Int32" && r != "System.Int64") {
    //          resultType = leftExprType;
    //          (leftExprAst, InitAst.Cast(InitAst.TypeInfo("System.UInt64"), rightExprAst))
    //        } else
    //           throw Exception($"Operand types $(leftExprType.GetFullName()) and $(rightExprType.GetFullName()) are incompatible")

    //    | (l, "System.System.UInt64") =>
    //        if (l != "System.SByte" && l != "System.Int16" && l != "System.Int32" && l != "System.Int64") {
    //          resultType = rightExprType;
    //          (InitAst.Cast(InitAst.TypeInfo("System.UInt64"), leftExprAst), rightExprAst)
    //        } else
    //          throw Exception($"Operand types $(leftExprType.GetFullName()) and $(rightExprType.GetFullName()) are incompatible")


    //    | ("System.Int64", _) =>
    //      resultType = leftExprType;
    //      (leftExprAst, InitAst.Cast(InitAst.TypeInfo("System.Int64"), rightExprAst))

    //    | (_, "System.Int64") =>
    //      resultType = rightExprType;
    //      (InitAst.Cast(InitAst.TypeInfo("System.Int64"), leftExprAst), rightExprAst)

    //    | ("System.UInt32", o) when o == "System.SByte" || o == "System.Int16" || o == "System.Int32"
    //    | (o, "System.UInt32") when o == "System.SByte" || o == "System.Int16" || o == "System.Int32" =>
    //      resultType = context.Types.Int64;
    //      (InitAst.Cast(InitAst.TypeInfo("System.Int64"), leftExprAst), InitAst.Cast(InitAst.TypeInfo("System.Int64"), rightExprAst))

    //    | ("System.UInt32", _) =>
    //      resultType = leftExprType;
    //      (leftExprAst, InitAst.Cast(InitAst.TypeInfo("System.UInt32"), rightExprAst))

    //    | (_, "System.UInt32") =>
    //      resultType = rightExprType;
    //      (InitAst.Cast(InitAst.TypeInfo("System.UInt32"), leftExprAst), rightExprAst)

    //    | ("System.Int32", _) =>
    //      resultType = leftExprType;
    //      (leftExprAst, InitAst.Cast(InitAst.TypeInfo("System.Int32"), rightExprAst))

    //    | (_, "System.Int32") =>
    //      resultType = rightExprType;
    //      (InitAst.Cast(InitAst.TypeInfo("System.Int32"), leftExprAst), rightExprAst)
    //    | _ =>
    //      resultType = leftExprType;
    //      (leftExprAst, rightExprAst);
    //  }
    //}

    //private UnaryNumericPromotion(op : UnaryOp, exprType : TypeSymbol, exprAst : InitAst, context : DependentPropertyEvalContext) : InitAst
    //{
    //  def context = context.ToAmmyContext();

    //  match (exprType.GetFullName()) {
    //    | "System.Byte" | "System.SByte" | "System.Int16" | "System.UInt16" | "System.Char" =>
    //      InitAst.Cast(context.Types.Int32.AsTypeInfo(), exprAst)
    //    | "System.UInt32" when op is UnaryOp.Minus =>
    //      InitAst.Cast(context.Types.Int64.AsTypeInfo(), exprAst)
    //    | _ =>
    //      exprAst
    //  }
    //}

    //public BuildAstValue(this host : LambdaExpr, expr : Expr, _exprType : TypeSymbol, parmName : string, parmType : TypeSymbol, context : DependentPropertyEvalContext) : BuildResult
    //{
    //  try {
    //    def body = BuildAstValueImpl(expr, context.ToAmmyContext());
    //    BuildResult.Result(InitAst.Lambda(body, array[InitAst.Parameter(parmName, parmType.FullName)], false))
    //  } catch {
    //   | e => {
    //      host.Error(context, e.Message);
    //     BuildResult.Ignore();
    //   }
    //  }
    //}

    //private BuildAstValueImpl(expr : Expr, context : AmmyDependentPropertyEvalContext) : InitAst
    //{
    //  def types = context.Types;
    //  def build = BuildAstValueImpl(_, context);

    //  match (expr) {
    //    | x is Expr.IntegerLiteral when x.Value.HasValue => InitAst.PrimitiveValue(types.Int32.AsTypeInfo(), x.Value.Value.ToString(), false);
    //    | x is Expr.FloatLiteral when x.Value.HasValue => InitAst.PrimitiveValue(types.Double.AsTypeInfo(), x.Value.Value.ToString(CultureInfo.InvariantCulture), false);
    //    | x is Expr.String when x.Value.HasValue => InitAst.PrimitiveValue(types.String.AsTypeInfo(), x.Value.Value.ToString(), false);
    //    | x is Expr.Char when x.Value.HasValue   => InitAst.PrimitiveValue(types.Char.AsTypeInfo(), x.Value.Value.ToString(), false);
    //    | _ is Expr.FalseLiteral => InitAst.PrimitiveValue(types.Boolean.AsTypeInfo(), "false", false);
    //    | _ is Expr.TrueLiteral => InitAst.PrimitiveValue(types.Boolean.AsTypeInfo(), "true", false);
    //    | _ is Expr.NullLiteral => InitAst.Null(types.Object.AsTypeInfo());
    //    | x is Expr.QualifiedName =>
    //      if (x.Ref.IsSymbolEvaluated)
    //        ExprQualifiedName(x, x.Key, x.Ref.Symbol, context);
    //      else if (x.Ref.IsResolvedToEvaluated && x.Ref.ResolvedTo.IsSymbolEvaluated)
    //        ExprQualifiedName(x, x.Key, x.Ref.ResolvedTo.Symbol, context);
    //      else
    //        InitAst.Seq([])

    //    | x is Expr.MemberAccess =>
    //      if (x.Ref.IsSymbolEvaluated)
    //        ExprMemberAccess(x, build(x.Expr), x.Ref.Symbol, context)
    //      else if (x.Ref.IsResolvedToEvaluated && x.Ref.ResolvedTo.IsSymbolEvaluated)
    //        ExprMemberAccess(x, build(x.Expr), x.Ref.ResolvedTo.Symbol, context)
    //      else
    //        InitAst.Seq([])

    //    | x is Expr.ArrayRef => InitAst.ArrayAccess(build(x.Left), build(x.Index))
    //    | x is Expr.Constructor => InitAst.New(x.Type.AsTypeInfo(), x.Arguments.Select(a => build(a)).ToArray())
    //    | x is Expr.Invocation => ExprInvocation(build(x.Left), x.Method.Symbol, x.Arguments.Select(a => build(a)).ToArray())
    //    | x is Expr.Argument => build(x.Expr);
    //    | x is Expr.Ternary => InitAst.Ternary(build(x.Condition), build(x.Left), build(x.Right))
    //    | x is Expr.Cast => InitAst.Cast(x.Type.AsTypeInfo(), build(x.Right))
    //    | x is BinaryExpr => BinaryOp(x, x.Operation, x.Expr1.Type, build(x.Expr1), x.Expr2.Type, build(x.Expr2), context)
    //    | x is Unary => InitAst.Unary(x.Operation, UnaryNumericPromotion(x.Operation, x.Expr1.Type, build(x.Expr1), context))
    //    | _ => InitAst.Seq([]); // Error should already be registered
    //  }
    //}

    //class ExprException : Exception
    //{
    //  public Expr : Expr { get; set; }

    //  public this(message : string, expr : Expr) {
    //    base(message);
    //    Expr = expr;
    //  }
    //}
  }

  public variant BinaryOp {
    | Or
    | And
    | Equal
    | NotEqual
    | LessEqual
    | Less
    | GreaterEqual
    | Greater
    | Sum
    | Sub
    | Mod
    | Mul
    | Div
  }

  public variant UnaryOp {
    | Identity
    | Negation
    | LogicalNegation
    | BitwiseNegation
    | PreIncrement
    | PreDecrement
    | PostIncrement
    | PostDecrement
  }
}
