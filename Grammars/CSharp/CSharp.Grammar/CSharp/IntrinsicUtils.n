using Nitra;
using Nitra.ProjectSystem;
using Nitra.Declarations;
using Nitra.Runtime.Binding;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp
{
  internal module IntrinsicUtils
  {
    public CreateOpenTypeArgument(file : File, span : NSpan) : QualifiedReference
    {
      QualifiedReference.Simple(File = file, Span = span, Name = Reference(file, span, "#"))
    }

    public CreateMissingQualifiedReference(file : File, span : NSpan) : QualifiedReference
    {
      QualifiedReference.Simple(
        File = file,
        Span = span,
        Name = Reference.AmbiguousOrMissing(file, span))
    }

    public CreateQualifiedReference(file : File, span : NSpan, params parts : array[string]) : QualifiedReference
    {
      assert(parts.Length > 0);

      mutable acc : QualifiedReference = QualifiedReference.Simple(
        File = file,
        Span = span,
        Name = Reference(file, span, parts[0]));

      for(mutable i = 1; i < parts.Length; ++i)
        acc = QualifiedReference.Qualified(
          File      = file,
          Span      = span,
          Qualifier = acc,
          Name      = Reference(file, span, parts[i]));

      acc
    }

    public CreatePredefinedTypeReference(file : File, span : NSpan, text : string) : QualifiedReference
    {
      match (text)
      {
        | "void"    => CreateQualifiedReference(file, span, "System", "Void")
        | "object"  => CreateQualifiedReference(file, span, "System", "Object")
        | "bool"    => CreateQualifiedReference(file, span, "System", "Bool")
        | "string"  => CreateQualifiedReference(file, span, "System", "String")
        | "char"    => CreateQualifiedReference(file, span, "System", "Char")
        | "byte"    => CreateQualifiedReference(file, span, "System", "Byte")
        | "sbyte"   => CreateQualifiedReference(file, span, "System", "SByte")
        | "short"   => CreateQualifiedReference(file, span, "System", "Int16")
        | "ushort"  => CreateQualifiedReference(file, span, "System", "UInt16")
        | "int"     => CreateQualifiedReference(file, span, "System", "Int32")
        | "uint"    => CreateQualifiedReference(file, span, "System", "UInt32")
        | "long"    => CreateQualifiedReference(file, span, "System", "Int64")
        | "ulong"   => CreateQualifiedReference(file, span, "System", "UInt64")
        | "float"   => CreateQualifiedReference(file, span, "System", "Single")
        | "double"  => CreateQualifiedReference(file, span, "System", "Double")
        | "decimal" => CreateQualifiedReference(file, span, "System", "Decimal")
        | "dynamic" => CreateQualifiedReference(file, span, "#Dynamic")
        | _         => assert(false)
      }
    }
  }
}
