namespace CSharp
{
  syntax module CS7
  {
    using CSharp.CS6;
    using CS6Expression;
    using CS6Literals;

    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Types;

    using Attributes;
    using TopDeclarations;
    using Expressions;
    using Statements;
    using Literals;
    using ObjectAndCollectionInitializers;

    alias Attributes    = AttributeSection*;
    alias QualifiedName = QualifiedIdentifier;
    alias FormalParameters = (FormalParameter; ","sm)*;

    ////////////////////////////////////////////////////////////
    // out var

    extend syntax Argument
    {
      | OutVar      = ArgumentName? Modfier="out" sm LocalVariableType sm Name;
      | OutWildcard = ArgumentName? Modfier="out" sm Wildcard="*";
    }

    // out var
    ////////////////////////////////////////////////////////////

    extend syntax SwitchLabel
    {
      | PatternMatching          = "case" sm AnyType sm Name ":";
      | PatternMatchingWithGuard = "case" sm AnyType sm Name sm "when" sm "(" Condition=Expression ")" ":";
    }

    extend syntax Expression
    {
      | Tuple = !("(" Expression ")") "(" (TupleArgument; "," sm)+ ")"
      | Ref = "ref" Expression
      | Throw = "throw" sm Expression
      | [PreferIfConflictWith(Expression.RealLiteral)] RealLiteralWithSeparator
      | BinaryLiteralWithSeparator = Lit=BinaryLiteralWithSeparator
      | DecimalIntegerLiteralWithSeparator = Lit=DecimalIntegerLiteralWithSeparator
      | HexadecimalIntegerLiteralWithSeparator = Lit=HexadecimalIntegerLiteralWithSeparator
    precedence RelationalAndTypeTesting:
      | PatternMatching = Expr1=Expression ^ RelationalAndTypeTesting sm "is" sm TypeName=AnyTypeNullableHack Name
    }

    extend syntax CastPredicate
    {
      | RealLiteralWithSeparator
      | BinaryLiteralWithSeparator
      | DecimalIntegerLiteralWithSeparator
      | HexadecimalIntegerLiteralWithSeparator
    }

    [SpanClass(Number)]
    regex RealLiteralWithSeparator = RealLiteral_1_WithSeparator | RealLiteral_2_WithSeparator | RealLiteral_3_WithSeparator;

    regex BinPrefix = "0b" | "0B";
    regex BinDigits = (['0', '1']+; "_"+)+;

    [ExplicitSpaces]
    [SpanClass(Number)]
    token BinaryLiteralWithSeparator = BinPrefix Digits=BinDigits SuffixOpt=IntegerTypeSuffixOpt;

    regex DecimalDigits = (DecimalDigit+; "_"+){2,};

    [ExplicitSpaces]
    [SpanClass(Number)]
    token DecimalIntegerLiteralWithSeparator = Digits=DecimalDigits SuffixOpt=IntegerTypeSuffixOpt;

    regex HexDigits = (HexDigit+; "_"+){2,};

    [ExplicitSpaces]
    [SpanClass(Number)]
    token HexadecimalIntegerLiteralWithSeparator = HexPrefix Digits=HexDigits SuffixOpt=IntegerTypeSuffixOpt;

    regex ExponentPartWithSeparator   = ("E" | "e") ("-" | "+")? (DecimalDigit+; "_"+)+;
    regex RealLiteral_1_WithSeparator = (DecimalDigit+; "_"+)* "." (DecimalDigit+; "_"+)+ ExponentPartWithSeparator? RealTypeSuffix?;
    regex RealLiteral_2_WithSeparator = (DecimalDigit+; "_"+)+ ExponentPartWithSeparator RealTypeSuffix?;
    regex RealLiteral_3_WithSeparator = (DecimalDigit+; "_"+)+ RealTypeSuffix;

    ////////////////////////////////////////////////////////////
    // Tuple

    extend syntax TupleDeconstructionStatement = Statement
    {
      | TupleDeconstruction = "var" TupleDeconstruction sm "=" sm VariableInitializer
      | VarDeconstruction   = "(" ("var" sm TupleDeconstructionField; "," sm){2,} ")" sm "=" sm VariableInitializer
    }

    [ExplicitSpaces]
    syntax TupleDeconstruction = "(" s (TupleDeconstructionField; s "," s sm){2,} s ")";

    [ExplicitSpaces]
    syntax TupleDeconstructionField
    {
      | Name
      | TupleDeconstruction
    }


    // [ExplicitSpaces] - inherited
    extend syntax TypeName
    {
      | Tuple = "(" s (TupleTypeField; s "," s sm)+ s ")"
    }

    [ExplicitSpaces]
    syntax TupleTypeField
    {
      | Named = AnyType s sm Name
      | Unnamed = AnyType
    }

    syntax TupleArgument
    {
      | Named   = Reference !"::" ":" sm Expression;
      | Unnamed = Expression;
    }

    // Tuple
    ////////////////////////////////////////////////////////////

    extend syntax Statement
    {
      | LocalRefVariable                 = "ref" sm LocalVariableType Name sm "=" sm VariableInitializer ";"nl
      | LocalFunction                    =          MethodHeader Body
      | LocalRefFunction                 = "ref" sm MethodHeader Body
      | LocalFunctionExpressionBodied    =          MethodHeader  sm "=>" sm Expression ";" nl
      | LocalRefFunctionExpressionBodied = "ref" sm MethodHeader  sm "=>" sm Expression ";" nl
    }

    extend syntax EmbeddedStatement
    {
      | RefReturn = "ref" sm "return" sm Expression ";" nl;
    }

    alias InterfaceType = QualifiedIdentifier;

    extend syntax TypeMemberDeclaration
    {
      | RefMethod                   = Attributes Modifiers "ref" sm MethodHeader Body;
      | RefProperty                 = Attributes Modifiers "ref" sm AnyType sm InterfaceType? Name PropertyBody;
      | RefIndexer                  = Attributes Modifiers "ref" sm AnyType sm  InterfaceType? "this" "[" FormalParameters "]" PropertyBody;
      | RefPropertyExpressionBodied = Attributes Modifiers "ref" sm AnyType sm InterfaceType? Name sm "=>" sm Expression ";" nl;
      | RefMethodExpressionBodied   = Attributes Modifiers "ref" sm MethodHeader  sm "=>" sm Expression ";" nl;
      | RefIndexerExpressionBodied  = Attributes Modifiers "ref" sm AnyType sm  InterfaceType? "this" "[" FormalParameters "]" sm "=>" sm Expression ";" nl;
      | IndexerExpressionBodied     = Attributes Modifiers          AnyType sm  InterfaceType? "this" "[" FormalParameters "]" sm "=>" sm Expression ";" nl;
      | ConstructorExpressionBodied = Attributes Modifiers Name "(" FormalParameters ")" ConstructorInitializer?  sm "=>" sm Expression ";" nl;
      | DestructorExpressionBodied  = Attributes Modifiers "~" Name "(" FormalParameters ")"  sm "=>" sm Expression ";" nl;
    }
  }
}
