 // TODO: Move the ast to DotNetLang
using DotNet;

using Nitra;
using Nitra.Declarations;

using Nemerle.Collections;

namespace DotNet
{
  ast RealLiteral : Expr
  {
    Type = if (Value.HasValue) Value.Value.GetType(context) else context.CreateFreeTypeVar();

    Value : RealLiteralValue;
  }

  ast IntegerLiteral : Expr
  {
    Type = context.GetInt32Type();

    Value : IntegerLiteralValue;
  }

  ast PatternMatching : Expr
  {
    TypeName.Scope    = ScopeOut;
    Expr1.ScopeIn     = ScopeOut;
    Type              = context.GetVoidType();
    //Expr1.BuildInvocationScope = ???;
  stage 2:
    out TypeNameRef : Ref[TypeSymbol] = TypeName.Ref.Resolve();

    Expr1 : Expr;
    TypeName : QualifiedReference;
  }

  ast RefExpr : Expr
  {
    Type = context.GetVoidType(); // TODO: Wrap the Expr1.Type in RefType()
    Expr1 : Expr;
  }

  ast ThrowExpr : Expr
  {
    Type = context.GetVoidType(); // TODO: make free type var
    Expr1 : Expr;
  }

  ast TupleExpr : Expr
  {
    Type = context.GetVoidType(); // FIXME
    Fields : TupleExprField*;
  }

  abstract ast TupleExprField
  {
  stage 2:
    out Type : TypeSymbol = Expr.Type;

    Expr : Expr;
  }

  ast NamedTupleExprField : TupleExprField
  {
    Reference : Reference;
  }

  ast UnnamedTupleExprField : TupleExprField
  {
  }

  abstract ast TupleTypeField : BindableAst
  {
  stage 1:
    out TypeRef : Ref[TypeSymbol] = Type.Ref.Resolve();

    Type.Scope = Scope;

    Type : QualifiedReference;
  }

  ast UnnamedTupleField : TupleTypeField {}

  ast NamedTupleField : TupleTypeField
  {
    Name : Nitra.Declarations.Name; // TODO: Fix binding
  }

  ast TupleType : QualifiedReference
  {
    Ref = SC7Utils.MakeTupleRef(Location, context, Fields.TypeRef, Fields);
    Fields.Scope = Scope;
    when (Fields.Count == 1)
      Error(context, "Tuple must contain at least two elements.");

    Fields : TupleTypeField*;
  }
}
