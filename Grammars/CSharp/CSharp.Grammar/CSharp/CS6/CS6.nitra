namespace CSharp
{
  syntax module CS6
  {
    using CSharp.CS5;
    using CS6Expression;
    using CS6Literals;

    using Nitra.Core;
    using CSharp.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Types;

    using Attributes;
    using TopDeclarations;
    using Expressions;
    using Statements;
    using Literals;
    using ObjectAndCollectionInitializers;

    alias Attributes    = AttributeSection*;
    alias QualifiedName = QualifiedIdentifier;

    alias InterfaceType = QualifiedIdentifier;

    extend syntax TypeMemberDeclaration
    {
      | PropertyWithInitializer  = Attributes Modifiers AnyType sm InterfaceType? Name PropertyBody sm "=" sm Initializer=Expression ";"  nl;
      | PropertyExpressionBodied = Attributes Modifiers AnyType sm InterfaceType? Name sm "=>" sm Expression ";" nl;
      | MethodExpressionBodied   = Attributes Modifiers Partial? MethodHeader  sm "=>" sm Expression ";" nl;
    }

    extend syntax NamespaceMemberDeclaration
    {
      | OpenStatic = "using"sm "static"sm QualifiedName ";" nl;
    }

    extend syntax CatchClause
    {
      | WithFilter = "catch" sm CatchSpecifier sm "when" sm "(" Candition=Expression ")" sm Block;
    }

    extend syntax MemberInitializer
    {
      | Index = "[" ArgumentList "]" sm "=" sm InitializerValue;
    }
  }
}
