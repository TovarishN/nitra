using Nemerle.Collections;
using Nitra;
using Nitra.ProjectSystem;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Console;
using System.Linq;

using System.Text;
using SCG = System.Collections.Generic;

public partial abstract class N2Parser
{
  private class UsingImportDeclarationWalker : WalkerBase[int]
  {
    public Name : StringBuilder = StringBuilder();

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : IParseResult, context : int) : void
    {
      IgnoreParams();
      when (ruleInfo.Descriptor : object == N2Parser.Identifier)
      {
        _ = Name.Append(parseResult.SourceSnapshot.Text, startPos, endPos - startPos).Append(".")
      }
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : int) : void
    {
      if (ruleInfo.RuleParser.Descriptor : object == N2Parser.QualifiedIdentifier)
      {
        _ = Name.Clear();
        WalkSimple(startPos, endPos, ruleInfo.RuleParser, parseResult, context);
        Name.Length = Name.Length - 1;
      }
      else
        WalkSimple(startPos, endPos, ruleInfo.RuleParser, parseResult, context);
    }
  }

  UsingImportDeclarationHandler(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PrefixRuleParser, parseResult : IParseResult, grammar : CompositeGrammar) : CompositeGrammar
  {
    def walker = UsingImportDeclarationWalker();
    walker.WalkPrefix(rawTreePtr, startPos, endPos, ruleParser, parseResult, 0);

    def descriptor = (parseResult :> ParseResult).TryGetDynamicSyntaxExtension(walker.Name.ToString());
    if (descriptor != null)
      grammar.Add(descriptor);
    else
      grammar
  }
}


module Program
{
  LoadDynamicExtentionGrammars() : Seq[GrammarDescriptor]
  {
    def dynamicExtentionGrammars = List();

    def path               = Path.GetDirectoryName(Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath);
    def files              = Directory.GetFiles(path, "*.dll");
    def standardAssemblies = HashSet(array["Nemerle.dll", "Nemerle.Compiler.dll", "Nitra.Runtime.dll", "Boot.Nitra.Runtime.dll", "Nitra.Compiler.dll"]);

    // Обрабатываем файлы не входящие в список сборок самого немерла (стандратные сборки).
    // В них точно не может быть парсеров.
    foreach (file when !standardAssemblies.Contains(file) in files)
    {
      def assembly = Assembly.LoadFrom(file);
      foreach (grammar in GrammarDescriptor.GetDescriptors(assembly))
        dynamicExtentionGrammars.Add(grammar);
    }

    dynamicExtentionGrammars
  }

  Main() : void
  {
    def prettyPrintOpt             = PrettyPrintOptions.DebugIndent %| PrettyPrintOptions.MissingNodes;
    def parseSession               = ParseSession(N2Parser.CompilationUnit, compilerMessages = ConsoleCompilerMessages());
    parseSession.DynamicExtensions = LoadDynamicExtentionGrammars();
    def test(code : string) : void
    {
      try
      {
        def parseResult = parseSession.Parse(code);
        when (parseResult.IsSuccess)
          WriteLine("OK:");

        def parseTree = parseResult.CreateParseTree();
        Console.BackgroundColor = ConsoleColor.DarkGray;
        Console.ForegroundColor = ConsoleColor.White;
        WriteLine(parseTree.ToString(prettyPrintOpt));
        Console.ResetColor();
        WriteLine();
      }
      catch
      {
        | e is Exception =>
          Console.ForegroundColor = ConsoleColor.Red;
          WriteLine(e);
          Console.ResetColor();
          WriteLine();
      }
    }

    test(<#
namespace Ns1
{
  using N2ParserExtension1;
  type X =
    A.
    B;

  namespace Ns2
  {
    -
  }
}
    #>);

    test(<#
namespace Ns1
{
  using N2ParserExtension1;
  type X =
    A.
    B;

  namespace Ns2
  {
    namespace Ns3 { type X  C; }
    using Ns3;
  }
}
    #>);

    test(<#
namespace Ns1
{
  using N2ParserExtension1;
  type X - A.B;
}
    #>);

    test(<#
namespace Ns1
{
  using N2ParserExtension1
  type X - A.B;
}
    #>);

    test(<#
namespace Ns1
{
  namespace Ns2
  {
    using N2ParserExtension1;
    type X = A.B;
  }
using Y;
    #>);

    test(<#
namespace Ns1
{
  [Asd]
  !test test!
  class Asd
  {
  }
  namespace Ns2
  {
    using N2ParserExtension1;
    [Asd]
    !test test!
    class Asd
    {
    }
  }
  [Asd]
  !test test!
  class Asd
  {
  }
}
    #>);
    _ = ReadKey();
  }
}
