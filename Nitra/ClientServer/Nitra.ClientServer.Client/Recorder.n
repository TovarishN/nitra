using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;
using System.Threading;

namespace Nitra.ClientServer.Client
{
  class Recorder
  {
    public this(nitraClient : NitraClient) { _nitraClient = nitraClient; }
    
    _nitraClient      : NitraClient;
    _recordedMessages : List[ClientMessage] = List();

    public Play() : void
    {
      def messages = _recordedMessages.ToArray();

      foreach (msg in messages)
          _nitraClient.SendInternal(msg);
    }
    
    public Record([NotNull] msg : ClientMessage) : void
    {
      | SolutionStartLoading     => _recordedMessages.Add(msg);
      | SolutionLoaded           => _recordedMessages.Add(msg);
      | SolutionUnloaded         => Clear();
      | ProjectStartLoading      => _recordedMessages.Add(msg);
      | ProjectLoaded            => _recordedMessages.Add(msg);
      | ProjectUnloaded          => _recordedMessages.Add(msg);
      | ProjectRename            => _recordedMessages.Add(msg);
      | ProjectReferenceLoaded   => _recordedMessages.Add(msg);
      | ProjectReferenceUnloaded => _recordedMessages.Add(msg);
      | ReferenceLoaded          => _recordedMessages.Add(msg);
      | ReferenceUnloaded        => _recordedMessages.Add(msg);
      | FileLoaded               => _recordedMessages.Add(msg);
      | FileUnloaded             => _recordedMessages.Add(msg);
      | FileRenamed              => _recordedMessages.Add(msg);
      | FileInMemoryLoaded       => _recordedMessages.Add(msg);
      | FileChanged              => _recordedMessages.Add(msg);
      | FileChangedBatch         => _recordedMessages.Add(msg);
      | Shutdown                 => Clear();
      | FileDeactivated as fd with id = fd.id
      | FileActivated   as fa with id = fa.id =>
        def predicate(msg : ClientMessage) : bool
        {
          | FileActivated   as m when m.id == id => true
          | FileDeactivated as m when m.id == id => true
          | _                                    => false
        }
        _ = _recordedMessages.RemoveAll(predicate);
        _recordedMessages.Add(msg);
        
      | SetCaretPos as scp with id = scp.fileId =>
        def predicate(msg : ClientMessage) : bool
        {
          | SetCaretPos as m when m.fileId == id => true
          | _                                    => false
        }
        _ = _recordedMessages.RemoveAll(predicate);
        _recordedMessages.Add(msg);
      
      | FileSaved                as fs =>
        def fs = fs;
        def flIndex = _recordedMessages.FindLastIndex(x => x is ClientMessage.FileLoaded);
        def fl = _recordedMessages[flIndex] :> ClientMessage.FileLoaded;
        _recordedMessages[flIndex] = ClientMessage.FileLoaded(fl.projectId, fl.fullPath, fl.id, fs.version, false, null);
        def predicate(msg : ClientMessage) : bool
        {
          | FileChanged       as m when m.id == fs.id => true
          | FileChangedBatch  as m when m.id == fs.id => true
          | _                                         => false
        }
        _ = _recordedMessages.RemoveAll(predicate);

        def index = _recordedMessages.FindLastIndex(x => x is ClientMessage.SetCaretPos);
        when (index >= 0)
          _recordedMessages[index] = ReplaceVersion(fs.version, _recordedMessages[index] :> ClientMessage.SetCaretPos);

        def index = _recordedMessages.FindLastIndex(x => x is ClientMessage.FileActivated);
        when (index >= 0)
          _recordedMessages[index] = ReplaceVersion(fs.version, _recordedMessages[index] :> ClientMessage.FileActivated);
        
      | FileReparse              => () // ignore
      | CheckVersion             => () // ignore
      | PrettyPrint              => () // ignore
      | CompleteWord             => () // ignore
      | CompleteWordDismiss      => () // ignore
      | FindSymbolReferences     => () // ignore
      | FindSymbolDefinitions    => () // ignore
      | ParseTreeReflection      => () // ignore
      | GetObjectContent         => () // ignore
      | GetObjectGraph           => () // ignore
      | AttachDebugger           => () // ignore
      | GetLibsMetadata          => () // ignore
      | GetLibsSyntaxModules     => () // ignore
      | GetLibsProjectSupports   => () // ignore
      | GetFileExtensions        => () // ignore
      | GetHint                  => () // ignore
      | GetSubHint               => () // ignore
      | FindDeclarations         => () // ignore
    }

    private ReplaceVersion(version : FileVersion, msg : ClientMessage.SetCaretPos) : ClientMessage.SetCaretPos
    {
      ClientMessage.SetCaretPos(msg.projectId, msg.fileId, VersionedPos(msg.pos.Pos, version));
    }

    private ReplaceVersion(version : FileVersion, msg : ClientMessage.FileActivated) : ClientMessage.FileActivated
    {
      ClientMessage.FileActivated(msg.projectId, msg.id, version);
    }
    
    private Clear() : void
    {
      _recordedMessages.Clear();
    }
  } // class
} // namespace
