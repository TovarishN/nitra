using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;

using System;
using System.Collections.Concurrent;
using System.Console;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;
using System.Threading;

namespace Nitra.ClientServer.Client
{
  using Nitra.ClientServer.Messages.AsyncServerMessage;

  public sealed class NitraClient : IDisposable
  {
    public  StringManager    : StringManager;
            MaintPipeName    : string = Guid.NewGuid().ToString();
            _mainPipeClient  : NamedPipeClientStream;
            _responsePipe    : NamedPipeClientStream;
            _serverProc      : Process;
            _mainPipeWriter  : BinaryWriter;
    mutable _isDisposed      : bool;
    public  ResponseMap      : ConcurrentDictionary[int, Action[AsyncServerMessage]] = ConcurrentDictionary();
            _mainPipeReader  : BinaryReader;

    public this([NotNull] stringManager : StringManager)
    {
      StringManager             = stringManager;
      def executingAssemblyPath = Assembly.GetExecutingAssembly().Location;
      def assembliesPath        = Path.GetDirectoryName(executingAssemblyPath);
      def serverPath            = Path.Combine(assembliesPath, "Nitra.ClientServer.Server.exe");

      def startInfo = ProcessStartInfo() <- {
        FileName = serverPath;
        Arguments = MaintPipeName;
        WindowStyle = ProcessWindowStyle.Minimized;
      };

      _serverProc = Process.Start(startInfo);

      assert2(_serverProc != null);
      Log("Server started.");
      _mainPipeClient           = NamedPipeClientStream(".", MaintPipeName + Constants.RequestPipeSuffix, PipeDirection.Out);
      _mainPipeWriter           = BinaryWriter(_mainPipeClient);
      _responsePipe             = NamedPipeClientStream(".", MaintPipeName + Constants.ResponsePipeSuffix, PipeDirection.In);
      _mainPipeReader           = BinaryReader(_responsePipe);
      _mainPipeClient.Connect();
      _responsePipe.Connect();
      Log("Connected to server started.");

      def readerThread          = Thread(AsyncResponseReaderThreadMain);
      readerThread.Name         = "AsyncResponseReader";
      readerThread.IsBackground = true;
      readerThread.Start();
    }

    AsyncResponseReaderThreadMain() : void
    {
      def asyncResponsePipet  = NamedPipeClientStream(".", MaintPipeName + Constants.AsyncResponsePipeSuffix, PipeDirection.In);
      def asyncResponseReader = BinaryReader(asyncResponsePipet);
      asyncResponsePipet.Connect();

      while (!_isDisposed && asyncResponsePipet.IsConnected)
      {
        try
        {
          def msg = Deserializer.Deserialize.[AsyncServerMessage](asyncResponseReader);
          Trace.WriteLine(msg);

          mutable handler;
          if (ResponseMap.TryGetValue(msg.FileId, out handler))
          {
            handler(msg);
          }
          else if (ResponseMap.TryGetValue(-1, out handler))
          {
            handler(msg);
          }
          else
          {
            //assert2(false);
          }
        }
        catch
        {
          | _ is EndOfStreamException =>
            Trace.WriteLine("AsyncResponseReader disconnected.");
            return;

          | e => Trace.WriteLine("AsyncResponseReader exception: " + e);
        }
      }
    }

    public Send([NotNull] msg : ClientMessage) : void
    {
      when(_isDisposed)
        return;

      when (!_mainPipeClient.IsConnected)
      {
        assert2(true);
      }
      msg.Serialize(_mainPipeWriter);
    }

    public Receive[T]() : T
      where T: ServerMessage
    {
      ReceiveServerMessage() :> T
    }

    ReceiveServerMessage() : ServerMessage
    {
      Deserializer.Deserialize.[ServerMessage](_mainPipeReader)
    }

    public Flush() : void
    {
      _mainPipeWriter.Flush();
    }

    public Dispose() : void
    {
      when (_isDisposed)
        return;

      Send(Messages.ClientMessage.Shutdown());

      _mainPipeClient.Dispose();
      _responsePipe.Dispose();
      _isDisposed = true;
      GC.SuppressFinalize(this);
    }

    protected override Finalize() : void
    {
      Dispose();
    }

    Log(msg : string, params args: array[object]) : void
    {
      WriteLine(msg, args);
    }
  }
}
