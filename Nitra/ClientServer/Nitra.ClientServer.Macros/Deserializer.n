using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ClientServer.Macros
{
  public macro GenerateDeserializer()
  {
    Deserializer.Transform(Macros.ImplicitCTX())
  }
  
  module Deserializer
  {
    public Transform(typer: Typer): PExpr
    {
      typer.Manager.MacroColors.InGlobalColor(
        fun()
        {
          def registry = MessageRegistry.GetRegistry(typer.Manager);
          def exprs = List();
          foreach ((msgId, type) in registry)
            exprs.Add(<[ case: | $(msgId) => $(type: typed).Deserialize(reader) :> T ]>);
          exprs.Add(<[ case: | id => assert(false, "Not supported Id: " + id) ]>);
          <[ 
            match (reader.ReadInt16())
            {
              ..$exprs
            }
          ]>
        })
    }
    
    public GenerateModule(manager : ManagerClass): void
    {
      def className = "Deserializer";
      def node = manager.CoreEnv.EnterIntoNamespace("Nitra.ClientServer.Messages".SplitToList('.'));
      def classOpt = node.CurrentNamespace.LookupType([className], 0);
      
      match (classOpt)
      {
        | Some(_ is TypeBuilder) => ()
        | None() => 
          manager.MacroColors.InGlobalColor(
          fun()
          {
            def cond = "DEBUG2";
            def tb = node.Define(<[decl:
            public module $(className : usesite)
            {
              public Sync : object = object();
              public mutable IsTrace : bool;
                     mutable _indent : string = "";
              
              [System.Diagnostics.Conditional($cond)]
              public Indent() : void  { _indent += "  "; }
              [System.Diagnostics.Conditional($cond)]
              public Unindent() : void { _indent = _indent.Substring(0, _indent.Length - 2); }
              [System.Diagnostics.Conditional($cond)]
              public TraceIndent(msg : string) : void
              {
                Trace(msg);
                Indent();
              }
              [System.Diagnostics.Conditional($cond)]
              public TraceUnindent(msg : string) : void
              {
                Unindent();
                Trace(msg);
              }
              [System.Diagnostics.Conditional($cond)]
              public Trace(msg : string) : void
              {
                when (IsTrace)
                {
                  System.Diagnostics.Trace.WriteLine(_indent + msg);
                }
              }
              
              public Deserialize[T](reader: System.IO.BinaryReader): T
              {
                GenerateDeserializer()
              }
            } ]>);
            tb.Compile()
          })
        
        | _ => 
          def key = "Nitra.ClientServer.Messages.Deserializer declared";
          when (manager.UserData[key] == null)
          {
            Message.Error("Referenced assembly contains Nitra.ClientServer.Messages.Deserializer definition.");
            manager.UserData[key] = true;
          }
      }
    }
  }
}