using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ClientServer.Macros
{
  public macro ToStringImpl()
  {
    ToStringImpl.DoTransform(Macros.ImplicitCTX())
  }

  module ToStringImpl
  {
    public DoTransform(typer : Typer) : PExpr
    {
      def tb = typer.CurrentTypeBuilder;

      def options = tb.GetVariantOptions();

      if (options.IsEmpty)
        ProcessClass(typer, tb)
      else
        ProcessVariant(typer, tb, options)
    }

    MakeFielsd(typer : Typer, tb : TypeBuilder, exprs : List[PExpr]) : void
    {
      def makeValue(member : IMember) : PExpr
      {
        def type = member.GetMemType();
        if (typer.InternalType.String.Equals(type))
          <[ "\"" + x.$(member.Name : usesite) + "\"" ]>
        else
          <[ x.$(member.Name : usesite).ToString() ]>
      }
      foreach (member in tb.GetDirectMembers())
      {
        | field is IField when !field.Name.StartsWith("_N_") => exprs.Add(<[ $(field.Name + "=") + $(makeValue(field)) ]>)
        | _ => ()
      }
    }

    ProcessClass(typer : Typer, tb : TypeBuilder) : PExpr
    {
      def exprs = List();
      exprs.Add(<[ ", " ]>);
      MakeFielsd(typer, tb, exprs);
      def result =
        if (exprs.Count == 1)
          <[ $(tb.Name : global) => $(tb.Name + "()") ]>
        else
          <[ $(tb.Name : global) as x => $(tb.Name + "(") + string.Join(..$exprs) + ")" ]>;
      result
    }

    ProcessVariant(typer : Typer, tb : TypeBuilder, options : list[TypeBuilder]) : PExpr
    {
      def optionToCase(o : TypeBuilder) : MatchCase
      {
        def exprs = List();
        exprs.Add(<[ ", " ]>);
        MakeFielsd(typer, tb, exprs);
        MakeFielsd(typer, o,  exprs);
        def result =
          if (exprs.Count == 1)
            <[ case: | $(tb.Name : global).$(o.Name : global)      => $(o.Name + "()") ]>
          else
            <[ case: | $(tb.Name : global).$(o.Name : global) as x => $(o.Name + "(") + string.Join(..$exprs) + ")" ]>;
        result
      }
      def cases = options.Map(optionToCase);
      <[
        match (this)
        {
          ..$cases
        }
      ]>
    }
  }
}
