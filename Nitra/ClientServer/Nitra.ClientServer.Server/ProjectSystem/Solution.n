using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.Declarations;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using NSP = Nitra.ProjectSystem;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  internal class Solution : NSP.Solution, IDisposable
  {
            _projects        : Hashtable[int, Project] = Hashtable();
            _files           : Hashtable[int, File]    = Hashtable();
    public  Path             : string     { get; }
    public  Id               : SolutionId { get; }
    public  IsDisposed       : bool       { get; private set; }
    
    public this(id : SolutionId, path : string)
    {
      Id   = id;
      Path = path;

      Log("Solution opening. Id=" + id + " Path='" + path + "'")
    }
    
    public IsOpened       : bool    { get; private set; }
    public Item[projectId : int] : Project { get { GetProject(projectId) } }
    
    public GetProject(id : int) : Project
    {
      assert2(!IsDisposed);
      mutable value;
      if (_projects.TryGetValue(id, out value))
        value
      else
        throw ArgumentException($"Can't find a project with id=$id.", "id")
    }

    public GetFile(id : int) : File
    {
      assert2(!IsDisposed);
      mutable file;
      if (_files.TryGetValue(id, out file))
        file
      else
        throw ArgumentException($"Can't find file with id=$id.", "id")
    }
    
    internal _N_OnFileAdded(file : File) : void
    {
      assert2(!IsDisposed);
      _files.Add(file.Id, file);
    }

    internal _N_OnFileRemoved(id : int) : void
    {
      assert2(!IsDisposed);
      _files.Remove(id);
    }
    
    public Open(): void
    {
      assert2(!IsDisposed);
      IsOpened = true;
      Log("SolutionLoaded");
    }

    public Log(msg : string) : void { ServerUtils.Log(msg) }
    
    public AddProject(project : Project): void
    {
      assert2(!IsDisposed);
      _projects.Add(project.Id, project);
    }
    
    public RemoveProject(id : int) : void
    {
      assert2(!IsDisposed);
      def project = _projects[id];
      
      foreach (file in project.Files)
        project.RemoveFile(file.Id);
      
      _projects.Remove(id);
      project.Dispose();
    }
    
    public override Projects : Seq[NSP.Project] { get { _projects.Values } }
    
    public Dispose() : void
    {
      assert2(!IsDisposed);
      
      when (IsDisposed)
        return;
      
      foreach (v in _projects.Values)
        v.Dispose();
 
      IsOpened = false;
      _files.Clear();
      _projects.Clear();
    }
  }
}