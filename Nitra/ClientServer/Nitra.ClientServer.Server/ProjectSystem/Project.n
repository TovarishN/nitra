using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.Declarations;

using Nitra.Runtime.Reflection;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Reflection;

using NSP    = Nitra.ProjectSystem;
using NCSSPS = Nitra.ClientServer.Server.ProjectSystem;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  internal class Project : NSP.Project, IDisposable
  {
            _files                                   : Hashtable[int, File]   = Hashtable();
            _libMap                                  : Hashtable[string, int] = Hashtable();
            _libs                                    : List[NSP.LibReference] = List();
    public  Parent                                   : Solution;
    public  Id                                       : ProjectId;
    public  Path                                     : string                       { get; }
    public  Name                                     : string                       { get; private set; }
            _config                                  : Config;
            _projectSupport                          : IProjectSupport;
            _extToLanguages                          : Dictionary[string, Nitra.Language * List[GrammarDescriptor]] = Dictionary(StringComparer.InvariantCultureIgnoreCase);
            _languageMap                             : Dictionary[string, Nitra.Language] = Dictionary(StringComparer.InvariantCultureIgnoreCase);
    public  IsDisposed                               : bool                         { get; private set; }
    public  IsSemanticAvailable                      : bool                         { get; private set; }
    public  ParseQueue                               : BlockingCollection[ParserMessage];
    mutable _semanticAnalysisCancellationTokenSource : CancellationTokenSource;
    mutable _findDeclarationsCancellationTokenSource : CancellationTokenSource;
    public  Router                                   : Router { get; }
    mutable _expectsToBuildAst                       : int;
    public  SemanticActions                          : ConcurrentQueue[Action[CancellationToken, SolutionId, ImmutableArray[IAst * bool]]] = ConcurrentQueue();
    mutable _semanticResult                          : ImmutableArray[FileEvalPropertiesData];
           
    internal this(parent : Solution, fullPath : string, id : ProjectId, config : Config, parseQueue : BlockingCollection[ParserMessage], router : Router)
    {
      ParseQueue    = parseQueue;
      Path          = fullPath;
      ProjectDir    = if (string.IsNullOrEmpty(fullPath)) "" else Path.GetDirectoryName(fullPath);
      Id            = id;
      Parent        = parent;
      Solution      = parent;
      Name          = Path.GetFileNameWithoutExtension(fullPath);
      _config       = config;
      Libs          = _libs;
      Router        = router;
      
      unless (config.ProjectSupport.IsNotSpecified)
      {
        def ps   = config.ProjectSupport;
        def asm  = Language.LoadAssembly(ps.Path);
        def type = asm.GetType(ps.TypeFullName);
        _projectSupport = Activator.CreateInstance(type, true) :> IProjectSupport;
      }

      parent.AddProject(this);
      LoadLangs(_config.Languages);
    }
    
    public GetLanguage(ext : string) : Nitra.Language * List[GrammarDescriptor]
    {
      mutable result;
      unless (_extToLanguages.TryGetValue(ext, out result))
        result = (null, List());
      result
    }

    LoadLangs(languageInfos : array[LanguageInfo]) : void
    {
      def languages = List();
      for (mutable i = 0; i < languageInfos.Length; i++)
      {
        def languageInfo = languageInfos[i];
        def path         = languageInfo.Path;
        def name         = languageInfo.Name;
        def language     = Nitra.Language.GetLanguages(path).FirstOrDefault(lang => String.Equals(lang.FullName, name, StringComparison.Ordinal));
        when (language == null)
          throw ApplicationException($"The language $name not found in '$path'.");
        def fullName     = language.FullName;
        languages.Add(language);
        
        assert2(language.StartRule != null);
        ServerUtils.Log("  Language " + i + ": "+ fullName + " - '" + path + "' " + language.Authors);
        
        def dynamicExtensions = List();
        def extensions = languageInfo.DynamicExtensions;
        for (mutable k = 0; k < extensions.Length; k++)
        {
          def dynamicExtension = extensions[k];
          def extensionAssembly = Language.LoadAssembly(dynamicExtension.Path);
          def descriptor = GrammarDescriptor.GetDescriptors(extensionAssembly).FirstOrDefault(g => String.Equals(g.FullName, dynamicExtension.Name, StringComparison.Ordinal));
          if (descriptor == null)
            ServerUtils.Log($"Syntax module '$(dynamicExtension.Name)' not found in assembly '$(extensionAssembly.Location)'.");
          else
          {
            dynamicExtensions.Add(descriptor);
            ServerUtils.Log("    Dynamic extension " + descriptor.FullName + " - '" + dynamicExtension.Path + "'");
          }
        }

        ServerUtils.Log("    File extensions:");
        foreach (ext in language.FileExtensions)
        {
          _extToLanguages[ext]        = (language, dynamicExtensions);
          _languageMap[language.Name] = language;
          ServerUtils.Log($"      $ext");
        }

        _extToLanguages[".test"] = (language, dynamicExtensions);
      }
      
      Router.SpanClassesManager.LosdLanguages(languages);
      
      assert2(_extToLanguages != null);
    }
    
    public GetFileExtensions(languageNames : ImmutableArray[string]) : ImmutableArray[string]
    {
      def builder = ImmutableArray.CreateBuilder();

      if (languageNames.IsDefaultOrEmpty)
        foreach (language in _languageMap.Values)
          builder.AddRange(language.FileExtensions);
      else
        foreach (languageName in languageNames)
          builder.AddRange(_languageMap[languageName].FileExtensions);

      builder.ToImmutable()
    }

    public IsAllAstCreated   : bool { get { _expectsToBuildAst == 0 } }
    public ExpectsToBuildAst : int { get { _expectsToBuildAst } }
    
    public AstDropped(file : File) : void
    {
      when (file.IsSupported)
      {
        _expectsToBuildAst++;
        IsSemanticAvailable = false;
      }
      CancelSemanticAnalysisCancellation();
    }
    
    public CancelSemanticAnalysisCancellation() : void
    {
      ServerUtils.CancelCancellation(ref _semanticAnalysisCancellationTokenSource);
    }
    
    public CancelFindDeclarationsCancellation() : void
    {
      ServerUtils.CancelCancellation(ref _findDeclarationsCancellationTokenSource);
    }
    
    public AstCreated(file : File, completeWordPosOpt : int, parseResultOpt : IParseResult) : void
    {
      when (file.IsSupported)
        _expectsToBuildAst--;
      assert2(_expectsToBuildAst >= 0);
      
      TryStartSemanticAnalysis(file, completeWordPosOpt, parseResultOpt);
    }

    TryStartSemanticAnalysis(fileOpt : File = null, completeWordPosOpt : int = -1, parseResultOpt : IParseResult = null) : void
    {
      when (IsOpened && IsAllAstCreated && this._files.Count > 0)
      {
        CancelSemanticAnalysisCancellation();
        def cancellationTokenSource              = CancellationTokenSource();
        def cancellationToken                    = cancellationTokenSource.Token;
        _semanticAnalysisCancellationTokenSource = cancellationTokenSource;
        
        def projectSupport = _projectSupport ?? this.GetProjectSupport();
        if (projectSupport != null)
        {
          when (this.Data == null)
          {
            ServerUtils.Log("Project support: RefreshReferences " + this.Name + " ");
            def timer = Stopwatch.StartNew();
            def data =
              try projectSupport.RefreshReferences(Router.ProjectLoadCancellationToken, this)
              catch
              {
                | e is OperationCanceledException => ServerUtils.LogCanceled(e); null
                | e => 
                ServerUtils.LogException(e);
                Router.SendAsyncResponse(AsyncServerMessage.RefreshReferencesFailed(FileId.Invalid, FileVersion.Invalid, Parent.Id, e.ToString()));
                null
              };
            
            this.Data = data;
            
            Router.ProjectLoadFinish();
            LogMsgHandled("RefreshReferences " + this.Name + " ", timer, 1000);
            
            when (data == null)
              return;
          }

          ServerUtils.Log("Prepare to Semantic Analysis");

          def files = GetEvalPropertiesData(_files.Values.Where(_.IsSupported).OrderByDescending(_.IsActive));
          _semanticResult = ImmutableArray.Empty;
          foreach (file in files)
            file.Ast.DeepResetProperties();
          
          def completeWordFileIdOpt = if (completeWordPosOpt < 0) FileId.Invalid else FileId(fileOpt.Id);
          ParseQueue.Add(ParserMessage.SemanticAnalysisStart(Parent.Id, Id, cancellationToken, projectSupport, files, this.Data, completeWordFileIdOpt, completeWordPosOpt, parseResultOpt));
        }
        else
          ServerUtils.Log("Project support not available!");
      }
    }

    public static GetEvalPropertiesData(files : Seq[File]) : ImmutableArray[FileEvalPropertiesData]
    {
      def buffer = ImmutableArray.CreateBuilder();
      foreach (file in files)
        buffer.Add(FileEvalPropertiesData(file.FullName, file.Name, file.Id, file.Version, file.Ast, file.Statistics?.Typing, file.IsActive));
      buffer.ToImmutable();
    }
    
    public GetSemanticAnalysisMessages(fileId : FileId) : array[CompilerMessage]
    {
      def files = _semanticResult;
      def empty = array(0);
      
      when (files.IsDefaultOrEmpty)
        return empty;
      
      for (mutable i = 0; i < files.Length; i++)
      {
        def file = files[i];
        when (fileId != file.FileId)
          continue;
        
        if (file.HasCompilerMessage)
        {
          def msgs = file.GetCompilerMessage();
          def cm   = ServerUtils.ConvertCompilerMessages(CompilerMessageSource.SemanticAnalysis, msgs);
          return cm;
        }
        else
          return empty;
      }
      empty
    }
    
    public SemanticAnalysisFinished(files : ImmutableArray[FileEvalPropertiesData]) : void
    {
      IsSemanticAvailable = true;
      _semanticResult     = files;

      def cancellationToken = _semanticAnalysisCancellationTokenSource.Token;

      foreach (file in files)
        when (file.Ast?.Location?.Source?.File is NCSSPS.File as file when file.IsActive)
          ParseQueue.Add(ParserMessage.CreateSymbolsHighlighting(Parent.Id, Id, file.FileId, file.FileVersion, file.Ast));
      
      def semanticActions = SemanticActions;
      mutable action;
      mutable asts;
      
      while (semanticActions.TryDequeue(out action))
      {
        when (asts.IsDefault)
          asts = GetAsts(files);
        
        ParseQueue.Add(ParserMessage.SemanticAction(Parent.Id, action, cancellationToken, asts));
      }
      
      when (cancellationToken.IsCancellationRequested)
        return;
        
      Router.SendAsyncResponse(AsyncServerMessage.SemanticAnalysisDone(FileId.Invalid, FileVersion.Invalid, Parent.Id, Id));
    }

    static GetAsts(files : Seq[File]) : ImmutableArray[IAst * bool]
    {
      def builder = ImmutableArray.CreateBuilder(files.Count());
      foreach(file in files)
        builder.Add((file.Ast, file.IsActive));
      builder.MoveToImmutable();
    }
    
    static GetAsts(files : ImmutableArray[FileEvalPropertiesData]) : ImmutableArray[IAst * bool]
    {
      def builder = ImmutableArray.CreateBuilder(files.Count());
      foreach(file in files)
        builder.Add(file.Ast, file.IsActive);
      builder.MoveToImmutable();
    }
    
    public AddSemanticAction(action : Action[CancellationToken, SolutionId, ImmutableArray[IAst * bool]]) : void
    {
      if (IsSemanticAvailable)
        ParseQueue.Add(ParserMessage.SemanticAction(Parent.Id, action, _semanticAnalysisCancellationTokenSource.Token, GetAsts(_files.Values)));
      else
        SemanticActions.Enqueue(action);
    }
    
    public IsOpened : bool { get; private set }
    
    public Open() : void
    {
      IsOpened = true;
      TryStartSemanticAnalysis();
    }
    
    public Item[fileId : int] : File { get { GetFile(fileId) } }
    
    public GetFile(id : int) : File
    {
      mutable value;
      if (_files.TryGetValue(id, out value))
        value
      else
        throw ArgumentException($"Can't find file with id=$id.", "id")
    }
    
    public TryGetFile(id : int) : File
    {
      mutable file;
      _ = _files.TryGetValue(id, out file);
      file
    }
    
    public AddFile(file : File): void
    {
      _files.Add(file.Id, file);
      Parent._N_OnFileAdded(file);
      AstDropped(file);
    }

    public RemoveFile(file : File): void { RemoveFile(file.Id); }
    
    public RemoveFile(id : int): void
    {
      def file = _files[id];

      when (file.IsSupported && file.Ast == null)
        _expectsToBuildAst--;
      IsSemanticAvailable = false;
      _files.Remove(id);
      Parent._N_OnFileRemoved(id);
      TryStartSemanticAnalysis();
    }
    
    public AddProjectReference(projectId : int, path : string) : void
    {
      def name = projectId.ToString();
      mutable index;
      if (_libMap.TryGetValue(name, out index))
        ServerUtils.Log("Reference '" + name + "' allredy added: " + _libs[index]);
      else
      {
        _libMap[name] = _libs.Count;
        def r = NSP.ProjectReference(projectId, path);
        assert2(!string.IsNullOrEmpty(r.Path));
        _libs.Add(r);
      }
    }
    
    public AddLib(name : string) : void
    {
      mutable index;
      if (_libMap.TryGetValue(name, out index))
        ServerUtils.Log("Reference '" + name + "' allredy added: " + _libs[index]);
      else
      {
        def separatorPos = name.IndexOf(':');
        assert2(separatorPos > 0);
        def value = name.Substring(separatorPos + 1, name.Length - separatorPos - 1);
        _libMap[name] = _libs.Count;
        def r : NSP.LibReference =
          if (name.StartsWith("FullName:", StringComparison.InvariantCulture))
            NSP.FullNameLibReference(value)
          else if (name.StartsWith("File:", StringComparison.InvariantCulture))
            NSP.FileLibReference(value);
          else
          {
            assert(false, "Unsupported LibReference kind: " + name.Substring(0, separatorPos));
          };
          
        assert2(!string.IsNullOrEmpty(r.Path));
            
        _libs.Add(r);
      }
    }
    
    public RemoveLib(fullPath : string) : void
    {
      IgnoreParams();
      throw NotImplementedException()
    }
    
    public GetSymbolHint(symbolId : int) : void
    {
      def action(_cancellationToken : CancellationToken, _solutionId : SolutionId, mutable _asts : ImmutableArray[IAst * bool]) : void
      {
        def send(text : string) : void
        {
          Router.SendResponse(ServerMessage.SubHint(text));
        }
        def projectSupport = _projectSupport ?? this.GetProjectSupport();
        when (projectSupport != null)
        {
          def symbolOpt = projectSupport.GetSymbolById(this.Data, symbolId);

          if (symbolOpt is VSome(symbol))
            send("<hint>" + symbol.MakeHint() + "</hint>");
          else
            send($"<hint>The symbol with symbolId=$symbolId not found.</hint>");
            
          return;
        }

        send("<hint>No Project Support avalable.</hint>");
      }
      AddSemanticAction(action);
    }
    
    // implementation
    
    LogMsgHandled(msg : string, timer : Stopwatch, millisecondToTimeout : int) : void { ServerUtils.LogMsgHandled(msg, timer, millisecondToTimeout); }
    
    // overrides
    
    public override Files : Seq[NSP.File] 
    { 
      get { _files.Values }
    }
    
    public FindDeclarations(pattern : string, kinds : ImmutableArray[string]) : void
    {
      CancelFindDeclarationsCancellation();
      def cancellationTokenSource              = CancellationTokenSource();
      def findDeclarationsCancellationToken    = cancellationTokenSource.Token;
      _findDeclarationsCancellationTokenSource = cancellationTokenSource;
      
      def action(cancellationToken : CancellationToken, _solutionId : SolutionId, mutable _asts : ImmutableArray[IAst * bool]) : void
      {
        def isCancellationRequested() : bool { findDeclarationsCancellationToken.IsCancellationRequested || cancellationToken.IsCancellationRequested }
        when (isCancellationRequested())
          return;

        def projectSupport = _projectSupport ?? this.GetProjectSupport();
        when (projectSupport != null)
        {
          //ServerUtils.Log($"FindDeclarations('$pattern', [..$kinds]) ProjectId=$(this.Id)");
          
          def timer = Stopwatch.StartNew();
          def infos = List();
          def send() : void
          {
            when (infos.Count == 0)
              return;
            def result = infos.ToImmutableArray();
            def msg = AsyncServerMessage.FoundDeclarations(FileId.Invalid, FileVersion.Invalid, _solutionId, this.Id, result);
            Router.SendAsyncResponse(msg);
            //ServerUtils.Log($"Sending $(infos.Count) DeclarationInfo-s.");
            infos.Clear();
          }
          def callbac(symbol : DeclarationSymbol) : bool
          {
            when (symbol.DeclarationsCount > 3 && symbol.IsKindEvaluated && symbol.Kind.Equals("namespace",  StringComparison.CurrentCulture))
              return false;

            def name = symbol.InitialName;
            when (StringPatternMatching.MatchPattern(name, pattern))
            {
              def fullName = if (symbol.IsFullNameEvaluated) symbol.FullName else "<not evaluated>";
              def spanClassId = Router.SpanClassesManager[symbol.SpanClass];
              foreach (decl in symbol.GetDeclarationsUntyped() with i)
              {
                def name2 = decl.Name.Text;
                def spans = StringPatternMatching.MatchPatternSpans(name2, pattern);
                def loc = ServerUtils.ConvertLocation(decl.Name.Location, withText=false);
                def kind = if (symbol.IsKindEvaluated) symbol.Kind else "<unknown>";
                def info = DeclarationInfo(symbol.Id, name2, spans, fullName, kind, spanClassId, loc);
                infos.Add(info);
                when (timer.ElapsedMilliseconds > 10)
                {
                  when (isCancellationRequested())
                    return true;
                  send();
                  timer.Restart();
                }
              }
            }
            
            cancellationToken.IsCancellationRequested
          }
          projectSupport.VisitGlobalSymbols(this.Data, callbac);
          send();
          //ServerUtils.Log("Finish FindDeclarations");
        }
      }
      AddSemanticAction(action);
    }

    public Dispose() : void
    {
      when (IsDisposed)
        return;
        
      foreach (v in _files.Values)
      {
        Parent._N_OnFileRemoved(v.Id);
        v.Dispose();
      }
      
      _files.Clear();

      ServerUtils.DisposeCancellationTokenSource(ref _semanticAnalysisCancellationTokenSource);
      ServerUtils.DisposeCancellationTokenSource(ref _findDeclarationsCancellationTokenSource);

      IsDisposed = true;
    }

    public override UpdateProperties(cancellationToken : CancellationToken) : void { IgnoreParams(); throw System.NotImplementedException() }
    public override EvalProperties(context : DependentPropertyEvalContext, passName : string, stage : int) : void { IgnoreParams(); throw System.NotImplementedException() }
  }
}