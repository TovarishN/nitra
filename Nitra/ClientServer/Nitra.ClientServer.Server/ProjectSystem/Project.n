using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.Declarations;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Reflection;

using NSP = Nitra.ProjectSystem;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  internal class Project : NSP.Project, IDisposable
  {
            _files                                   : Hashtable[int, File]   = Hashtable();
            _libMap                                  : Hashtable[string, int] = Hashtable();
            _libs                                    : List[NSP.LibReference] = List();
    public  Parent                                   : Solution;
    public  Id                                       : int;
    public  Path                                     : string                       { get; }
    public  Name                                     : string                       { get; private set; }
    public  LanguageInfos                            : ImmutableArray[LanguageInfo] { get; }
            _extToLanguages                          : Dictionary[string, Nitra.Language * List[GrammarDescriptor]] = Dictionary(StringComparer.InvariantCultureIgnoreCase);
    public  IsDisposed                               : bool                         { get; private set; }
    public  IsSemanticAvailable                      : bool                         { get; private set; }
    public  ParseQueue                               : BlockingCollection[ParserMessage];
            _semanticAnalysisCancellationTokenSource : CancellationTokenSource { get; private set; }
    public  Router                                   : Router { get; }
    mutable _expectsToBuildAst                       : int;
    public  SemanticActions                          : ConcurrentQueue[Action[CancellationToken, ImmutableArray[IAst]]] = ConcurrentQueue();
           
    internal this(parent : Solution, fullPath : string, id : int, languageInfos : ImmutableArray[LanguageInfo], parseQueue : BlockingCollection[ParserMessage], router : Router)
    {
      ParseQueue    = parseQueue;
      Path          = fullPath;
      ProjectDir    = fullPath;
      Id            = id;
      Parent        = parent;
      Solution      = parent;
      Name          = Path.GetFileNameWithoutExtension(fullPath);
      LanguageInfos = languageInfos;
      Libs          = _libs;
      Router        = router;

      parent.AddProject(this);
      LoadLangs(languageInfos);
      
      Log("ProjectStartLoading " + id + ": "+ fullPath);
    }
    
    public GetLanguage(ext : string) : Nitra.Language * List[GrammarDescriptor]
    {
      _extToLanguages[ext]
    }
    
    LoadAssembly(path : string) : Assembly
    {
      // TODO: add chech GetReferencedAssemblies()
      // TODO: use shadow copying
      def assembly = 
        if (path.Contains(", Version="))
          Assembly.Load(path)
        else
          Assembly.LoadFrom(path);
      assembly
    }

    LoadLangs(languageInfos : ImmutableArray[LanguageInfo]) : void
    {
      for (mutable i = 0; i < languageInfos.Length; i++)
      {
        def languageInfo = languageInfos[i];
        def path         = languageInfo.Path;
        def name         = languageInfo.Name;
        def assembly     = LoadAssembly(path);
        def language     = Nitra.Language.GetLanguages(assembly).FirstOrDefault(lang => String.Equals(lang.FullName, name, StringComparison.Ordinal));
        def fullName     = language.FullName;
        def readSpanClassInfos(language : Nitra.Language, spanClassInfosBilder, spanClassesManager : SpanClassesManager) : void
        {
          when (language.Parent != null)
            readSpanClassInfos(language.Parent, spanClassInfosBilder, spanClassesManager);

          def spanClasses = language.GetDeclaredSpanClasses();
          foreach (spanClass in spanClasses)
          {
            def id = spanClassesManager.Add(spanClass);
            spanClassInfosBilder.Add(SpanClassInfo(spanClass.FullName, id, spanClass.Style.ForegroundColor));
          }
        }
        def spanClassInfosBilder = ImmutableArray.CreateBuilder();
        readSpanClassInfos(language, spanClassInfosBilder, Router.SpanClassesManager);
        def spanClassInfos = spanClassInfosBilder.ToImmutable();
        Router.SendAsyncResponse(AsyncServerMessage.LanguageLoaded(-1, -1, spanClassInfos));
        
        assert2(language.StartRule != null);
        Log("  Language " + i + ": "+ fullName + " - '" + path + "' " + language.Authors);
        
        def dynamicExtensions = List();
        def extensions = languageInfo.DynamicExtensions;
        for (mutable k = 0; k < extensions.Length; k++)
        {
          def dynamicExtension = extensions[k];
          def extensionAssembly = LoadAssembly(dynamicExtension.Path);
          def descriptor = GrammarDescriptor.GetDescriptors(extensionAssembly).FirstOrDefault(g => String.Equals(g.FullName, dynamicExtension.Name, StringComparison.Ordinal));
          if (descriptor == null)
            Log("Syntax module '$(dynamicExtension.Name)' not found in assembly '$(extensionAssembly.Location)'.");
          else
          {
            dynamicExtensions.Add(descriptor);
            Log("    Dynamic extension " + descriptor.FullName + " - '" + dynamicExtension.Path + "'");
          }
        }
        def fileExtensions = languageInfo.FileExtensions;
        if (fileExtensions == null || fileExtensions.Length == 0)
          foreach (ext in language.FileExtensions)
            _extToLanguages[ext] = (language, dynamicExtensions);
        else
          for (mutable j = 0; j < fileExtensions.Length; j++)
            _extToLanguages[fileExtensions[j]] = (language, dynamicExtensions);
      }
      
      assert2(_extToLanguages != null);
    }

    public IsAllAstCreated   : bool { get { _expectsToBuildAst == 0 } }
    public ExpectsToBuildAst : int { get { _expectsToBuildAst } }
    
    public AstDropped() : void
    {
      _expectsToBuildAst++;
      CancelSemanticAnalysisCancellation();
      IsSemanticAvailable                      = false;
    }
    
    public CancelSemanticAnalysisCancellation() : void
    {
      def cts = _semanticAnalysisCancellationTokenSource;
      when (cts == null)
        return;

      _semanticAnalysisCancellationTokenSource = null;
      cts.Cancel();
      cts.Dispose();
    }
    
    public AstCreated() : void
    {
      _expectsToBuildAst--;
      assert2(_expectsToBuildAst >= 0);
      
      when (IsAllAstCreated && this._files.Count > 0)
      {
        CancelSemanticAnalysisCancellation();
        def cancellationTokenSource              = CancellationTokenSource();
        def cancellationToken                    = cancellationTokenSource.Token;
        _semanticAnalysisCancellationTokenSource = cancellationTokenSource;
        
        def projectSupport = this.GetProjectSupport();
        if (projectSupport != null)
        {
          when (this.Data == null)
          {
            Log("Project support: RefreshReferences");
            def timer = Stopwatch.StartNew();
            this.Data = projectSupport.RefreshReferences(Router.ProjectLoadCancellationToken, this);
            Router.ProjectLoadFinish();
            LogMsgHandled("RefreshReferences", timer, 1000);
          }

          Log("Prepare to Semantic Analysis");

          def files = NSP.File.GetEvalPropertiesData(_files.Values.OrderBy(f => f.IsActive));
          foreach (file in files)
            file.Ast.DeepResetProperties();
            
          ParseQueue.Add(ParserMessage.SemanticAnalysisStart(Id, cancellationToken, projectSupport, files, this.Data));
        }
        else
          Log("Project support not available!");
      }
    }
    
    public SemanticAnalysisFinished() : void
    {
      IsSemanticAvailable = true;
      def files = _files.Values.ToArray();
      def cancellationToken = _semanticAnalysisCancellationTokenSource.Token;
      
      foreach (file when file.IsActive in files)
      {
        ParseQueue.Add(ParserMessage.CreateSymbolsHighlighting(file.Id, file.Version, file.Ast));
      }
      
      def semanticActions = SemanticActions;
      mutable action;
      mutable asts;
      
      while (semanticActions.TryDequeue(out action))
      {
        when (asts.IsDefault)
          asts = GetAsts(files);
        
        ParseQueue.Add(ParserMessage.SemanticAction(action, cancellationToken, asts));
      }
      
      when (cancellationToken.IsCancellationRequested)
        return;
        
      Router.SendAsyncResponse(AsyncServerMessage.SemanticAnalysisDone(-1, -1));
    }

    static GetAsts(files : Seq[File]) : ImmutableArray[IAst]
    {
      def builder = ImmutableArray.CreateBuilder(files.Count());
      foreach(file in files)
        builder.Add(file.Ast);
      builder.MoveToImmutable();
    }
    
    public AddSemanticAction(action : Action[CancellationToken, ImmutableArray[IAst]]) : void
    {
      if (IsSemanticAvailable)
        ParseQueue.Add(ParserMessage.SemanticAction(action, _semanticAnalysisCancellationTokenSource.Token, GetAsts(_files.Values)));
      else
        SemanticActions.Enqueue(action);
    }
    
    public IsOpened : bool { get; private set }
    
    public Open() : void { IsOpened = true }
    
    public Item[fileId : int] : File { get { GetFile(fileId) } }
    
    public GetFile(id : int) : File
    {
      _files[id]
    }
    
    public AddFile(file : File): void
    {
      _expectsToBuildAst++;
      _files.Add(file.Id, file);
      Parent._N_OnFileAdded(file);
    }

    public RemoveFile(file : File): void { RemoveFile(file.Id); }
    
    public RemoveFile(id : int): void
    {
      _expectsToBuildAst--;
      _files.Remove(id);
      Parent._N_OnFileRemoved(id);
    }
    
    public AddProjectReference(projectId : int, referencedProjectId : int) : void
    {
      IgnoreParams();
      throw NotImplementedException()
    }
    
    public AddLib(name : string) : void
    {
      mutable index;
      if (_libMap.TryGetValue(name, out index))
        Log("Reference '" + name + "' allredy added: " + _libs[index]);
      else
      {
        def separatorPos = name.IndexOf(':');
        assert2(separatorPos > 0);
        def value = name.Substring(separatorPos + 1, name.Length - separatorPos - 1);
        _libMap[name] = _libs.Count;
        def r : NSP.LibReference =
          if (name.StartsWith("FullName:", StringComparison.InvariantCulture))
            NSP.FullNameLibReference(value)
          else if (name.StartsWith("File:", StringComparison.InvariantCulture))
            NSP.FileLibReference(value);
          else if (name.StartsWith("Project:", StringComparison.InvariantCulture))
            NSP.ProjectReference(value);
          else
          {
            assert(false, "Unsupported LibReference kind: " + name.Substring(0, separatorPos));
          };
            
        _libs.Add(r);
        Log("  Lib: " + r);
      }
    }
    
    public RemoveLib(fullPath : string) : void
    {
      IgnoreParams();
      throw NotImplementedException()
    }
    
    // implementation
    
    Log(msg : string) : void { ServerUtils.Log(msg) }
    LogMsgHandled(msg : string, timer : Stopwatch, millisecondToTimeout : int) : void { ServerUtils.LogMsgHandled(msg, timer, millisecondToTimeout); }
    
    // overrides
    
    public override Files : Seq[NSP.File] 
    { 
      get { _files.Values }
    }
    
    public Dispose() : void
    {
      when (IsDisposed)
        return;
        
      foreach (v in _files.Values)
        v.Dispose();
      _files.Clear();
      
      def cts = _semanticAnalysisCancellationTokenSource;
      when (cts != null)
      {
        _semanticAnalysisCancellationTokenSource = null;
        unless (cts.IsCancellationRequested)
          cts.Cancel();
        cts.Dispose();
      }
      
      IsDisposed = true;
    }

    public override UpdateProperties(cancellationToken : CancellationToken) : void { IgnoreParams(); throw System.NotImplementedException() }
    public override EvalProperties(context : DependentPropertyEvalContext, passName : string, stage : int) : void { IgnoreParams(); throw System.NotImplementedException() }
  }
}