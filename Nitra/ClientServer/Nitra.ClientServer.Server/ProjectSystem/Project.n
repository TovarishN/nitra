using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.Declarations;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Reflection;

using NSP = Nitra.ProjectSystem;

namespace Nitra.ClientServer.Server.ProjectSystem
{
  internal class Project : NSP.Project, IDisposable
  {
            _files                                   : Hashtable[int, File]   = Hashtable();
            _libMap                                  : Hashtable[string, int] = Hashtable();
            _libs                                    : List[NSP.LibReference] = List();
    public  Parent                                   : Solution;
    public  Id                                       : int;
    public  Path                                     : string                       { get; }
    public  Name                                     : string                       { get; private set; }
            _config                                  : Config;
            _projectSupport                          : IProjectSupport;
            _extToLanguages                          : Dictionary[string, Nitra.Language * List[GrammarDescriptor]] = Dictionary(StringComparer.InvariantCultureIgnoreCase);
            _languageMap                             : Dictionary[string, Nitra.Language] = Dictionary(StringComparer.InvariantCultureIgnoreCase);
    public  IsDisposed                               : bool                         { get; private set; }
    public  IsSemanticAvailable                      : bool                         { get; private set; }
    public  ParseQueue                               : BlockingCollection[ParserMessage];
            _semanticAnalysisCancellationTokenSource : CancellationTokenSource { get; private set; }
    public  Router                                   : Router { get; }
    mutable _expectsToBuildAst                       : int;
    public  SemanticActions                          : ConcurrentQueue[Action[CancellationToken, int, ImmutableArray[IAst]]] = ConcurrentQueue();
           
    internal this(parent : Solution, fullPath : string, id : int, config : Config, parseQueue : BlockingCollection[ParserMessage], router : Router)
    {
      ParseQueue    = parseQueue;
      Path          = fullPath;
      ProjectDir    = fullPath;
      Id            = id;
      Parent        = parent;
      Solution      = parent;
      Name          = Path.GetFileNameWithoutExtension(fullPath);
      _config       = config;
      Libs          = _libs;
      Router        = router;
      
      unless (config.ProjectSupport.IsNotSpecified)
      {
        def ps   = config.ProjectSupport;
        def asm  = ServerUtils.LoadAssembly(ps.Path);
        def type = asm.GetType(ps.TypeFullName);
        _projectSupport = Activator.CreateInstance(type) :> IProjectSupport;
      }

      parent.AddProject(this);
      LoadLangs(_config.Languages);
      
      Log("ProjectStartLoading " + id + ": "+ fullPath);
    }
    
    public GetLanguage(ext : string) : Nitra.Language * List[GrammarDescriptor]
    {
      mutable result;
      unless (_extToLanguages.TryGetValue(ext, out result))
        result = (null, List());
      result
    }

    LoadLangs(languageInfos : array[LanguageInfo]) : void
    {
      def languages = List();
      for (mutable i = 0; i < languageInfos.Length; i++)
      {
        def languageInfo = languageInfos[i];
        def path         = languageInfo.Path;
        def name         = languageInfo.Name;
        def assembly     = ServerUtils.LoadAssembly(path);
        def language     = Nitra.Language.GetLanguages(assembly).FirstOrDefault(lang => String.Equals(lang.FullName, name, StringComparison.Ordinal));
        def fullName     = language.FullName;
        languages.Add(language);
        
        assert2(language.StartRule != null);
        Log("  Language " + i + ": "+ fullName + " - '" + path + "' " + language.Authors);
        
        def dynamicExtensions = List();
        def extensions = languageInfo.DynamicExtensions;
        for (mutable k = 0; k < extensions.Length; k++)
        {
          def dynamicExtension = extensions[k];
          def extensionAssembly = ServerUtils.LoadAssembly(dynamicExtension.Path);
          def descriptor = GrammarDescriptor.GetDescriptors(extensionAssembly).FirstOrDefault(g => String.Equals(g.FullName, dynamicExtension.Name, StringComparison.Ordinal));
          if (descriptor == null)
            Log($"Syntax module '$(dynamicExtension.Name)' not found in assembly '$(extensionAssembly.Location)'.");
          else
          {
            dynamicExtensions.Add(descriptor);
            Log("    Dynamic extension " + descriptor.FullName + " - '" + dynamicExtension.Path + "'");
          }
        }

        Log("    File extensions:");
        foreach (ext in language.FileExtensions)
        {
          _extToLanguages[ext]        = (language, dynamicExtensions);
          _languageMap[language.Name] = language;
          Log($"      $ext");
        }

        _extToLanguages[".test"] = (language, dynamicExtensions);
      }
      
      Router.SpanClassesManager.LosdLanguages(languages);
      
      assert2(_extToLanguages != null);
    }
    
    public GetFileExtensions(languageNames : ImmutableArray[string]) : ImmutableArray[string]
    {
      def builder = ImmutableArray.CreateBuilder();

      if (languageNames.IsDefaultOrEmpty)
        foreach (language in _languageMap.Values)
          builder.AddRange(language.FileExtensions);
      else
        foreach (languageName in languageNames)
          builder.AddRange(_languageMap[languageName].FileExtensions);

      builder.ToImmutable()
    }

    public IsAllAstCreated   : bool { get { _expectsToBuildAst == 0 } }
    public ExpectsToBuildAst : int { get { _expectsToBuildAst } }
    
    public AstDropped(file : File) : void
    {
      when (file.IsSupported)
      {
        _expectsToBuildAst++;
        IsSemanticAvailable = false;
      }
      CancelSemanticAnalysisCancellation();
    }
    
    public CancelSemanticAnalysisCancellation() : void
    {
      def cts = _semanticAnalysisCancellationTokenSource;
      when (cts == null)
        return;

      _semanticAnalysisCancellationTokenSource = null;
      cts.Cancel();
      cts.Dispose();
    }
    
    public AstCreated(file : File) : void
    {
      when (file.IsSupported)
        _expectsToBuildAst--;
      assert2(_expectsToBuildAst >= 0);
      
      TryStartSemanticAnalysis();
    }
    
    TryStartSemanticAnalysis() : void
    {
      when (IsAllAstCreated && this._files.Count > 0)
      {
        CancelSemanticAnalysisCancellation();
        def cancellationTokenSource              = CancellationTokenSource();
        def cancellationToken                    = cancellationTokenSource.Token;
        _semanticAnalysisCancellationTokenSource = cancellationTokenSource;
        
        def projectSupport = _projectSupport ?? this.GetProjectSupport();
        if (projectSupport != null)
        {
          when (this.Data == null)
          {
            Log("Project support: RefreshReferences");
            def timer = Stopwatch.StartNew();
            def data =
              try projectSupport.RefreshReferences(Router.ProjectLoadCancellationToken, this)
              catch
              {
                | e is OperationCanceledException => ServerUtils.LogCanceled(e); null
                | e => 
                ServerUtils.LogException(e);
                Router.SendAsyncResponse(AsyncServerMessage.RefreshReferencesFailed(-1, -1, Parent.Id, e.ToString()));
                null
              };
            
            this.Data = data;
            
            Router.ProjectLoadFinish();
            LogMsgHandled("RefreshReferences", timer, 1000);
            
            when (data == null)
              return;
          }

          Log("Prepare to Semantic Analysis");

          def files = NSP.File.GetEvalPropertiesData(_files.Values.Where(_.IsSupported).OrderBy(_.IsActive));
          foreach (file in files)
            file.Ast.DeepResetProperties();
            
          ParseQueue.Add(ParserMessage.SemanticAnalysisStart(Parent.Id, Id, cancellationToken, projectSupport, files, this.Data));
        }
        else
          Log("Project support not available!");
      }
    }
    

    public SemanticAnalysisFinished() : void
    {
      IsSemanticAvailable = true;
      def files = _files.Values.ToArray();
      def cancellationToken = _semanticAnalysisCancellationTokenSource.Token;
      
      foreach (file when file.IsActive && file.IsSupported in files)
      {
        ParseQueue.Add(ParserMessage.CreateSymbolsHighlighting(Parent.Id, file.Id, file.Version, file.Ast));
      }
      
      def semanticActions = SemanticActions;
      mutable action;
      mutable asts;
      
      while (semanticActions.TryDequeue(out action))
      {
        when (asts.IsDefault)
          asts = GetAsts(files);
        
        ParseQueue.Add(ParserMessage.SemanticAction(Parent.Id, action, cancellationToken, asts));
      }
      
      when (cancellationToken.IsCancellationRequested)
        return;
        
      Router.SendAsyncResponse(AsyncServerMessage.SemanticAnalysisDone(-1, -1, Parent.Id));
    }

    static GetAsts(files : Seq[File]) : ImmutableArray[IAst]
    {
      def builder = ImmutableArray.CreateBuilder(files.Count());
      foreach(file in files)
        builder.Add(file.Ast);
      builder.MoveToImmutable();
    }
    
    public AddSemanticAction(action : Action[CancellationToken, int, ImmutableArray[IAst]]) : void
    {
      if (IsSemanticAvailable)
        ParseQueue.Add(ParserMessage.SemanticAction(Parent.Id, action, _semanticAnalysisCancellationTokenSource.Token, GetAsts(_files.Values)));
      else
        SemanticActions.Enqueue(action);
    }
    
    public IsOpened : bool { get; private set }
    
    public Open() : void { IsOpened = true }
    
    public Item[fileId : int] : File { get { GetFile(fileId) } }
    
    public GetFile(id : int) : File
    {
      _files[id]
    }
    
    public AddFile(file : File): void
    {
      _files.Add(file.Id, file);
      Parent._N_OnFileAdded(file);
      AstDropped(file);
    }

    public RemoveFile(file : File): void { RemoveFile(file.Id); }
    
    public RemoveFile(id : int): void
    {
      def file = _files[id];

      when (file.IsSupported && file.Ast == null)
        _expectsToBuildAst--;
      IsSemanticAvailable = false;
      _files.Remove(id);
      Parent._N_OnFileRemoved(id);
      TryStartSemanticAnalysis();
    }
    
    public AddProjectReference(projectId : int, referencedProjectId : int) : void
    {
      IgnoreParams();
      throw NotImplementedException()
    }
    
    public AddLib(name : string) : void
    {
      mutable index;
      if (_libMap.TryGetValue(name, out index))
        Log("Reference '" + name + "' allredy added: " + _libs[index]);
      else
      {
        def separatorPos = name.IndexOf(':');
        assert2(separatorPos > 0);
        def value = name.Substring(separatorPos + 1, name.Length - separatorPos - 1);
        _libMap[name] = _libs.Count;
        def r : NSP.LibReference =
          if (name.StartsWith("FullName:", StringComparison.InvariantCulture))
            NSP.FullNameLibReference(value)
          else if (name.StartsWith("File:", StringComparison.InvariantCulture))
            NSP.FileLibReference(value);
          else if (name.StartsWith("Project:", StringComparison.InvariantCulture))
            NSP.ProjectReference(value);
          else
          {
            assert(false, "Unsupported LibReference kind: " + name.Substring(0, separatorPos));
          };
            
        _libs.Add(r);
        Log($"  Lib: $r - '$(r.Path)'");
      }
    }
    
    public RemoveLib(fullPath : string) : void
    {
      IgnoreParams();
      throw NotImplementedException()
    }
    
    // implementation
    
    Log(msg : string) : void { ServerUtils.Log(msg) }
    LogMsgHandled(msg : string, timer : Stopwatch, millisecondToTimeout : int) : void { ServerUtils.LogMsgHandled(msg, timer, millisecondToTimeout); }
    
    // overrides
    
    public override Files : Seq[NSP.File] 
    { 
      get { _files.Values }
    }
    
    public Dispose() : void
    {
      when (IsDisposed)
        return;
        
      foreach (v in _files.Values)
        v.Dispose();
      _files.Clear();
      
      def cts = _semanticAnalysisCancellationTokenSource;
      when (cts != null)
      {
        _semanticAnalysisCancellationTokenSource = null;
        unless (cts.IsCancellationRequested)
          cts.Cancel();
        cts.Dispose();
      }
      
      IsDisposed = true;
    }

    public override UpdateProperties(cancellationToken : CancellationToken) : void { IgnoreParams(); throw System.NotImplementedException() }
    public override EvalProperties(context : DependentPropertyEvalContext, passName : string, stage : int) : void { IgnoreParams(); throw System.NotImplementedException() }
  }
}