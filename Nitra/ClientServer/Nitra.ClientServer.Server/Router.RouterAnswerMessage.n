using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;

using System;
using System.Threading;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;

using IO = System.IO;

namespace Nitra.ClientServer.Server
{
  internal partial class Router
  {
    /// Response from workers. Called in Messages from client. Called in Router thread.
    OnRouterAnswerMessage(serverMsg : RouterAnswerMessage) : void
    {
      | FileParsed(fileId, parseResult) => 
        when (parseResult.ParseSession.CancellationToken.IsCancellationRequested)
          return;

        assert2(parseResult != null);

        def file = _solution.GetFile(fileId);
              
        when (file.IsActive)
          file.CreateVisualInfo(parseResult);
              
        _parseQueue.Add(file.CreateAstMessage(parseResult));
              
      | AstCreated(fileId, cancellationToken, ast, parseTree) =>
        when (cancellationToken.IsCancellationRequested)
          return;

        def file = _solution.GetFile(fileId);
        // TODO: send CollectOutlining and CollectTokebHighlighting mesages
        file.AstCreated(ast, parseTree);
        // TODO: send EvalProperties if ast != null
      | SemanticAnalysisFinished(projectId, cancellationToken, files) =>
        when (cancellationToken.IsCancellationRequested)
          return;
        def project = _solution[projectId];
        project.SemanticAnalysisFinished(files);
    }
  }
}
