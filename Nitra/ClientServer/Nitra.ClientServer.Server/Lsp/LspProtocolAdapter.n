using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.Logging;

using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Linq;
using System.IO;
using System.Threading;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.VisualStudio.LanguageServer.Protocol;

using LSP      = Microsoft.VisualStudio.LanguageServer.Protocol;
using Messages = Nitra.ClientServer.Messages;

namespace Nitra.ClientServer.Server.Lsp
{
  public class LspProtocolAdapter : IProtocolAdapter
  {
    private static mutable _tagCounter  : int;
    private static mutable _fileCounter : int;

    private _uriToFileIdTable   : ConcurrentDictionary[Uri, FileId] = ConcurrentDictionary();
    private _fileIdToUriTable   : ConcurrentDictionary[FileId, Uri] = ConcurrentDictionary();
    private _requestTable       : ConcurrentDictionary[uint, object * Delegate] = ConcurrentDictionary();

    private mutable _input      : Stream;
    private mutable _output     : Stream;
    private mutable _reader     : LspReader[HandlerResult];
    private mutable _writer     : LspWriter;

    private mutable _solutionId : SolutionId;
    private mutable _projectId  : ProjectId;

    private mutable pendingCompletionId : object;

    public IsLsp : bool { get true; }

    public Connect() : void
    {
      def di = IO.DirectoryInfo(@"c:\!Logs\");

      foreach (file in di.GetFiles())
          file.Delete();

      _input = Console.OpenStandardInput();
      _output = Console.OpenStandardOutput();

      _reader = LspReader(_input);
      _writer = LspWriter(_output);

      _reader.UnknownRequestHandler += UnknownHandler;

      _reader.RegisterHandler("$/cancelRequest",                       CancelRequestHandler);
      _reader.RegisterHandler(Methods.Initialize,                      InitializeHandler);
      _reader.RegisterHandler(Methods.Initialized,                     InitializedHandler);
      _reader.RegisterHandler(Methods.Shutdown,                        ShutdownHandler);
      _reader.RegisterHandler(Methods.Exit,                            ExitHandler);
      _reader.RegisterHandler(Methods.WorkspaceDidChangeConfiguration, WorkspaceDidChangeConfigurationHandler);
      _reader.RegisterHandler(Methods.TextDocumentDidOpen,             TextDocumentDidOpenHandler);
      _reader.RegisterHandler(Methods.TextDocumentDidClose,            TextDocumentDidCloseHandler);
      _reader.RegisterHandler(Methods.TextDocumentDidChange,           TextDocumentDidChangeHandler);
      _reader.RegisterHandler(Methods.TextDocumentDidSave,             TextDocumentDidSaveHandler);
      _reader.RegisterHandler(Methods.TextDocumentDocumentHighlight,   TextDocumentDocumentHighlightHandler);
      _reader.RegisterHandler(Methods.TextDocumentReferences,          TextDocumentReferencesHandler);
      _reader.RegisterHandler(Methods.TextDocumentHover,               TextDocumentHoverHandler);
      _reader.RegisterHandler(Methods.TextDocumentCompletion,          TextDocumentCompletionHandler);
      _reader.RegisterHandler(Methods.TextDocumentDefinition,          TextDocumentDefinition);
    }

    public Dispose() : void
    {
      _input?.Dispose();
      _output?.Dispose();
    }

    public Receive() : Seq[ClientMessage]
    {
      using (e = _reader.ReadRequests().GetEnumerator())
      {
        mutable processRequests = true;
        do
        {
          def result = nextResult:
          {
            try
              when (e.MoveNext())
                nextResult(e.Current);
            catch
            {
              | _ is EndOfStreamException    => ()
              | e is JsonException           => WriteError(null, LspErrorCode.ParseError, e.Message)
              | e is InvalidRequestException => WriteError(null, LspErrorCode.InvalidRequest, e.Message)
              | e is Exception               => WriteError(null, LspErrorCode.InternalError, e.ToString())
            }

            processRequests = false;
            HandlerResult.Unit(null, [ClientMessage.Shutdown()]);
          };

          when (result.Messages != null)
            foreach (message in result.Messages)
              yield message;

          match (result)
          {
            | Unit                   => ()
            | Response(body)         => WriteResult(result.Id, body)
            | Error(code, message)   => WriteError(result.Id, code, message)
          }
        }
        while (processRequests)
      }
    }

    public Send(message : ServerMessage) : void
    {
      | FindSymbolDefinitions(_solutionId, _span, symbols, tag) => CompleteRequest(tag, symbols)
      | FindSymbolReferences (_solutionId, _span, symbols, tag) => CompleteRequest(tag, symbols)
      | _ => ()
    }

    public Send(message : AsyncServerMessage) : void
    {
      | FindSymbolReferences(_span, symbols, tag) => CompleteRequest(tag, symbols)
      | Hint(text, _span, tag)                    => CompleteRequest(tag, text)
      | CompleteWord(_span, completionList)       => CompleteWord(completionList, Interlocked.Exchange(ref pendingCompletionId, null))
      | _ => ()
    }

    private UnknownHandler(method : string, id : object) : HandlerResult
    {
      if (id == null)
        HandlerResult.Unit()
      else
        HandlerResult.Error(id, null, LspErrorCode.MethodNotFound, method)
    }

    private CancelRequestHandler(p : CancelParams) : HandlerResult
    {
      HandlerResult.Unit()
    }

    private InitializeHandler(p : InitializeParams, id : object) : HandlerResult
    {
      def result = InitializeResult() <-
      {
        Capabilities = ServerCapabilities() <-
        {
          TextDocumentSync = TextDocumentSyncOptions() <-
            {
              OpenClose = true;
              Change = TextDocumentSyncKind.Incremental;
              Save = SaveOptions() <- { IncludeText = false }
            };
          DefinitionProvider = true;
          ReferencesProvider = true;
          DocumentHighlightProvider = true;
          CompletionProvider = CompletionOptions() <- { ResolveProvider = false };
          HoverProvider = true
        }
      };

      def messages =
        if (!string.IsNullOrEmpty(p.RootPath) && IO.Directory.Exists(p.RootPath))
        {
          def options = (p.InitializationOptions :> JObject).ToObject.[InitializationOptions]();
          LoadSolution(p.RootPath, SolutionId(0), ProjectId(0), options)
        }
        else
          null;

      HandlerResult.Response(id, messages, result);
    }

    private InitializedHandler(_ : InitializedParams) : HandlerResult
    {
      HandlerResult.Unit()
    }

    private ShutdownHandler(_ : object, id : object) : HandlerResult
    {
      HandlerResult.Response(id, null, null)
    }

    private ExitHandler(_ : object) : HandlerResult
    {
      HandlerResult.Unit(null, [ClientMessage.Shutdown()])
    }

    private WorkspaceDidChangeConfigurationHandler(_ : DidChangeConfigurationParams) : HandlerResult
    {
      HandlerResult.Unit()
    }

    private TextDocumentDidOpenHandler(p : DidOpenTextDocumentParams) : HandlerResult
    {
      def document = p.TextDocument;
      HandlerResult.Unit(null, [ClientMessage.FileActivated(_projectId, GetFileId(document.Uri), FileVersion(document.Version))])
    }

    private TextDocumentDidCloseHandler(p : DidCloseTextDocumentParams) : HandlerResult
    {
      HandlerResult.Unit(null, [ClientMessage.FileDeactivated(_projectId, GetFileId(p.TextDocument.Uri))])
    }

    private static ToStringDidChangeTextDocumentParamsToString(msg : DidChangeTextDocumentParams) : string
    {
      $<#DidChangeTextDocumentParams(
Version: $(msg.TextDocument.Version)  Uri: '$(msg.TextDocument.Uri)'
..$(msg.ContentChanges; "\r\n"; TextDocumentContentChangeEventToString)#>
    }

    private static TextDocumentContentChangeEventToString(change :  TextDocumentContentChangeEvent) : string
    {
      def r = change.Range;
      r.Start.Line + ":" + r.Start.Character + "#" + r.End.Line + ":" + r.End.Character + " «" + change.Text + "»"
    }

    private TextDocumentDidChangeHandler(p : DidChangeTextDocumentParams) : HandlerResult
    {
      Log.Message($"LSP $(ToStringDidChangeTextDocumentParamsToString(p))");

      def document = p.TextDocument;
      def changes  = p.ContentChanges;
      def fileId   = GetFileId(document.Uri);
      def version  = FileVersion(document.Version ?? -1);
      def message  =
        if (changes.Length == 1)
        {
          ClientMessage.FileChanged(fileId, version, Convert(changes[0]), VersionedPos(Convert(changes[0].Range.End), version))
        }
        else
        {
          ClientMessage.FileChangedBatch(fileId, version, Array.ConvertAll(changes, Convert).ToImmutableArray(), VersionedPos.Invalid);
        }

      HandlerResult.Unit(null, [message])
    }

    private TextDocumentDidSaveHandler(_ : DidSaveTextDocumentParams) : HandlerResult
    {
      HandlerResult.Unit()
    }

    private TextDocumentDocumentHighlightHandler(p : TextDocumentPositionParams, id : object) : HandlerResult
    {
      def document = p.TextDocument;
      def fileId   = GetFileId(document.Uri);
      def position = VersionedPos(Convert(p.Position), FileVersion.Invalid);
      HandlerResult.Unit(id, [ClientMessage.FindSymbolReferences(_projectId, fileId, position, true,
        RegisterRequest(id, DocumentHighlight))])
    }

    private TextDocumentReferencesHandler(p : ReferenceParams, id : object) : HandlerResult
    {
      def document = p.TextDocument;
      def fileId   = GetFileId(document.Uri);
      def position = VersionedPos(Convert(p.Position), FileVersion.Invalid);
      HandlerResult.Unit(id, [ClientMessage.FindSymbolReferences(_projectId, fileId, position, false,
        RegisterRequest(id, FindReferences(_, _, p.Context.IncludeDeclaration)))])
    }

    private TextDocumentHoverHandler(p : TextDocumentPositionParams, id : object) : HandlerResult
    {
      def document = p.TextDocument;
      def fileId   = GetFileId(document.Uri);
      def position = VersionedPos(Convert(p.Position), FileVersion.Invalid);
      HandlerResult.Unit(id, [ClientMessage.GetHint(_projectId, fileId, position,
        RegisterRequest(id, ShowHint(_, _, p.Position)))]);
    }

    private TextDocumentCompletionHandler(p : CompletionParams, id : object) : HandlerResult
    {
      def document = p.TextDocument;
      def fileId   = GetFileId(document.Uri);
      def position = VersionedPos(Convert(p.Position), FileVersion.Invalid);
      def messages = [ClientMessage.CompleteWord(_projectId, fileId, position)];
      def oldCompletionId = Interlocked.Exchange(ref pendingCompletionId, id);
      if (oldCompletionId != null)
        HandlerResult.Error(oldCompletionId, messages, LspErrorCode.RequestCancelled, "")
      else
        HandlerResult.Unit(id, messages)
    }

    private TextDocumentDefinition(p : TextDocumentPositionParams, id : object) : HandlerResult
    {
      def document        = p.TextDocument;
      def fileId          = GetFileId(document.Uri);
      def position        = VersionedPos(Convert(p.Position), FileVersion.Invalid);
      def messages        = [ClientMessage.FindSymbolDefinitions(_projectId, fileId, position, RegisterRequest(id, FindDefinitions(_, _)))];
      def oldCompletionId = Interlocked.Exchange(ref pendingCompletionId, id);
      if (oldCompletionId != null)
        HandlerResult.Error(oldCompletionId, messages, LspErrorCode.RequestCancelled, "")
      else
        HandlerResult.Unit(id, messages)
    }

    private WriteError(id : object, code : LspErrorCode, message : string) : void
    {
      lock (_writer)
        _writer.WriteError(id, code, message)
    }

    private WriteResult(id : object, body : object) : void
    {
      lock (_writer)
        _writer.WriteResult(id, body)
    }

    private LoadSolution(path : string, solutionId : SolutionId, projectId : ProjectId, options : InitializationOptions) : Seq[ClientMessage]
    {
      yield ClientMessage.SolutionStartLoading(solutionId, path);
      yield ClientMessage.ProjectStartLoading(projectId, path, options.Config);

      foreach (reference in options.References)
        yield ClientMessage.ReferenceLoaded(projectId, reference);

      foreach (filePath in IO.Directory.EnumerateFiles(path, "*" + options.FileExtension, IO.SearchOption.AllDirectories))
      {
        def id = GetFileId(filePath);
        def version = FileVersion(1);
        yield ClientMessage.FileLoaded(projectId, filePath, id, version, false, null);
      }

      yield ClientMessage.ProjectLoaded(projectId);
      yield ClientMessage.SolutionLoaded(solutionId);
    }

    private DocumentHighlight(symbols : ImmutableArray[SymbolReferences], id : object) : void
    {
      def result = List();
      foreach ((range, _) in ConvertRanges(symbols, true))
      {
        result.Add(DocumentHighlight() <-
        {
          Range = range;
          Kind = DocumentHighlightKind.Text
        });
      }
      WriteResult(id, result);
    }

    private FindReferences(symbols : ImmutableArray[SymbolReferences], id : object, includeDeclaration : bool) : void
    {
      def result = List();
      foreach ((range, fileId) in ConvertRanges(symbols, includeDeclaration))
      {
        result.Add(LSP.Location() <-
        {
          Range = range;
          Uri = _fileIdToUriTable[fileId]
        });
      }
      WriteResult(id, result);
    }

    private FindDefinitions(symbols : ImmutableArray[SymbolLocation], id : object) : void
    {
      def result = List();
      foreach ((range, fileId) in ConvertRanges(symbols))
      {
        result.Add(LSP.Location() <-
        {
          Range = range;
          Uri = _fileIdToUriTable[fileId]
        });
      }
      WriteResult(id, result);
    }

    private ShowHint(text : string, id : object, position : LSP.Position) : void
    {
      WriteResult(id, Hover() <-
      {
        Contents = new (language = "markdown", value = HintMlToMarkdown(text)); // TODO: transform XML to Markdown
        Range    = LSP.Range() <- { Start = position; End = LSP.Position(position.Line, position.Character + 1) }
      });
    }

    private static HintMlToMarkdown(text : string) : string
    {
      text
    }

    private CompleteWord(completionList : ImmutableArray[CompletionElem], id : object) : void
    {
      def result = List();
      foreach (x in completionList)
      {
        result.Add(LSP.CompletionItem() <-
        {
          Label = x.Text
        });
      }
      WriteResult(id, result);
    }

    private Convert(range : Messages.Range) : LSP.Range
    {
      Range() <-
      {
        Start = Position() <- { Line = range.StartLine - 1; Character = range.StartColumn - 1 };
        End   = Position() <- { Line = range.EndLine   - 1; Character = range.EndColumn   - 1 }
      }
    }

    private ConvertRanges(symbols : ImmutableArray[SymbolLocation]) : Seq[LSP.Range * FileId]
    {
      foreach (s in symbols)
      {
        def loc = s.Location;
        yield (Convert(loc.Range), loc.File.FileId);
      }
    }

    private ConvertRanges(symbols : ImmutableArray[SymbolReferences], includeDeclaration : bool) : Seq[LSP.Range * FileId]
    {
      foreach (s in symbols)
      {
        when (includeDeclaration)
        {
          foreach (d in s.Definitions)
            yield (Convert(d.Location.Range), d.Location.File.FileId);
        }

        foreach (r in s.References)
        foreach (g in r.Ranges)
          yield (Convert(g), r.File.FileId);
      }
    }

    private GetFileId(path : string) : FileId
    {
      GetFileId(Uri(path, UriKind.Absolute))
    }

    private GetFileId(uri : Uri) : FileId
    {
      def id = _uriToFileIdTable.GetOrAdd(uri, fun(_){ FileId(Interlocked.Increment(ref _fileCounter)) });
      _ = _fileIdToUriTable.GetOrAdd(id, uri);
      id
    }

    private static Convert(c : TextDocumentContentChangeEvent) : FileChange
    {
        def newText = c.Text;
        if (c.RangeLength == 0 && !string.IsNullOrEmpty(newText))
          FileChange.Insert(Convert(c.Range.Start), newText)
        else if (c.RangeLength > 0 && string.IsNullOrEmpty(c.Text))
          FileChange.Delete(Convert(c.Range))
        else
          FileChange.Replace(Convert(c.Range), c.Text)
    }

    private static Convert(p : Position) : UIPosition
    {
      UIPosition.LineCharacter(p.Line + 1, p.Character + 1)
    }

    private static Convert(p : LSP.Range) : UISpan
    {
      UISpan(Convert(p.Start), Convert(p.End))
    }

    private RegisterRequest[TResponse](id : object, completionHandler : Action[TResponse, object]) : uint
    {
      def tag = unchecked (Interlocked.Increment(ref _tagCounter) :> uint);
      _requestTable[tag] = (id, completionHandler);
      tag
    }

    private CompleteRequest[TResponse](tag : uint, response : TResponse) : void
    {
      mutable result;
      when (_requestTable.TryRemove(tag, out result))
      {
        def completionHandler = result[1] :> Action[TResponse, object];
        completionHandler(response, result[0])
      }
    }

    [Record]
    private variant HandlerResult
    {
      public Id       : object;
      public Messages : Seq[ClientMessage];

      | Unit     { public this() { base(null, null) } }
      | Response { Body : object }
      | Error    { Code : LspErrorCode; Message : string }
    }

    private class InitializationOptions
    {
      public Config : Config { get; set; }

      public FileExtension : string { get; set; }

      public References : array[string] { get; set; }
    }
  }
}
