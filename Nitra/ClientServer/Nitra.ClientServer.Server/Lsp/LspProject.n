using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;
using Nitra.Logging;

using System;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Server.Lsp
{
  internal class LspProject
  {
    private _router            : Router;
    public ProjectId           : ProjectId;
    public Solution            : LspSolution;
    public RootPath            : string;
    public IsSingleFileProject : bool;

    /// 0 - not opened; > 0 - opened in editor
    private _isFileOpen       : Dictionary[FileId, bool] = Dictionary();
    private _watchers         : Dictionary[string, FileSystemWatcher] = Dictionary();
    private _fileExtensionSet : HashSet[string];
    private _config           : Config;

    public this(rootPath : string, router  : Router, projectId : ProjectId, solution  : LspSolution, config : Config)
    {
      _fileExtensionSet = HashSet(solution.FileExtensions, StringComparer.OrdinalIgnoreCase);
      IsSingleFileProject = _fileExtensionSet.Contains(Path.GetExtension(rootPath));
      def isDirSeparator(ch : char) : bool { ch == Path.AltDirectorySeparatorChar || ch == Path.DirectorySeparatorChar }
      RootPath  = Path.GetFullPath(if (IsSingleFileProject || rootPath.Length > 0 && isDirSeparator(rootPath[rootPath.Length - 1])) rootPath else (rootPath + '/'));
      _router   = router;
      ProjectId = projectId;
      Solution  = solution;
      _config   = config;

      def path = rootPath;

      _router.AddMessage(ClientMessage.ProjectStartLoading(projectId, path, config));

      foreach (reference in GetReferences())
        _router.AddMessage(ClientMessage.ReferenceLoaded(projectId, reference));

      foreach (filePath in GetFiles(GetWatchedPaths()))
        LoadFile(Solution.GetFileId(filePath), filePath);

      _router.AddMessage(ClientMessage.ProjectLoaded(projectId));
    }

    public Name : string { get { Path.GetFileName(RootPath) } }

    private GetReferences() : array[string]
    {
      _config.References
    }

    public GetWatchedPatterns() : Seq[string]
    {
      if (File.Exists(RootPath))
        yield RootPath;
      else foreach (ext in _fileExtensionSet)
        yield @"**\*" + ext;
    }

    private GetWatchedPaths() : Seq[string]
    {
      // TODO: Read paths from .vscode/tasks.json
      // TODO: Add support wildcards
      yield RootPath
    }

    public IsMatchProject([NotNull] filePath : string) : bool
    {
      // TODO: Add support of .vscode/tasks.json
      if (IsSingleFileProject)
        filePath.Equals(RootPath, StringComparison.OrdinalIgnoreCase)
      else
        filePath.StartsWith(RootPath, ignoreCase=true, culture=CultureInfo.InstalledUICulture)
    }

    public DidOpenFileForEditing(fileId : FileId, version : FileVersion, path : string, text : string) : void
    {
      mutable isOpenedForEditing;
      def isLoaded = _isFileOpen.TryGetValue(fileId, out isOpenedForEditing);

      when (isLoaded)
        assert2(!isOpenedForEditing);

      _isFileOpen[fileId] = true;

      def projectId = ProjectId;

      when (isLoaded)
        _router.AddMessage(ClientMessage.FileUnloaded(projectId, fileId));
      _router.AddMessage(ClientMessage.FileLoaded(projectId, path, fileId, version, hasContent=true, contentOpt=text));
      _router.AddMessage(ClientMessage.FileActivated(projectId, fileId, version));
    }

    public DidClose(fileId : FileId) : void
    {
      mutable isOpenedForEditing;
      def isLoaded = _isFileOpen.TryGetValue(fileId, out isOpenedForEditing);
      unless (isLoaded)
        return;

      assert2(isOpenedForEditing);
      _isFileOpen[fileId] = false;
      _router.AddMessage(ClientMessage.FileDeactivated(ProjectId, fileId));
    }

    public LoadFile(fileId : FileId, filePath : string) : void
    {
      mutable isOpenedForEditing;
      def isLoaded = _isFileOpen.TryGetValue(fileId, out isOpenedForEditing);

      when (isOpenedForEditing)
        return; // file loaded by editor (before)


      _isFileOpen[fileId] = false;
      when (isLoaded)
        _router.AddMessage(ClientMessage.FileUnloaded(ProjectId, fileId));
      _router.AddMessage(ClientMessage.FileLoaded(ProjectId, filePath, fileId, version = FileVersion(1), hasContent = false, contentOpt = null));
    }

    ///// Do not call this method on close file (onli on deleting file)!
    //public UnregistrFile(fileId : FileId) : void
    //{
    //  unless (_files.Remove(fileId))
    //    return;
    //
    //  _router.AddMessage(ClientMessage.FileUnloaded(ProjectId, fileId));
    //}

    public IsFileInProject(fileId : FileId) : bool { _isFileOpen.ContainsKey(fileId) }

    private GetFiles(watchedPaths : Seq[string]) : Seq[string]
    {
      foreach (watchedPath in watchedPaths)
      {
        if (IO.File.Exists(watchedPath))
          yield watchedPath;
        else
          foreach (fileExtension in Solution.FileExtensions)
            foreach (file in IO.Directory.EnumerateFiles(watchedPath, "*" + fileExtension, IO.SearchOption.AllDirectories))
              yield file;
      }
    }

    public IsSupportedFile(filePath : string) : bool { _fileExtensionSet.Contains(Path.GetExtension(filePath), StringComparer.OrdinalIgnoreCase) }

    public OnCreatedFile(fileId : FileId) : void
    {
      mutable isOpenedForEditing;
      def path      = Solution.GetFilePath(fileId);
      def projectId = this.ProjectId;
      def isLoaded  = _isFileOpen.TryGetValue(fileId, out isOpenedForEditing);
      Log.Message($<#LSP LspProject.OnCreatedFile(ProjectId=$projectId fileId=$fileId, isLoaded=$isLoaded isOpenedForEditing=isOpenedForEditing path=$path RootPath=$RootPath)#>, ConsoleColor.DarkCyan);

      when (isLoaded)
        return;

      _router.AddMessage(ClientMessage.FileLoaded(projectId, path, fileId, FileVersion(1), hasContent=false, contentOpt=null));
      _isFileOpen[fileId] = false;
    }

    public OnDeletedFile(fileId : FileId) : void
    {
      mutable isOpenedForEditing;
      def path      = Solution.GetFilePath(fileId);
      def projectId = this.ProjectId;
      def isLoaded  = _isFileOpen.TryGetValue(fileId, out isOpenedForEditing);
      Log.Message($<#LSP LspProject.OnDeletedFile(ProjectId=$projectId fileId=$fileId, isLoaded=$isLoaded isOpenedForEditing=isOpenedForEditing path=$path RootPath=$RootPath)#>, ConsoleColor.DarkCyan);

      when (isOpenedForEditing)
        _router.AddMessage(ClientMessage.FileDeactivated(ProjectId, fileId));

      when (isLoaded)
        _router.AddMessage(ClientMessage.FileUnloaded(projectId, fileId));

      def removed = _isFileOpen.Remove(fileId);
      assert2(removed);
    }

    public OnExternallyChangedFile(fileId : FileId) : void
    {
      mutable isOpenedForEditing;
      def path      = Solution.GetFilePath(fileId);
      def projectId = this.ProjectId;
      def isLoaded  = _isFileOpen.TryGetValue(fileId, out isOpenedForEditing);
      Log.Message($<#LSP LspProject.OnExternallyChangedFile(ProjectId=$projectId fileId=$fileId, isLoaded=$isLoaded isOpenedForEditing=isOpenedForEditing path=$path RootPath=$RootPath)#>, ConsoleColor.DarkCyan);
      when (isOpenedForEditing)
        return;
      when (!isLoaded)
        return;
      _router.AddMessage(ClientMessage.FileUnloaded(projectId, fileId));
      _router.AddMessage(ClientMessage.FileLoaded(projectId, path, fileId, FileVersion(1), hasContent=false, contentOpt=null));
    }

    public override ToString() : string { Name }
  }
}
