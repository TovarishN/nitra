using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;

using System;
using System.Threading;
using System.Globalization;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;

using IO = System.IO;

namespace Nitra.ClientServer.Server
{
  internal partial class Router
  {
    /// Messages from client. Called in Router thread.
    OnClientMessage(serverMsg : ClientMessage) : void
    {
      | ClientMessage.CheckVersion(assemblyVersionGuid) =>
        if (Constants.AssemblyVersionGuid == assemblyVersionGuid)
          ServerUtils.Log("Client version checked.");
        else
        {
          def asm = typeof(Message);
          ServerUtils.Log($"Incorrect version of messaging assembly: '$(asm.Assembly.Location)'.");
          Environment.Exit(42);
        }
      | SolutionStartLoading(id, fullPath)              => assert2(_solution == null); SpanClassesManager.Clear(); _solution = Solution(id, fullPath);
      | SolutionLoaded(id)                              => assert2(_solution.Id == id); _solution.Open();
      | SolutionUnloaded(id)                            => assert2(_solution.Id == id); _solution.Dispose(); _solution = null;
      | ProjectStartLoading(id, fullPath, config)       => _ = Project(_solution, fullPath, id, config, _parseQueue, this);
      | ProjectLoaded      (id)                         => _solution[id].Open(); ServerUtils.Log("ProjectLoaded", ConsoleColor.DarkGray);
      | ProjectUnloaded    (id)                         => _solution.RemoveProject(id);
      | ProjectRename      (oldId, newId, newPath)      => ServerUtils.Log("Not supported yet.");
      | ReferenceLoaded    (projectId, fullPath)        => _solution[projectId].AddLib(fullPath);
      | ReferenceUnloaded  (projectId, fullPath)        => _solution[projectId].RemoveLib(fullPath);
      | ProjectReferenceLoaded                          => assert(false)
      | ProjectReferenceUnloaded                        => assert(false)
      | FileLoaded         (projectId, fullPath, id, v) => File(id, fullPath, v, _solution[projectId]).TrySendParseMessage();
      | FileReparse        (id)                         => _solution.GetFile(id).TrySendParseMessage();
      | FileInMemoryLoaded (projectId, id, name, text)  => File(id, name, _solution[projectId], text).TrySendParseMessage();
      | FileActivated      (id)                         => _solution.GetFile(id).Activate();
      | FileDeactivated    (id)                         => _solution.GetFile(id).Deactivate();
      | FileUnloaded       (id)                         => _solution.GetFile(id).Parent.RemoveFile(id);
      | FileRenamed        (oldId, newId, newPath)      => _solution.GetFile(oldId).RenameFile(newId, newPath);
      | FileChanged        (id, version, change)        => _solution.GetFile(id).Change(version, change);
      | FileChangedBatch   (id, version, changes)       => _solution.GetFile(id).Change(version, changes);
      | PrettyPrint        (state)                      => PrettyPrintState = state; ServerUtils.Log("PrettyPrint(" + state + ")");
      | CompleteWord       (id, version, pos)           => _solution.GetFile(id).CompleteWord(version, pos);
      | FindSymbolReferences (fileId, fileVersion, pos) => _solution.GetFile(fileId).FindSymbolReferences(fileVersion, pos, forHighlighting=false);
      | FindSymbolDefinitions(fileId, fileVersion, pos) => _solution.GetFile(fileId).FindSymbolDefinitions(fileVersion, pos);
      | ParseTreeReflection(state)                      => IsParseTreeReflectionEnable = state;
      | GetObjectContent(solutionId, id, ver, parentId) => _solution.GetFile(id).GetObjectContent(solutionId, ver, parentId);
      | AttachDebugger                                  => _ = Debugger.Launch();
      | GetLibsMetadata(libs)                           => GetLibsMetadata(libs)
      | GetLibsSyntaxModules(libs)                      => GetLibsSyntaxModules(libs)
      | GetLibsProjectSupports(libs)                    => GetLibsProjectSupports(libs)
      | GetFileExtensions(projectId, languageNames)     => GetFileExtensions(projectId, languageNames)
      | SetCaretPos(fileId, fileVersion, pos)           => _solution.GetFile(fileId).SetCaretPos(fileVersion, pos);
      | GetHint(fileId, fileVersion, pos)               => _solution.GetFile(fileId).GetHint(fileVersion, pos);
      | GetSubHint(projectId, symbolId)                 => _solution[projectId].GetSymbolHint(symbolId);
      | Shutdown                                        =>
        ServerUtils.Log("Shutdown");
        _mainQueue.CompleteAdding();
        _cts.Cancel();
        _solution?.Dispose();
    }
  }
}
