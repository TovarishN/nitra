using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Threading;

using SCG = System.Collections.Generic;

namespace Nitra.ClientServer.Server
{
  module ServerUtils
  {
    _sync : object = object();
    _emptyArray : array[Messages.CompilerMessage] = array(0);
    
    public ConvertCompilerMessages(source : Messages.CompilerMessageSource, compilerMessages : Seq[Nitra.ProjectSystem.CompilerMessage]) : array[Messages.CompilerMessage]
    {
      def count = compilerMessages.Count();
      
      when (count == 0)
        return _emptyArray;
            
      def result = array(count) : array[Messages.CompilerMessage];

      foreach (cm in compilerMessages with i)
      {
        def convertType(t : Nitra.CompilerMessageType) : Messages.CompilerMessageType
        {
          | FatalError => Messages.CompilerMessageType.FatalError
          | Error      => Messages.CompilerMessageType.Error     
          | Warning    => Messages.CompilerMessageType.Warning   
          | Hint       => Messages.CompilerMessageType.Hint                   
        }
        def t      = convertType(cm.Type);
        def loc    = ConvertLocation(cm.Location, withText=false);
        def nested = 
          if (cm.HasNestedMessages)
            ConvertCompilerMessages(source, cm.NestedMessages).NToList()
          else
            [];
              
        def x = Messages.CompilerMessage(t, loc, cm.Text, cm.Number, source, nested);
        result[i] = x;
      }
          
      result
    }
    
    public ConvertLocation(loc : Nitra.Location, withText : bool) : Messages.Location
    {
      def source = loc.Source;
      def fileId = if (source.File is File as file) file.FileId else FileId(-1);
      Messages.Location(FileIdentity(fileId, FileVersion(source.Version)), ConvertToRange(loc, withText && fileId.IsValid))
    }

    public ConvertNSpan(span : Nitra.NSpan) : Messages.NSpan
    {
      Messages.NSpan(span.StartPos, span.EndPos)
    }
    
    public ConvertToRange(loc : Nitra.Location, withText : bool) : Messages.Range
    {
      def start = loc.StartLineColumn;
      def end   = loc.EndLineColumn;
      def text  = if (withText) loc.Source.GetSourceLine(loc.Span.StartPos).GetText() else null;
      Messages.Range(ConvertNSpan(loc.Span), start.Line, start.Column, end.Line, end.Column, text)
    }
    
    public Padding(str : string, len : int, ch : char = ' ') : string
    {
      def count = len - str.Length;
      if (str.Length >= len) str else (string(ch, count) + str)
    }

    public PaddingBehind(str : string, len : int, ch : char = ' ') : string
    {
      def count = len - str.Length;
      if (str.Length >= len) str else str + (string(ch, count))
    }
    
    public LogMsgHandled(msg : string, timer : Stopwatch, millisecondToTimeout : int) : void
    {
      timer.Stop();
      def elapsed         = timer.Elapsed;
      def timeoutExceeded = elapsed.Milliseconds >= millisecondToTimeout;
      def milliseconds    = Padding(elapsed.TotalMilliseconds.ToString("0.0000"), 9);
      def msg2            = PaddingBehind(msg, 40, '.');
      def color           = if (timeoutExceeded) ConsoleColor.Yellow else ConsoleColor.Green;
      def threadId        = Padding(Thread.CurrentThread.ManagedThreadId.ToString(), 3);
      def msg3            = msg2 + "took: " + milliseconds + " ms  ThreadId:" + threadId;
    
      lock (_sync)
      {
        Console.ForegroundColor = color;
        Console.WriteLine(msg3);
        Console.ResetColor();
      }
    }

    public LogCanceled(e : OperationCanceledException) : void
    {
      lock (_sync)
      {
        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine(e.Message);
        Console.ResetColor();
      }
    }
    
    public LogException(asyncResponseWriter : IO.BinaryWriter, e : Exception) : void
    {
      def msg = AsyncServerMessage.Exception(FileId.Invalid, FileVersion.Invalid, SolutionId.Invalid, e.ToString());
      lock (asyncResponseWriter)
        msg.Serialize(asyncResponseWriter);

      LogException(e);
    }

    public LogException(e : Exception) : void
    {
      lock (_sync)
      {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine("Exception: " + e);
        Console.ResetColor();
      }
    }
    
    public Log(msg : string) : void
    {
      lock (_sync)
      {
        Console.WriteLine(msg)
      }
    }
    
    public Log(msg : string, color : ConsoleColor) : void
    {
      lock (_sync)
      {
        Console.ForegroundColor = color;
        Console.WriteLine(msg);
        Console.ResetColor();
      }
    }
    
    public GetCoreCount() : int
    {
      mutable coreCount = 0;
      foreach (item in System.Management.ManagementObjectSearcher("Select * from Win32_Processor").Get())
        coreCount += int.Parse(item["NumberOfCores"].ToString());
      coreCount
    }
    
    public LoadAssembly(path : string) : Assembly
    {
      // TODO: add chech GetReferencedAssemblies()
      // TODO: use shadow copying
      def assembly = 
        if (path.Contains(", Version="))
          Assembly.Load(path)
        else
          Assembly.LoadFrom(path);
      assembly
    }
  
    public SendCompilerMessages(parseResult : IParseResult, router : Router, solutionId : SolutionId, fileId : FileId) : void
    {
      def compilerMessages = parseResult.CompilerMessages :> Nitra.ProjectSystem.CompilerMessageList;
      def version          = FileVersion(parseResult.SourceSnapshot.Version);
      def cm               = ConvertCompilerMessages(CompilerMessageSource.Parsing, compilerMessages);
      router.SendAsyncResponse(AsyncServerMessage.ParsingMessages(fileId, version, solutionId, cm));
    }
  }
}
