using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Server
{
  class LoggerWorker : IDisposable
  {
    static _queue   : BlockingCollection[string * ConsoleColor] = BlockingCollection();
    static mutable _logFile : StreamWriter;
    static mutable _date : string;
    
    _thread  : Thread;
    _cts     : CancellationTokenSource = CancellationTokenSource();

    public this()
    {
      assert2(_logFile == null, "Only one logger instance can be created!");
      def programDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      _date               = DateTime.Now.ToString("yyyy-dd-MM_HH-mm-ss");
      def logDir          = Path.Combine(programDataPath, "RSDN", "Nitra");
      def logPath         = Path.Combine(logDir, $"Nitra.ClientServer.Server-$_date.html");
      unless (Directory.Exists(logDir))
        _ = Directory.CreateDirectory(logDir);
      _logFile            = StreamWriter(logPath);
      _thread             = Thread(ParseWorkerMain);
      _thread.Priority    = ThreadPriority.BelowNormal;
      _thread.Start();
    }

    public static Log(msg : string, color : ConsoleColor) : void
    {
      _queue.Add((msg, color));
    }

    ParseWorkerMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "Logger Worker";
      thread.CurrentCulture = CultureInfo.InvariantCulture;
      def header = $<#<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Nitra $_date</title>
<style>
body {
  background-color: black;
  text-align: left;
  font-family: Consolas, Monaco, monospace;
  white-space: pre;
}
</style>
</head>

<body>#>;
      
      try
      {
        _logFile.WriteLine(header);
        foreach((msg, color) in _queue.GetConsumingEnumerable(_cts.Token))
        {
          try
            WriteMessage(msg, color);
          catch
          {
            | e is OperationCanceledException => ServerUtils.LogCanceled(e);
            | e => ServerUtils.LogException(e);
          }
        }
      }
      catch
      {
        | e is OperationCanceledException => ServerUtils.LogCanceled(e);
        | e => ServerUtils.LogException(e);
      }
      finally
      {
        _logFile.WriteLine("</body>\r\n</html>");
        _logFile.Close();
      }
    }

    static TranslateColor(color : ConsoleColor) : string
    {
		  | Black       => "Black"
		  | DarkBlue    => "DarkBlue"
		  | DarkGreen   => "DarkGreen"
		  | DarkCyan    => "DarkCyan"
		  | DarkRed     => "DarkRed"
		  | DarkMagenta => "DarkMagenta"
		  | DarkYellow  => "olive"
		  | Gray        => "Gray"
		  | DarkGray    => "DarkGray"
		  | Blue        => "Blue"
		  | Green       => "limegreen"
		  | Cyan        => "Cyan"
		  | Red         => "Red"
		  | Magenta     => "Magenta"
		  | Yellow      => "Yellow"
		  | White       => "White"
    }
    
    WriteMessage(msg : string, color : ConsoleColor) : void
    {
      _logFile.Write(<#<span style="color:#>);
      _logFile.Write(TranslateColor(color));
      _logFile.Write(<#">#>);
      _logFile.Write(msg);
      _logFile.WriteLine(<#</span>#>);
      when (_queue.Count == 0)
        _logFile.Flush();
      Console.ForegroundColor = color;
      Console.WriteLine(msg);
      Console.ResetColor();
    }
    
    public Dispose() : void
    {
      _cts.Cancel();
      _cts.Dispose();
      _thread.Join();
    }
  } // class
} // namespace
