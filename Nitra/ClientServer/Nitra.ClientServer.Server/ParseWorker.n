using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ServerUtils;
using Nitra.Declarations;
using Nitra.PrettyPrint;
using Nitra.ProjectSystem;

using System;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;

using SCG = System.Collections.Generic;
using R   = Nitra.Runtime.Reflection;

namespace Nitra.ClientServer.Server
{
  class ParseWorker : IDisposable
  {
    _thread              : Thread;
    _cts                 : CancellationTokenSource = CancellationTokenSource();
    _incomeQueue         : BlockingCollection[ParserMessage];
    _mainQueue           : BlockingCollection[RouterMessage];
    _asyncResponseWriter : BinaryWriter;
    _spanClassesManager  : SpanClassesManager;
    _router              : Router;
    
    
    public this(router : Router, incomeQueue : BlockingCollection[ParserMessage], mainQueue : BlockingCollection[RouterMessage], responseWriter : BinaryWriter, spanClassesManager : SpanClassesManager)
    {
      _router              = router;
      _mainQueue           = mainQueue;
      _incomeQueue         = incomeQueue;
      _asyncResponseWriter = responseWriter;
      _spanClassesManager  = spanClassesManager;
      _thread              = Thread(ParseWorkerMain);
      _thread.Start();
    }

    SendAsyncResponse(msg : AsyncServerMessage) : void
    {
      lock (_asyncResponseWriter)
        msg.Serialize(_asyncResponseWriter);
    }

    ParseWorkerMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "Parse Worker";
      thread.CurrentCulture = CultureInfo.InvariantCulture;
      while (!_mainQueue.IsCompleted)
      {
        try
        {
          foreach(m in _incomeQueue.GetConsumingEnumerable(_cts.Token)) 
          {
            try
              ProcessMessage(m)
            catch
            {
              | e is OperationCanceledException => ServerUtils.LogCanceled(e);
              | e => ServerUtils.LogException(_asyncResponseWriter, e);
            }
          }
        }
        catch
        {
          | e is OperationCanceledException => ServerUtils.LogCanceled(e);
          | e => ServerUtils.LogException(_asyncResponseWriter, e);
        }
      }
    }      
    
    ProcessMessage(msg : ParserMessage) : void
    {
      | ParseFile(fileId, parseSession, source) =>
        ServerUtils.Log("ParseFile " + fileId);
        def timer = Stopwatch.StartNew();
        // TODO: add statistics
        //def stat = Statistics;
        //stat?.Parse?.Restart();
        //
        //_parseMessages.Clear();
        //_astMessages.Clear();
        //_typingMessages.Clear();
      
        when (parseSession.CancellationToken.IsCancellationRequested)
          return;

        def parseResult = parseSession.Parse(source);
        _mainQueue.Add(RouterAnswerMessage.FileParsed(fileId, parseResult));

        def compilerMessages = parseResult.CompilerMessages :> CompilerMessageList;
        def version          = parseResult.SourceSnapshot.Version;
        def cm = ConvertCompilerMessages(CompilerMessageSource.Parsing, compilerMessages);
        SendAsyncResponse(AsyncServerMessage.ParsingMessages(fileId, version, cm));
        
        //stat?.Parse?.Stop();
        ServerUtils.LogMsgHandled("ParseFile " + fileId + " Length=" + parseResult.SourceSnapshot.Text.Length, timer, 200);
      
      | CreateAst(fileId, parseResult, isActive) =>
        ServerUtils.Log("CreateAst " + fileId);
        def timer = Stopwatch.StartNew();
        when (parseResult.ParseSession.CancellationToken.IsCancellationRequested)
          return;
          
        def parseTree = parseResult.CreateParseTree();
        def mappingMessages = CompilerMessageList();
        def ast = AstContext.GetAstUntyped(parseTree, mappingMessages);
        _mainQueue.Add(RouterAnswerMessage.AstCreated(fileId, parseResult.ParseSession.CancellationToken, ast, parseTree));
        
        def version = parseResult.SourceSnapshot.Version;
        def cm      = ConvertCompilerMessages(CompilerMessageSource.Mapping, mappingMessages);
        SendAsyncResponse(AsyncServerMessage.MappingMessages(fileId, version, cm));
        
        ServerUtils.LogMsgHandled("CreateAst " + fileId, timer, 100);
        
        unless (isActive)
          return;

        def prettyPrintState = _router.PrettyPrintState;
        when (prettyPrintState != PrettyPrintState.Disabled)
          ProcessMessage(ParserMessage.CreatePrettyPrint(fileId, version, prettyPrintState, parseTree));
        when (_router.IsParseTreeReflectionEnable)
          ProcessMessage(ParserMessage.CreateParseTreeReflection(fileId, version, parseResult));
          
      | CreatePrettyPrint(fileId, version, prettyPrintState, parseTree) =>
        match (prettyPrintState)
        {
          | PrettyPrintState.Disabled => ()
          | PrettyPrintState.Html =>
            ServerUtils.Log("HtmlPrettyPrint " + fileId);
            def timer = Stopwatch.StartNew();
            def spanClasses = _spanClassesManager.GetSpanClasses();
            def htmlWriter = HtmlPrettyPrintWriter(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes, spanClasses, "missing", "debug", "garbage");
            parseTree.PrettyPrint(htmlWriter, 0, null);
            def text = htmlWriter.ToString();
            _router.SendAsyncResponse(AsyncServerMessage.PrettyPrintCreated(fileId, version, PrettyPrintState.Html, text));
            ServerUtils.LogMsgHandled("HtmlPrettyPrint " + fileId, timer, 100);
          
          | PrettyPrintState.Text =>
            ServerUtils.Log("TextPrettyPrint " + fileId);
            def timer = Stopwatch.StartNew();
            def text = parseTree.ToString(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes);
            _router.SendAsyncResponse(AsyncServerMessage.PrettyPrintCreated(fileId, version, PrettyPrintState.Text, text));
            ServerUtils.LogMsgHandled("TextPrettyPrint " + fileId, timer, 100);
        }
        
      | ParserMessage.CreateParseTreeReflection(fileId, version, parseResult) =>
        ServerUtils.Log("ParseTreeReflection " + fileId);
        def timer = Stopwatch.StartNew();
        def root  = parseResult.Reflect();
        def convertedRoot = ConvertParseTreeReflection(root, Hashtable());
        _router.SendAsyncResponse(AsyncServerMessage.ReflectionStructCreated(fileId, version, convertedRoot));
        ServerUtils.LogMsgHandled("ParseTreeReflection " + fileId, timer, 100);
      
      | SemanticAnalysisStart(projectId, cancellationToken, projectSupport, files, data) =>
        ServerUtils.Log($"SemanticAnalysisStart: ..$(files.Select(_.Title))");
        def timer = Stopwatch.StartNew();
        try
          projectSupport.RefreshProject(cancellationToken, files, data);
        catch
        {
          | e is OperationCanceledException => ServerUtils.LogCanceled(e); throw;
          | e => SendAsyncResponse(AsyncServerMessage.RefreshProjectFailed(-1, -1, e.ToString()));
        }
        _mainQueue.Add(RouterAnswerMessage.SemanticAnalysisFinished(projectId, cancellationToken));
        def empty = array(0);
        for (mutable i = 0; i < files.Length; i++)
        {
          def file = files[i];
          if (file.HasCompilerMessage)
          {
            def msgs = file.GetCompilerMessage();
            def cm   = ConvertCompilerMessages(CompilerMessageSource.SemanticAnalysis, msgs);
            SendAsyncResponse(AsyncServerMessage.SemanticAnalysisMessages(file.FileId, file.FileVersion, cm));
          }
          else
            SendAsyncResponse(AsyncServerMessage.SemanticAnalysisMessages(file.FileId, file.FileVersion, empty));
        }
        
        ServerUtils.LogMsgHandled("SemanticAnalysisStart", timer, 100);
        
      | CreateOutlining(fileId, parseResult) =>
        ServerUtils.Log("CreateOutlining " + fileId);
        def timer     = Stopwatch.StartNew();
        def outlining = List();
        parseResult.GetOutlining(outlining);
        def infos             = ImmutableArray.CreateBuilder(outlining.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = parseResult.SourceSnapshot.Version;
        
        foreach (info in outlining with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;
          
          infos.Add(Messages.OutliningInfo(ConvertNSpan(info.Span), info.IsDefaultCollapsed, info.IsImplementation));
        }
     
        when (cancellationToken.IsCancellationRequested)
          return;
        
        SendAsyncResponse(AsyncServerMessage.OutliningCreated(fileId, version, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateOutlining", timer, 50);

      | CreateKeywordsHighlighting(fileId, parseResult) =>
        ServerUtils.Log("CreateKeywordsHighlighting " + fileId);
        def timer     = Stopwatch.StartNew();
        def start     = 0;
        def end       = parseResult.SourceSnapshot.Text.Length;
        def spanInfos = HashSet();
        parseResult.GetSpans(start, end, spanInfos);

        def infos             = ImmutableArray.CreateBuilder(spanInfos.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = parseResult.SourceSnapshot.Version;
        
        foreach (info in spanInfos with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;
          
          def span = info.Span;
          def id = _spanClassesManager[info.SpanClass];
          infos.Add(SpanInfo(ConvertNSpan(span), id));
        }
     
        when (cancellationToken.IsCancellationRequested)
          return;
        
        SendAsyncResponse(AsyncServerMessage.KeywordsHighlightingCreated(fileId, version, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateKeywordsHighlighting", timer, 50);
        
      | CreateSymbolsHighlighting(fileId, version, ast) =>
        ServerUtils.Log("CreateSymbolsHighlighting " + fileId);
        def timer   = Stopwatch.StartNew();
        def visitor = CollectSymbolsAstVisitor(_spanClassesManager);
        ast.Accept(visitor);
        SendAsyncResponse(AsyncServerMessage.SymbolsHighlightingCreated(fileId, version, visitor.GetSpanInfos()));
        ServerUtils.LogMsgHandled("CreateSymbolsHighlighting", timer, 50);
      | SemanticAction(action, cancellationToken, asts) => action(cancellationToken, asts)
    }
    
    ConvertParseTreeReflection(node : R.ReflectionStruct, objectMap : Hashtable[R.ReflectionStruct, ParseTreeReflectionStruct]) : ParseTreeReflectionStruct
    {
      mutable result;
      when (objectMap.TryGetValue(node, out result))
        return result;
      
      def info       = node.Info;
      def resultInfo = ReflectionInfo(info.ShortName, info.FullName, info.IsMarker, info.CanParseEmptyString);
      def children = ImmutableArray.CreateBuilder(node.Children.Count);
      foreach (child in node.Children)
        children.Add(ConvertParseTreeReflection(child, objectMap));
      def kind =
        match (node.Kind)
        {
          | Normal    => ReflectionKind.Normal;
          | Recovered => ReflectionKind.Recovered;
          | Ambiguous => ReflectionKind.Ambiguous;
          | Deleted   => ReflectionKind.Deleted;
        };
      result = ParseTreeReflectionStruct(resultInfo, node.Description, kind, ConvertNSpan(node.Span), children.MoveToImmutable());
      objectMap.Add(node, result);
      result
    }

    public Dispose() : void
    {
      _cts.Cancel();
      _cts.Dispose();
      _thread.Join()
    }
  }
}
