using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ServerUtils;
using Nitra.Declarations;
using Nitra.PrettyPrint;
using Nitra.ProjectSystem;

using Nitra.Runtime.Highlighting;
using System;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Threading;

using SCG = System.Collections.Generic;
using R   = Nitra.Runtime.Reflection;

namespace Nitra.ClientServer.Server
{
  class ParseWorker : IDisposable
  {
    _thread              : Thread;
    _cts                 : CancellationTokenSource = CancellationTokenSource();
    _incomeQueue         : BlockingCollection[ParserMessage];
    _mainQueue           : BlockingCollection[RouterMessage];
    _asyncResponseWriter : BinaryWriter;
    _spanClassesManager  : SpanClassesManager;
    _router              : Router;
    
    
    public this(router : Router, incomeQueue : BlockingCollection[ParserMessage], mainQueue : BlockingCollection[RouterMessage], responseWriter : BinaryWriter, spanClassesManager : SpanClassesManager)
    {
      _router              = router;
      _mainQueue           = mainQueue;
      _incomeQueue         = incomeQueue;
      _asyncResponseWriter = responseWriter;
      _spanClassesManager  = spanClassesManager;
      _thread              = Thread(ParseWorkerMain);
      _thread.Start();
    }

    SendAsyncResponse(msg : AsyncServerMessage) : void
    {
      lock (_asyncResponseWriter)
        msg.Serialize(_asyncResponseWriter);
    }

    ParseWorkerMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "Parse Worker";
      thread.CurrentCulture = CultureInfo.InvariantCulture;
      while (!_mainQueue.IsCompleted)
      {
        try
        {
          foreach(m in _incomeQueue.GetConsumingEnumerable(_cts.Token)) 
          {
            try
              ProcessMessage(m)
            catch
            {
              | e is OperationCanceledException => ServerUtils.LogCanceled(e);
              | e => ServerUtils.LogException(_asyncResponseWriter, e);
            }
          }
        }
        catch
        {
          | e is OperationCanceledException => ServerUtils.LogCanceled(e);
          | e => ServerUtils.LogException(_asyncResponseWriter, e);
        }
      }
    }      
    
    ProcessMessage(msg : ParserMessage) : void
    {
      | ParseFile(solutionId, projectId, fileId, parseSession, source) =>
        ServerUtils.Log("ParseFile " + fileId);
        def timer = Stopwatch.StartNew();
        // TODO: add statistics
        //def stat = Statistics;
        //stat?.Parse?.Restart();
        //
        //_parseMessages.Clear();
        //_astMessages.Clear();
        //_typingMessages.Clear();
      
        when (parseSession.CancellationToken.IsCancellationRequested)
          return;

        when (parseSession.CompletionPos >= 0)
        {
          assert(true);
        }

        def parseResult = parseSession.Parse(source);
        
        when (parseSession.CompletionPos >= 0)
        {
          assert(true);
        }

        _mainQueue.Add(RouterAnswerMessage.FileParsed(projectId, fileId, parseResult));

        ServerUtils.SendCompilerMessages(parseResult, _router, solutionId, projectId, fileId);
        ServerUtils.LogMsgHandled("ParseFile " + fileId + " Length=" + parseResult.SourceSnapshot.Text.Length, timer, 200);
      
      | CreateAst(solutionId, projectId, fileId, parseResult, isActive) =>
        ServerUtils.Log("CreateAst " + fileId);
        def timer = Stopwatch.StartNew();
        when (parseResult.ParseSession.CancellationToken.IsCancellationRequested)
          return;
          
        def parseTree = parseResult.CreateParseTree();
        def mappingMessages = CompilerMessageList();
        def ast = AstContext.GetAstUntyped(parseTree, mappingMessages);
        def completionPos = parseResult.CompletionPos;
        _mainQueue.Add(RouterAnswerMessage.AstCreated(projectId, fileId, parseResult.ParseSession.CancellationToken, ast, parseTree, completionPos));
        
        def version = FileVersion(parseResult.SourceSnapshot.Version);
        def cm      = ConvertCompilerMessages(CompilerMessageSource.Mapping, mappingMessages);
        SendAsyncResponse(AsyncServerMessage.MappingMessages(fileId, version, solutionId, projectId, cm));
        
        ServerUtils.LogMsgHandled("CreateAst " + fileId, timer, 100);
        
        unless (isActive)
          return;

        def prettyPrintState = _router.PrettyPrintState;
        when (prettyPrintState != PrettyPrintState.Disabled)
          ProcessMessage(ParserMessage.CreatePrettyPrint(solutionId, projectId, fileId, version, prettyPrintState, parseTree));
        when (_router.IsParseTreeReflectionEnable)
          ProcessMessage(ParserMessage.CreateParseTreeReflection(solutionId, projectId, fileId, version, parseResult));
          
      | CreatePrettyPrint(solutionId, projectId, fileId, version, prettyPrintState, parseTree) =>
        match (prettyPrintState)
        {
          | PrettyPrintState.Disabled => ()
          | PrettyPrintState.Html =>
            ServerUtils.Log("HtmlPrettyPrint " + fileId);
            def timer = Stopwatch.StartNew();
            def spanClasses = _spanClassesManager.GetSpanClasses();
            def htmlWriter = HtmlPrettyPrintWriter(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes, spanClasses, "missing", "debug", "garbage");
            parseTree.PrettyPrint(htmlWriter, 0, null);
            def text = htmlWriter.ToString();
            _router.SendAsyncResponse(AsyncServerMessage.PrettyPrintCreated(fileId, version, solutionId, PrettyPrintState.Html, text));
            ServerUtils.LogMsgHandled("HtmlPrettyPrint " + fileId, timer, 100);
          
          | PrettyPrintState.Text =>
            ServerUtils.Log("TextPrettyPrint " + fileId);
            def timer = Stopwatch.StartNew();
            def text = parseTree.ToString(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes);
            _router.SendAsyncResponse(AsyncServerMessage.PrettyPrintCreated(fileId, version, solutionId, PrettyPrintState.Text, text));
            ServerUtils.LogMsgHandled("TextPrettyPrint " + fileId, timer, 100);
        }
        
      | ParserMessage.CreateParseTreeReflection(solutionId, projectId, fileId, version, parseResult) =>
        ServerUtils.Log("ParseTreeReflection " + fileId);
        def timer = Stopwatch.StartNew();
        def root  = parseResult.Reflect();
        def convertedRoot = ConvertParseTreeReflection(root, Hashtable());
        _router.SendAsyncResponse(AsyncServerMessage.ReflectionStructCreated(fileId, version, solutionId, convertedRoot));
        ServerUtils.LogMsgHandled("ParseTreeReflection " + fileId, timer, 100);
      
      | SemanticAnalysisStart(solutionId, projectId, cancellationToken, projectSupport, files, data, completeWordFileIdOpt, completeWordPosOpt) =>
        ServerUtils.Log($<#SemanticAnalysisStart: $(if (completeWordPosOpt < 0) "CompletePos" + completeWordPosOpt else "") ..$(files.Select(_.Title))#>);
        def timer = Stopwatch.StartNew();
        try
          projectSupport.RefreshProject(cancellationToken, files, data);
        catch
        {
          | e is OperationCanceledException => ServerUtils.LogCanceled(e); throw;
          | e when completeWordPosOpt < 0 => SendAsyncResponse(AsyncServerMessage.RefreshProjectFailed(FileId.Invalid, FileVersion.Invalid, solutionId, e.ToString()));
        }
        
        when (completeWordPosOpt >= 0 && completeWordFileIdOpt.IsValid)
        {
          // word complate
          foreach (file when file.FileId == completeWordFileIdOpt in files)
          {
            CompleteWord(solutionId, completeWordPosOpt, file);
            break;
          }
        }
        
        _mainQueue.Add(RouterAnswerMessage.SemanticAnalysisFinished(projectId, cancellationToken, files));
        def empty = array(0);
        for (mutable i = 0; i < files.Length; i++)
        {
          def file = files[i];
          if (file.HasCompilerMessage)
          {
            def msgs = file.GetCompilerMessage();
            def cm   = ConvertCompilerMessages(CompilerMessageSource.SemanticAnalysis, msgs);
            SendAsyncResponse(AsyncServerMessage.SemanticAnalysisMessages(FileId(file.FileId), FileVersion(file.FileVersion), solutionId, projectId, cm));
          }
          else
            SendAsyncResponse(AsyncServerMessage.SemanticAnalysisMessages(FileId(file.FileId), FileVersion(file.FileVersion), solutionId, projectId, empty));
        }
        
        ServerUtils.LogMsgHandled("SemanticAnalysisStart", timer, 100);
        
      | CreateOutlining(solutionId, projectId, fileId, parseResult) =>
        ServerUtils.Log("CreateOutlining " + fileId);
        def timer     = Stopwatch.StartNew();
        def outlining = List();
        parseResult.GetOutlining(outlining);
        def infos             = ImmutableArray.CreateBuilder(outlining.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = FileVersion(parseResult.SourceSnapshot.Version);
        
        foreach (info in outlining with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;
          
          infos.Add(Messages.OutliningInfo(ConvertNSpan(info.Span), info.IsDefaultCollapsed, info.IsImplementation));
        }
     
        when (cancellationToken.IsCancellationRequested)
          return;
        
        infos.Sort(OutliningInfo.Comparer);
        SendAsyncResponse(AsyncServerMessage.OutliningCreated(fileId, version, solutionId, projectId, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateOutlining", timer, 50);

      | CreateKeywordsHighlighting(solutionId, projectId, fileId, parseResult) =>
        ServerUtils.Log("CreateKeywordsHighlighting " + fileId);
        def timer     = Stopwatch.StartNew();
        def start     = 0;
        def end       = parseResult.SourceSnapshot.Text.Length;
        def spanInfos = HashSet();
        parseResult.GetSpans(start, end, spanInfos);

        def infos             = ImmutableArray.CreateBuilder(spanInfos.Count);
        def cancellationToken = parseResult.ParseSession.CancellationToken;
        def version           = FileVersion(parseResult.SourceSnapshot.Version);
        
        foreach (info in spanInfos with i)
        {
          when (i % 30 == 0 && cancellationToken.IsCancellationRequested)
            return;
          
          def span = info.Span;
          def id = _spanClassesManager[info.SpanClass];
          infos.Add(SpanInfo(ConvertNSpan(span), id));
        }
     
        when (cancellationToken.IsCancellationRequested)
          return;
        
        infos.Sort(SpanInfo.Comparer);
        SendAsyncResponse(AsyncServerMessage.KeywordsHighlightingCreated(fileId, version, solutionId, projectId, infos.MoveToImmutable()));
        ServerUtils.LogMsgHandled("CreateKeywordsHighlighting", timer, 50);
        
      | CreateSymbolsHighlighting(solutionId, projectId, fileId, version, ast) =>
        ServerUtils.Log("CreateSymbolsHighlighting " + fileId);
        def timer   = Stopwatch.StartNew();
        def visitor = CollectSymbolsAstVisitor(_spanClassesManager);
        ast.Accept(visitor);
        SendAsyncResponse(AsyncServerMessage.SymbolsHighlightingCreated(fileId, version, solutionId, projectId, visitor.GetSpanInfos()));
        ServerUtils.LogMsgHandled("CreateSymbolsHighlighting", timer, 50);
      | SemanticAction(solutionId, action, cancellationToken, asts) => action(cancellationToken, solutionId, asts)
      | CreateMatchBrackets(solutionId, projectId, fileId, parseResult, pos) =>
        def timer   = Stopwatch.StartNew();
        def walker  = MatchBracketsWalker();
        def context = MatchBracketsWalker.Context(pos);
        walker.Walk(parseResult, context);
        def builder = ImmutableArray.CreateBuilder(context.Brackets.Count);
        foreach (pair in context.Brackets)
          builder.Add(MatchBrackets(ConvertNSpan(pair.OpenBracket), ConvertNSpan(pair.CloseBracket)));
        def msg = AsyncServerMessage.MatchedBrackets(fileId, FileVersion(parseResult.SourceSnapshot.Version), solutionId, projectId, builder.MoveToImmutable());
        SendAsyncResponse(msg);
        ServerUtils.LogMsgHandled("CreateMatchBrackets fileId=" + fileId, timer, 50);
    }
    
    public CompleteWord(solutionId : SolutionId, pos : int, fileData : FileEvalPropertiesData) : void
    {
      def astRoot = fileData.Ast;
      def source  = astRoot.Location.Source;

      // находим цепочку ветвей AST ведущую к позиции комплита

      def visitor = FindReferencesAstVisitor(NSpan(pos, pos));
      astRoot.Accept(visitor);
      
      
      def isReference(ast : IAst) : bool
      {
        | Reference as r => r.Span.IntersectsWith(pos)
        | _ => false
      }
      
      def isNotEmptyReference(ast : IAst) : bool
      {
        | Reference as r => r.Span.IntersectsWith(pos) && !r.Span.IsEmpty
        | _ => false
      }
      
      // TODO: искать снача нормальй Reference, и только если его нет, то продолбанный.
      def reference = visitor.Result.FirstOrDefault(isNotEmptyReference) ?? visitor.Result.FirstOrDefault(isReference);
      
      when (reference == null)
        return;

      // Вычисляем префикс комплита (если есть). Он будет использоваться для фильтрации списка и будет заменен выбранным словом
      def span            = Nitra.NSpan(reference.Span.StartPos, pos);
      def pattern          = source.Text.Substring(span.StartPos, span.Length);
      def replacementSpan = Nitra.NSpan(reference.Span.StartPos, reference.Span.EndPos);

      def symbolsSet = HashSet();
      
      // Находим первую ветку AST в которой есть зависимое свойство Scope и вычисляем по этому Scope список автодополнения
      foreach (ast in visitor.Result)
      {
        | Reference(IsScopeEvaluated=true, IsRefEvaluated=true, Scope=scope, Ref=r) when ast.Span.IntersectsWith(span) =>
          mutable r2 = r : IRef;
          while (r2.ResolvedTo != null)
            r2 = r2.ResolvedTo;
            
          def symbolTypeOpt = if (r2 == null) null else r2.GetType().GetGenericArguments()[0];
            
          def matcher(symbol) : bool
          {
            def symbolTypeOpt = symbolTypeOpt;
            def pattern = pattern;
            def isNameMatch = !symbol.IsNameValid || StringPatternMatching.MatchPattern(symbol.Name, pattern);
            when (!isNameMatch)
              return false;
            def isTypeMatch = symbolTypeOpt == null || symbolTypeOpt.IsInstanceOfType(symbol);
            isTypeMatch
          }
          def br = scope.Bind(matcher);
         
          foreach (symbol : DeclarationSymbol in br.Symbols)
          {
            def name = symbol.Name;
            when (StringPatternMatching.MatchPattern(name, pattern))
            {
              _ = symbolsSet.Add(symbol);
            }
          }
          
        | _ => ()
      }
      
      def builder = ImmutableArray.CreateBuilder(symbolsSet.Count);
      foreach (symbol in symbolsSet)
      {
        def desc = symbol.ToString();
        def elem = CompletionElem.Symbol(symbol.Id, symbol.Name, desc, desc, -1);
        builder.Add(elem);
      }
      
      def ver = FileVersion(fileData.FileVersion);
      def msg = AsyncServerMessage.CompleteWord(FileId(fileData.FileId), ver, solutionId, ServerUtils.ConvertNSpan(replacementSpan), builder.MoveToImmutable());
      SendAsyncResponse(msg);
      
    }
    
    ConvertParseTreeReflection(node : R.ReflectionStruct, objectMap : Hashtable[R.ReflectionStruct, ParseTreeReflectionStruct]) : ParseTreeReflectionStruct
    {
      mutable result;
      when (objectMap.TryGetValue(node, out result))
        return result;
      
      def info       = node.Info;
      def resultInfo = ReflectionInfo(info.ShortName, info.FullName, info.IsMarker, info.CanParseEmptyString);
      def children = ImmutableArray.CreateBuilder(node.Children.Count);
      foreach (child in node.Children)
        children.Add(ConvertParseTreeReflection(child, objectMap));
      def kind =
        match (node.Kind)
        {
          | Normal    => ReflectionKind.Normal;
          | Recovered => ReflectionKind.Recovered;
          | Ambiguous => ReflectionKind.Ambiguous;
          | Deleted   => ReflectionKind.Deleted;
        };
      result = ParseTreeReflectionStruct(resultInfo, node.Description, kind, ConvertNSpan(node.Span), children.MoveToImmutable());
      objectMap.Add(node, result);
      result
    }

    public Dispose() : void
    {
      _cts.Cancel();
      _cts.Dispose();
      _thread.Join()
    }
  }
}
