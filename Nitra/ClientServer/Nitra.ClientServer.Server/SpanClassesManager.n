using Nitra.ClientServer.Messages;
using System.Threading;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Nitra.ClientServer.Server
{
  class SpanClassesManager
  {
             _router       : Router;
     mutable _counter      : int = 0;
     mutable _spanClassMap : ImmutableDictionary[SpanClass, int] = ImmutableDictionary.Create();
     mutable _languages    : HashSet[Nitra.Language]             = HashSet();
     _sync : object = object();

    public this(router : Router)
    {
      _router = router;
    }

    public Clear() : void
    {
      lock (_sync)
      {
        _counter = 0;
        _spanClassMap = ImmutableDictionary.Create();
        _languages.Clear();
      }
    }

    public Item[spanClass : SpanClass] : int
    {
      get
      {
        mutable id;
        if (_spanClassMap.TryGetValue(spanClass, out id))
          id
        else
        {
          lock (_sync)
          {
            if (_spanClassMap.TryGetValue(spanClass, out id)) // double check
              id
            else
            {
              LoadLanguage(spanClass.Language);
              this[spanClass]
            }
          }
        }
      }
    }

    public GetSpanClasses() : Seq[SpanClass]
    {
      _spanClassMap.Keys.ToArray()
    }

    public LoadLanguages(languages : List[Nitra.Language]) : void
    {
      lock (_sync)
        LoadLanguagesImpl(languages);
    }

    LoadLanguagesImpl(languages : List[Nitra.Language]) : void
    {
      LoadSpanClasses(fun(spanClassMapBilder, spanClassInfosBilder)
      {
        foreach (language in languages)
          LoadLanguageImpl(language, spanClassMapBilder, spanClassInfosBilder, _languages);
      });
    }

    LoadLanguage(language : Nitra.Language) : void
    {
      LoadSpanClasses((spanClassMapBilder, spanClassInfosBilder) => LoadLanguageImpl(language, spanClassMapBilder, spanClassInfosBilder, _languages));
    }

    LoadSpanClasses(load : ImmutableDictionary[SpanClass, int].Builder * ImmutableArray[SpanClassInfo].Builder -> void) : void
    {
      def spanClassMapBilder   = _spanClassMap.ToBuilder();
      def spanClassInfosBilder = ImmutableArray.CreateBuilder();
      load(spanClassMapBilder, spanClassInfosBilder);
      _spanClassMap = spanClassMapBilder.ToImmutable();
      Send(spanClassInfosBilder);
    }

    LoadLanguageImpl(language : Nitra.Language, spanClassMapBilder : ImmutableDictionary[SpanClass, int].Builder, spanClassInfosBilder : ImmutableArray[SpanClassInfo].Builder, langs : HashSet[Nitra.Language]) : void
    {
      unless (langs.Add(language))
        return;

      def spanClasses = language.GetDeclaredSpanClasses();
      foreach (spanClass in spanClasses)
      {
        def id = spanClassMapBilder.Count;
        spanClassMapBilder.Add(spanClass, spanClassMapBilder.Count);
        spanClassInfosBilder.Add(SpanClassInfo(spanClass.FullName, id, spanClass.Style.ForegroundColor));
      }

      when (language.Parent != null)
        LoadLanguageImpl(language.Parent, spanClassMapBilder, spanClassInfosBilder, langs);
    }

    Send(spanClassInfosBilder : ImmutableArray[SpanClassInfo].Builder) : void
    {
      _router.SendAsyncResponse(AsyncServerMessage.LanguageLoaded(FileId.Invalid, FileVersion.Invalid, SolutionId.Invalid, spanClassInfosBilder.ToImmutable()));
    }
  }
}
