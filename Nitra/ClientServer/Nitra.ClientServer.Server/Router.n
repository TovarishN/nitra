using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;

using System;
using System.Threading;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;

using IO = System.IO;

namespace Nitra.ClientServer.Server
{
  internal partial class Router
  {
            _mainQueue                  : BlockingCollection[RouterMessage] = BlockingCollection();
            _parseQueue                 : BlockingCollection[ParserMessage] = BlockingCollection();
            _mainThread                 : Thread;
            _parseWorkers               : list[ParseWorker];
    mutable _cts                        : CancellationTokenSource = CancellationTokenSource();
            _asyncResponseWriter        : IO.BinaryWriter;
            _responseWriter             : IO.BinaryWriter;
    public  SpanClassesManager          : SpanClassesManager = SpanClassesManager();
    mutable _stopped                    : bool;
    mutable _solution                   : Solution;
    mutable _projectLoadingCts          : CancellationTokenSource;
    public  PrettyPrintState            : PrettyPrintState { get; private set; }
    public  IsParseTreeReflectionEnable : bool { get; private set; }

    public this(responseWriter : IO.BinaryWriter, asyncResponseWriter : IO.BinaryWriter)
    {
      _responseWriter      = responseWriter;
      _asyncResponseWriter = asyncResponseWriter;
      _mainThread          = Thread(RouterThreadMain);
      _mainThread.Start();
      def cores       = ServerUtils.GetCoreCount(); // Environment.ProcessorCount
      ServerUtils.Log("Cores: " + cores);
      _parseWorkers = $[1..cores].Map(_ => ParseWorker(this, _parseQueue, _mainQueue, asyncResponseWriter, SpanClassesManager));
    }
    
    public ProjectLoadCancellationToken : CancellationToken
    {
      get
      {
        when (_projectLoadingCts == null)
          _projectLoadingCts = CancellationTokenSource();
        _projectLoadingCts.Token
      }
    }

    public ProjectLoadFinish() : void
    {
      _projectLoadingCts = null;
    }
    
    public ProjectLoadCancel() : void
    {
      def cts = _projectLoadingCts;
      when (cts != null)
      {
        _projectLoadingCts = null;
        //def cts = Interlocked.Exchange(ref _cts, CancellationTokenSource());
        cts.Cancel();
        cts.Dispose();
      }
    }
    
    public SendAsyncResponse(msg : AsyncServerMessage) : void
    {
      lock (_asyncResponseWriter)
        msg.Serialize(_asyncResponseWriter);
    }

    public FlushAsyncResponse() : void
    {
      _asyncResponseWriter.Flush();
    }

    public SendResponse(msg : ServerMessage) : void
    {
      lock (_responseWriter)
        msg.Serialize(_responseWriter);
    }

    public SendResponseTest() : void
    {
      _responseWriter.Write(42);
    }

    public FlushResponse() : void
    {
      _responseWriter.Flush();
    }

    RouterThreadMain() : void
    {
      def thread = Thread.CurrentThread;
      thread.Name = "Router";
      thread.CurrentCulture = CultureInfo.InvariantCulture;

      RouteMessages();
    }
    
    RouteMessages() : void
    {
      while (!_mainQueue.IsCompleted)
      {
        try
        {
          foreach(msg in _mainQueue.GetConsumingEnumerable(_cts.Token))
          {
            | serverMsg is ClientMessage.Shutdown => OnClientMessage(serverMsg); return;
            | serverMsg is ClientMessage          => OnClientMessage(serverMsg);
            | serverMsg is RouterAnswerMessage    => OnRouterAnswerMessage(serverMsg);
            | _ => assert2(false)
          }
        }
        catch
        {
          | e is OperationCanceledException => ServerUtils.LogCanceled(e);
          | e                               => ServerUtils.LogException(_asyncResponseWriter, e)
        }
      }
    }
    
    public Wait() : void
    {
      unless (_stopped)
      {
        _mainThread.Join();
        _cts.Dispose();
        foreach(worker in _parseWorkers)
          worker.Dispose();
        _parseQueue.Dispose();
        _stopped = true;
      }
    }
    
    public AddMessage(msg : RouterMessage): void
    {
      unless (_stopped)
        _mainQueue.Add(msg)
    }
  }
}
