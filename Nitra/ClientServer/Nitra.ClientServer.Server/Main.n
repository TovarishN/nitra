using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server;
using Nitra.Logging;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Threading;

module Program
{
  Main(args : array[string]) : void
  {
    Log.Init("Nitra.ClientServer.Server");
    Log.Message("Process ID: " + Process.GetCurrentProcess().Id);
#if !NOSERVERWINDOW
    //assert2(false, "Start debugger");
#endif

    when (args.Length != 1)
    {
      assert2(false, "Invalid number of parameters!");
      Log.Message("Invalid number of parameters, expected: <request pipe name> <response pipe name>");
      Environment.Exit(42);
    }

    Nitra.NitraUtils.IdeMode = true;

    using (driver = NitraProtocolDriver(args[0]))
    {

      Log.Message("Attempting to connect to pipes...");
      driver.Connect();

      def router = Router(driver);

      Log.Message("Connected to pipes.");

      def readerThread = Thread(fun(){
        foreach (message in driver.Receive())
          router.AddMessage(message);
      });
      readerThread.Name = "Incomming messages reader";
      readerThread.CurrentCulture = CultureInfo.InvariantCulture;
      readerThread.IsBackground = true;
      readerThread.Start();
      Log.Message("Server started.");
      router.Wait();
      Log.Message("Server stopped.");
      Log.Flush();
    }
  }
}
