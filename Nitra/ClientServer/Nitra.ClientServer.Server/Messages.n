using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.ClientServer.Messages;
using Nitra.ClientServer.Server.ProjectSystem;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

namespace Nitra.ClientServer.Server
{
  [Record]
  public class Message
  {
  }

  [Record]
  internal variant ParserMessage : Message
  {
    | ParseFile                  { completeId : int; solutionId : SolutionId; projectId : ProjectId; fileId : FileId; parseSession : ParseSession; source : SourceSnapshot; } // CancellationToken in ParseSession
    | CreateAst                  { completeId : int; solutionId : SolutionId; projectId : ProjectId; fileId : FileId; parseResult  : IParseResult; isActive : bool; }
    | CreateOutlining            { solutionId : SolutionId; projectId : ProjectId; fileId : FileId; parseResult  : IParseResult; }
    | CreateKeywordsHighlighting { solutionId : SolutionId; projectId : ProjectId; fileId : FileId; parseResult  : IParseResult; }
    | CreateSymbolsHighlighting  { solutionId : SolutionId; projectId : ProjectId; fileId : FileId; fileVersion : FileVersion; ast : IAst; completeWordPosOpt : int; }
    | SemanticAnalysisStart
      {
        completeId            : int;
        solutionId            : SolutionId;
        projectId             : ProjectId;
        cancellationToken     : CancellationToken;
        project               : Nitra.ClientServer.Server.ProjectSystem.Project; // TODO: Надо заменить на неизменяемый вариант
        projectSupport        : IProjectSupport;
        files                 : ImmutableArray[FileEvalPropertiesData];
        data                  : object;
        completeWordFileIdOpt : FileId;
        completeWordPosOpt    : int;
        parseTreeOpt          : IParseResult;
      }
    | CreatePrettyPrint         { solutionId : SolutionId; projectId : ProjectId; fileId : FileId; version : FileVersion; state : PrettyPrintState; parseTree : ParseTree; }
    | SemanticAction            { solutionId : SolutionId; action : Action[CancellationToken, SolutionId, ImmutableArray[IAst * bool]]; cancellationToken : CancellationToken; asts : ImmutableArray[IAst * bool]; }
    | CreateParseTreeReflection { solutionId : SolutionId; projectId : ProjectId; fileId : FileId; version : FileVersion; parseResult : IParseResult; }
    | CreateMatchBrackets       { solutionId : SolutionId; projectId : ProjectId; fileId : FileId; parseResult  : IParseResult; pos : int; }
  }

  [Record]
  public variant RouterAnswerMessage : RouterMessage
  {
    public override MsgId : short { get { -1s } }

    | FileParsed               { completeId : int; projectId : ProjectId; fileId : FileId; parseResult : IParseResult; } // CancellationToken in ParseResult.ParseSession
    | AstCreated               { completeId : int; projectId : ProjectId; fileId : FileId; cancellationToken : CancellationToken;  ast : IAst; parseTree : ParseTree; completionPos : int; parseResult : IParseResult; }
    | SemanticAnalysisFinished
      {
        projectId             : ProjectId;
        cancellationToken     : CancellationToken;
        files                 : ImmutableArray[FileEvalPropertiesData];
        completeWordFileIdOpt : FileId;
        completeWordPosOpt    : int;
      }
    | ProjectReload            { projectId : ProjectId; }
  }
}
