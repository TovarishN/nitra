using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Nitra.ClientServer.Server
{
  using SpanInfo2 = Nitra.ClientServer.Messages.SpanInfo;
  using NSpan2    = Nitra.ClientServer.Messages.NSpan;
  
  [Record]
  internal class CollectSymbolsAstVisitor : IAstVisitor
  {
    _spanClassesManager : SpanClassesManager;
    [RecordIgnore] _spanInfos : ImmutableArray[SpanInfo2].Builder = ImmutableArray.CreateBuilder();

    public GetSpanInfos() : ImmutableArray[SpanInfo2]
    {
      _spanInfos.Sort(SpanInfo2.Comparer);
      _spanInfos.ToImmutable()
    }
    
    public Visit(parseTree : IAst) : void
    {
      parseTree.Accept(this);
    }

    public Visit(name : Name) : void implements IAstVisitor.Visit
    {
      def span = name.Span;

      when (!name.IsSymbolEvaluated)
        return;

      def sym       = name.Symbol;
      def spanClass = sym.SpanClass;

      when (spanClass == Nitra.Language.DefaultSpanClass)
        return;

      def spanClassId = _spanClassesManager[spanClass];
      _spanInfos.Add(SpanInfo2(NSpan2(span.StartPos, span.EndPos), spanClassId));
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      IgnoreParams();
    }

    public Visit(r : IRef) : void
    {
      when (r.ResolvedTo != null)
      {
        Visit(r.ResolvedTo);
        return;
      }

      def spanClass = r.SpanClass;
      def span      = r.Location.Span;

      when (spanClass == Nitra.Language.DefaultSpanClass)
        return;

      def spanClassId = _spanClassesManager[spanClass];
      _spanInfos.Add(SpanInfo2(NSpan2(span.StartPos, span.EndPos), spanClassId));
    }
  }
}
