using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Nitra.Declarations
{
  public class ProjectEvalPropertiesHost : EvalPropertiesHost
  {
    protected _files   : ImmutableArray[FileEvalPropertiesData];
    protected _symbols : ImmutableArray[DeclarationSymbol];

    public this(files : ImmutableArray[FileEvalPropertiesData])
    {
      this(files, ImmutableArray.Empty)
    }

    public this(files : ImmutableArray[FileEvalPropertiesData], symbols : ImmutableArray[DeclarationSymbol])
    {
      _files   = files;
      _symbols = symbols;
    }

    public Finish() : void
    {
      CollectCompilerMessageFrimAst();
    }

    protected override ExecutePass(context : DependentPropertyEvalContext, passName : string) : void
    {
      context.Files = _files;

      foreach (symbol in _symbols)
        EvalProperties(context, symbol);

      foreach (file in _files)
      {
        when (context.CancellationToken.IsCancellationRequested)
          return;

        def stat = GetStatistics(file, passName);
        def ast  = file.Ast;
        when (ast : object != null)
          EvalProperties(context, ast, stat);
      }
    }

    protected override AfterStage(context : DependentPropertyEvalContext, _passName : string) : void
    {
      // Notify symbols about current stage is finished.
      def stage = context.Stage;
      def stageNotifier = StageNotifierVisitor();
      foreach (file in _files)
      {
        def ast = file.Ast;
        when (ast != null)
          stageNotifier.Notify(ast, stage);
      }
    }

    private CollectCompilerMessageFrimAst() : void
    {
      foreach (file when file.Ast != null in _files)
        file.CollectFrimAst();
    }

    private GetStatistics(file : FileEvalPropertiesData, passName : string) : StatisticsTask.Single
    {
      def statistics = file.Statistics;
      def passStatistics =
        if      (passName == null)   statistics
        else                         statistics?.GetOrAddContainerSubtask(passName);

      passStatistics?.ReplaceSingleSubtask(file.FullName, file.Title);
    }
  }
}
