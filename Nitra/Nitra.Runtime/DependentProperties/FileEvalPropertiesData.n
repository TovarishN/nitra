using Nemerle;
using Nemerle.Assertions;
using Nemerle.Utility;

using Nitra.ProjectSystem;
using System;
using System.Collections.Immutable;

namespace Nitra.Declarations
{
  [Record]
  public class FileEvalPropertiesData
  {
    public FullName    : string;
    public Title       : string;
    public FileId      : int;
    public FileVersion : int;
    public Ast         : IAst;
    public Statistics  : StatisticsTask.Container;
    public IsActive    : bool;
    [RecordIgnore]
    mutable _compilerMessage : CompilerMessageList;

    public this(fullName : string, title : string, fileId : int, fileVersion : int, ast : IAst, statistics  : StatisticsTask.Container)
    {
      this(fullName, title, fileId, fileVersion, ast, statistics, false)
    }

    public HasCompilerMessage : bool
    {
      get
      {
        when (_compilerMessage == null)
          _ = GetCompilerMessage();

        _compilerMessage.Count > 0
      }
    }

    public GetCompilerMessage() : CompilerMessageList
    {
      when (_compilerMessage == null)
      {
        _compilerMessage = CompilerMessageList();
        when (Ast != null)
        {
          def errorCollector = CollectSymbolErrorsVisitor(_compilerMessage);
          errorCollector.Visit(Ast);
        }
      }
      _compilerMessage
    }
   }
}
