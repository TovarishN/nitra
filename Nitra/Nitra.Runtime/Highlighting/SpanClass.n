using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Imperative;
using Nemerle.Utility;

using System;
using System.IO;

namespace Nitra
{
  [Record, StructuralEquality]
  public sealed class SpanClass : ISerializable
  {
    public Language : Language { get; }
    public Name     : string   { get; }
    public FullName : string   { get; }
    public Style    : Style    { get; }

    public override ToString() : string { FullName }

    public static GetFullNameForIde(language : Language, spanClass : SpanClass) : string
    {
      language.FullName + "." + spanClass.Name
    }

    public static GetNameForIde(language : Language, spanClass : SpanClass) : string
    {
      language.Name + "_" + spanClass.Name
    }

    public static GetDisplayNameForIde(language : Language, spanClass : SpanClass) : string
    {
      language.Name + " " + spanClass.Name
    }

    public Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(Language, writer);
      writer.Write(Name);
    }

    public static Deserialize(reader : BinaryReader, metadataReader : MetadataReader) : this
    {
      def language = metadataReader.ReadObject.[Language](reader);
      def name     = reader.ReadString();
      unchecked for (mutable acc = language; acc : object != null; acc = acc.Parent)
        foreach (spanClass when StringComparer.Ordinal.Equals(spanClass.Name, name) in acc.GetDeclaredSpanClasses())
          return spanClass;

      metadataReader.Project.FatalError(metadataReader.ErrorLocation, $"Span class '$name' not found in language '$language'.");
    }
  }
}
