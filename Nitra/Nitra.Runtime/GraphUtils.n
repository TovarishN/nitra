using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

using System.Security.Cryptography;
using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra.Runtime.GraphUtils
{
  public interface IGraphNode[T]
    where T : IGraphNode[T]
  {
    Connections : IEnumerable[T] { get; }
  }

  public abstract class GraphNodeWithConnections[T] : IGraphNode[T]
    where T : GraphNodeWithConnections[T]
  {
    private _connections : List[T] = List();

    public AddConnection(node : T) : void
    {
      _connections.Add(node);
    }

    public virtual Connections : IEnumerable[T] { get { _connections } }
  }

  public class GraphNodeGroup[NodeType, GraphNodeGroupType] : GraphNodeWithConnections[GraphNodeGroupType]
    where NodeType : IGraphNode[NodeType]
    where GraphNodeGroupType : GraphNodeGroup[NodeType, GraphNodeGroupType]
  {
    public Nodes : LightList[NodeType] { get; private set; }
    public Add(node : NodeType) : void
    {
      def tmp = Nodes;
      tmp.Add(node);
      Nodes = tmp;
    }

    public override ToString() : string { $<#..$(Nodes.ToArray())#> }
  }

  public class SimpleGraphNodeGroup[NodeType] : GraphNodeGroup[NodeType, SimpleGraphNodeGroup[NodeType]]
    where NodeType : IGraphNode[NodeType]
  {
  }

  public module GraphAlgorithms
  {
    private class SCCNode[NodeType]
      where NodeType : IGraphNode[NodeType]
    {
      public         Node    : NodeType;
      public mutable Index   : int = -1;
      public mutable Lowlink : int = -1;
      public mutable OnStack : bool = false;

      public this (node : NodeType)
      {
        Node = node;
      }
    }

    // In the mathematical theory of directed graphs, a graph is said to be strongly connected
    // if every vertex is reachable from every other vertex.
    // The strongly connected components of an arbitrary directed graph
    // form a partition into subgraphs that are themselves strongly connected.
    // https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm
    public FindStronglyConnectedComponents[NodeType, GroupType](nodes : IEnumerable[NodeType]) : IEnumerable[SimpleGraphNodeGroup[NodeType]]
      where NodeType  : IGraphNode[NodeType]
    {
      FindStronglyConnectedComponents(nodes, SimpleGraphNodeGroup)
    }

    public FindStronglyConnectedComponents[NodeType, GroupType](nodes : IEnumerable[NodeType], newGroup : void -> GroupType) : IEnumerable[GroupType]
      where NodeType  : IGraphNode[NodeType]
      where GroupType : GraphNodeGroup[NodeType, GroupType]
    {
      def nodeMap = Hashtable();
      def getSCCNode(node)
      {
        mutable sccNode;
        unless (nodeMap.TryGetValue(node, out sccNode))
        {
          sccNode = SCCNode(node);
          nodeMap.Add(node, sccNode);
        }
        sccNode
      }
      def stack = SCG.Stack();
      mutable index = 0;
      def nodeToGroupMap = Hashtable();
      def groups = List();
      def strongConnect(sccNode)
      {
        sccNode.Index = index;
        sccNode.Lowlink = index;
        sccNode.OnStack = true;
        stack.Push(sccNode);
        index += 1;
        foreach (nextNode in sccNode.Node.Connections)
        {
          def nextSCCNode = getSCCNode(nextNode);
          if (nextSCCNode.Index == -1)
          {
            strongConnect(nextSCCNode);
            sccNode.Lowlink = Math.Min(sccNode.Lowlink, nextSCCNode.Lowlink)
          }
          else when (nextSCCNode.OnStack)
            sccNode.Lowlink = Math.Min(sccNode.Lowlink, nextSCCNode.Lowlink)
        }
        when (sccNode.Lowlink == sccNode.Index)
        {
          def curGroup = newGroup();
          mutable curSCCNode;
          do
          {
            curSCCNode = stack.Pop();
            curSCCNode.OnStack = false;
            curGroup.Add(curSCCNode.Node);
            nodeToGroupMap.Add(curSCCNode.Node, curGroup);
          }
          while (sccNode : object != curSCCNode);
          groups.Add(curGroup);
        }
      }
      foreach (node in nodes)
      {
        def sccNode = getSCCNode(node);
        when (sccNode.Index == -1)
          strongConnect(sccNode);
      }
      foreach (group in groups)
      {
        def nextGroups = SCG.HashSet();
        def e = group.Nodes.GetEnumerator(); // 'foreach' causes invalid IL
        while (e.MoveNext())
          foreach (nextNode in e.Current.Connections)
          {
            def curGroup = nodeToGroupMap[nextNode];
            when (group : object != curGroup)
              _ = nextGroups.Add(curGroup);
          }
        foreach (nextGroup in nextGroups)
          group.AddConnection(nextGroup);
      }
      groups
    }

    public FindMaximalDistanceToLeafInDAG[NodeType](nodes : IEnumerable[NodeType]) : IEnumerable[NodeType * int]
      where NodeType  : IGraphNode[NodeType]
    {
      def nodeMap = Hashtable();
      def rec(node)
      {
        mutable distance;
        if (nodeMap.TryGetValue(node, out distance))
        {
          assert(distance >= 0, "Cycle detected.");
          distance;
        }
        else
        {
          mutable maxDistance = 0;
          nodeMap[node] = -1;
          foreach (nextNode in node.Connections)
            maxDistance = Math.Max(maxDistance, rec(nextNode) + 1);
          nodeMap[node] = maxDistance;
          maxDistance;
        }
      }
      foreach (node in nodes)
        _ = rec(node);
      nodeMap.KeyValuePairs
    }
  }
}
