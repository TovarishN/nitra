using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;

namespace Nitra
{
  public partial class Language : object, ISerializable
  {
    public GetSpanClasses() : array[SpanClass]
    {
      def buffer = List();
      unchecked for (mutable language = this; language : object != null; language = language.Parent)
        buffer.AddRange(language.GetDeclaredSpanClasses());
      buffer.ToArray();
    }

    public GetStyles() : array[Style]
    {
      def buffer = List();
      unchecked for (mutable language = this; language : object != null; language = language.Parent)
        buffer.AddRange(language.GetDeclaredStyles());
      buffer.ToArray();
    }

    private mutable _compositeGrammar : CompositeGrammar = null;

    public CompositeGrammar : CompositeGrammar
    {
      get
      {
        if (_compositeGrammar : object != null)
          _compositeGrammar
        else
        {
          mutable result =
            if (Parent : object == null)
              ParserHost.Instance.DefaultCompositeGrammar
            else
              Parent.CompositeGrammar;

          unchecked foreach (desc in GetDeclaredGrammars())
            result = result.Add(desc);

          _ = Interlocked.CompareExchange(ref _compositeGrammar, result, null);
          _compositeGrammar
        }
      }
    }

    public static LoadAssembly(path : string) : Assembly
    {
      def assembly =
        if (path.Contains(", Version="))
          Assembly.Load(path)
        else
          Assembly.LoadFrom(path);
      assembly
    }

    public static GetLanguages(path : string) : array[Language]
    {
      def assembly  = LoadAssembly(path);
      def languages = List();
      def assemblyAttributes = CustomAttributeData.GetCustomAttributes(assembly);
      def attrTypeToSearch = typeof(LanguagesAttribute);
      foreach (attr in assemblyAttributes)
      {
        def attrType = attr.Constructor.DeclaringType;
        unless (attrType.Equals(attrTypeToSearch))
        {
          when (attrType.FullName == attrTypeToSearch.FullName)
          {
            def supportedVersion = attrTypeToSearch.Assembly.GetName().Version;
            def asmVersion = attrType.Assembly.GetName().Version;
            throw ApplicationException($"The language assembly '$path' was build with old version of Nitra.Runtime.dll. Assembly build with $asmVersion version. Supported versionis $supportedVersion.");
          }
          continue;
        }

        def languageTypes = attr.ConstructorArguments[0].Value :> Seq[CustomAttributeTypedArgument];
        foreach (languageTypeArgument in languageTypes)
        {
          def languageType = languageTypeArgument.Value :> Type;
          def instanceProperty = languageType.GetProperty("Instance", BindingFlags.Public | BindingFlags.Static);
          assert(instanceProperty != null);
          def language = instanceProperty.GetValue(null, null) :> Language;
          languages.Add(language);
        }
      }
      languages.ToArray()
    }

    public override ToString() : string
    {
      FullName
    }

    public Serialize(_writer : System.IO.BinaryWriter, _metadataWriter : MetadataWriter) : void { }
  }
}
