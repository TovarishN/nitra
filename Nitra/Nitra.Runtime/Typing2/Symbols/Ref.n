using Nitra;
using Nitra.ProjectSystem;
using Nitra.Internal;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

#pragma warning disable 10003

namespace Nitra.Declarations
{
  public abstract class Ref[TSymbol] : IRef
    where TSymbol : DeclarationSymbol
  {
            _result     : BindResult[TSymbol];
            _symbols    : ImmutableArray[TSymbol];
    mutable _resolvedTo : IRef;

    public this(result : BindResult[TSymbol])
    {
      _result = result;

      match (result)
      {
        | Nil => _symbols = ImmutableArray.Empty;
        | _   => _symbols = result.GetSymbols();
      }
    }

    public          Result               : BindResult[TSymbol]     { get { _result } }
    public          Symbols              : ImmutableArray[TSymbol] { get { _symbols } }

    public abstract Location             : Location                 { get; }
    public virtual  IgnoreAmbiguities    : bool                     { get { false } }

    public          Span                  : NSpan                   { get { Location.Span } }
    public          IsUnresolved          : bool                    { get { _result.IsEmpty } }
    public          IsAmbiguous           : bool                    { get { _symbols.Length > 1 } }

    [DependentProperty("IsResolvedToEvaluated")]
    public          ResolvedTo            : IRef                    { get { _resolvedTo } }
    public          IsResolvedToEvaluated : bool                    { get { _resolvedTo != null } }

    [DependentProperty("IsSymbolEvaluated")]
    public abstract Symbol                : TSymbol                 { get; }
    public abstract IsSymbolEvaluated     : bool                    { get; }

    public abstract Name                  : string                  { get; }
    public abstract IsNameValid           : bool                    { get; }

    [DependentProperty("IsFullNameEvaluated")]
    public virtual  FullName              : string                  { get { Symbol.FullName } }
    public virtual  IsFullNameEvaluated   : bool                    { get { Symbol.IsFullNameEvaluated } }

    [DependentProperty("IsKindEvaluated")]
    public          Kind                  : string
    {
      get
      {
        if(IsUnresolved)
          "unresolved"
        else if (IsAmbiguous)
          "ambiguous"
        else if (Symbol.IsKindEvaluated)
          Symbol.Kind
        else
          "<unknown>"
      }
    }
    public          IsKindEvaluated       : bool                    { get { true } }

    [DependentProperty("IsSpanClassEvaluated")]
    public          SpanClass             : SpanClass
    {
      get
      {
        if (IsUnresolved)
          Language.ErrorSpanClass
        else if (IsAmbiguous)
          if (IgnoreAmbiguities)
            this.Symbols.First(s => s.IsSpanClassEvaluated).SpanClass
          else
            Language.ErrorSpanClass
        else if (Symbol.IsSpanClassEvaluated)
          Symbol.SpanClass
        else
          Language.DefaultSpanClass
      }
    }
    public          IsSpanClassEvaluated  : bool                    { get { true } }

    [DependentProperty("IsScopeEvaluated")]
    public          Scope                 : Scope
    {
      [Memoize(InvalidValue=null)] get
      {
        if (IsUnresolved)
          EmptyScope.Instance
        else if (IsAmbiguous)
        {
          mutable builder = UnionScopeBuilder();
          foreach (s when s.IsScopeEvaluated in Symbols)
            UnionScopeBuilder.Add(s.Scope, ref builder);
          builder.ToScope();
        }
        else
          Symbol.Scope
      }
    }
    public          IsScopeEvaluated      : bool
    {
      get
      {
        if (IsUnresolved)
          true
        else if (IsAmbiguous)
        {
          foreach (s when s.IsScopeEvaluated in Symbols)
            return true;
          false
        }
        else
          Symbol.IsScopeEvaluated
      }
    }

    public          Ambiguities           : Seq[DeclarationSymbol] { get { Symbols } }

    public GetSymbols() : Seq[DeclarationSymbol] { Symbols }

    public Resolve[TConcreteSymbol](predicate : Predicate[TConcreteSymbol]) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol
      //where TConcreteSymbol : TSymbol
      requires !IsResolvedToEvaluated
    {
      def bindResult = _result.Filter.[TConcreteSymbol](predicate);
      CreateRevole(bindResult)
    }

    public ResolveOrCopy[TConcreteSymbol]() : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol
      //where TConcreteSymbol : TSymbol
    {
      def bindResult = _result.Filter.[TConcreteSymbol](null);
      if (IsResolvedToEvaluated)
        Resolved(bindResult, this)
      else
        CreateRevole(bindResult)
    }

    public Resolve[TConcreteSymbol]() : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol
      //where TConcreteSymbol : TSymbol
      requires !IsResolvedToEvaluated
    {
      def bindResult = _result.Filter.[TConcreteSymbol](null);
      CreateRevole(bindResult)
    }

    public Resolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[TSymbol, TConcreteSymbol]) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol
      requires !IsResolvedToEvaluated
    {
      def algorithm = algorithm ?? ResolutionAlgorithms.TryCast;
      def bindResult = _result.Map.[TConcreteSymbol](algorithm);
      CreateRevole(bindResult)
    }

    public ResolveAsIgnoreAmbiguities() : Ref[TSymbol]
    {
      def result = Ignore(_result, this);
      _resolvedTo = result;
      result
    }

    public Contains[TSoughtForSymbol]() : bool
      where TSoughtForSymbol : DeclarationSymbol
    {
      foreach (_ is TSoughtForSymbol in this.Symbols)
        return true;

      false
    }

    public Count[TSoughtForSymbol]() : int
      where TSoughtForSymbol : DeclarationSymbol
    {
      mutable count = 0;
      foreach (_ is TSoughtForSymbol in this.Symbols)
        count++;

      count
    }

    public static CreateUnresolved(location : Location) : Ref[TSymbol]
    {
      BindUnresolved(BindResult.Nil(), location, location.GetText())
    }

    public static CreateUnresolved(location : Location, text : string) : Ref[TSymbol]
    {
      BindUnresolved(BindResult.Nil(), location, text)
    }

    public static CreateUnresolved(text : string) : Ref[TSymbol]
    {
      BindUnresolved(BindResult.Nil(), Location.NoLocation, text)
    }

    public static CreateBind(location : Location, bindResult : BindResult[TSymbol]) : Ref[TSymbol]
    {
      match (bindResult)
      {
        | Nil => BindUnresolved(bindResult, location, location.GetText())
        | _   => Bind(bindResult, location)
      }
    }

    public static CreateBind(location : Location, text : string, bindResult : BindResult[TSymbol]) : Ref[TSymbol]
    {
      match (bindResult)
      {
        | Nil => BindUnresolved(bindResult, location, text)
        | _   => Bind(bindResult, location)
      }
    }

    public static CreateBind(location : Location, textId : int, bindResult : BindResult[TSymbol]) : Ref[TSymbol]
    {
      match (bindResult)
      {
        | Nil => BindUnresolved(bindResult, location, StringIndex.GetText(textId))
        | _   => Bind(bindResult, location)
      }
    }

    public static CreateBind(location : Location, symbol : TSymbol) : Ref[TSymbol]
    {
      Bind(BindResult.Single(symbol), location)
    }

    public CreateRevole[TConcreteSymbol](bindResult : BindResult[TConcreteSymbol]) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol
      requires !IsResolvedToEvaluated
    {
      def res =
        match (bindResult)
        {
          | Nil => Unresolved(bindResult, this)
          | _   => Resolved(bindResult, this)
        };
      _resolvedTo = res;
      res
    }

    private class Bind : Ref[TSymbol]
    {
      public this(result : BindResult[TSymbol], location : Location)
      {
        base(result);
        Location = location;
      }

      public override Location            : Location { get; }
      public override Symbol              : TSymbol
      {
          get
          {
            if (ResolvedTo != null && ResolvedTo.IsSymbolEvaluated)
              ResolvedTo.Symbol :> TSymbol
            else if (Symbols.Length == 1)
              Symbols[0]
            else
              assert(false);
          }
      }
      public override IsSymbolEvaluated   : bool     { get { ResolvedTo != null && ResolvedTo.IsSymbolEvaluated || Symbols.Length == 1 } }
      public override IgnoreAmbiguities   : bool     { get { false } }
      public override IsNameValid         : bool     { get { Symbol.IsNameValid } }
      public override Name                : string   { get { Symbol.Name } }
      public override IsFullNameEvaluated : bool     { get { Symbol.IsFullNameEvaluated } }
      public override FullName            : string   { get { Symbol.FullName } }

      public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
      {
        metadataWriter.WriteObject(_result, writer);
      }
      public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
      {
        def location = Location(metadataReader.Source, 0);
        def result   = metadataReader.ReadObject(reader);
        Bind(result, location)
      }
    }

    [Record]
    private class BindUnresolved : Ref[TSymbol]
    {
      public override Location            : Location { get; }
      public override Name                : string   { get; }
      public override IsNameValid         : bool     { get { true } }
      public override IgnoreAmbiguities   : bool     { get { false } }
      public override IsSymbolEvaluated   : bool     { get { false } }
      public override Symbol              : TSymbol  { get { assert(false, "The property Symbol is not evaluated.") } }
      public override IsFullNameEvaluated : bool     { get { true } }
      public override FullName            : string   { get { Name } }

      public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
      {
        metadataWriter.WriteObject(_result, writer);
        writer.Write(Name);
      }
      public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
      {
        def location   = Location(metadataReader.Source, 0);
        def result     = metadataReader.ReadObject(reader);
        def name       = reader.ReadString();
        BindUnresolved(result, location, name)
      }
    }

    [Record]
    private abstract class ResolvedBase : Ref[TSymbol]
    {
      public From : IRef;
      public override Location            : Location { get { From.Location } }
      public override IsNameValid         : bool     { get { From.IsNameValid } }
      public override Name                : string   { get { From.Name } }
      public override IsFullNameEvaluated : bool     { get { true } }
      public override FullName            : string   { get { Name } }

      public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
      {
        metadataWriter.WriteObject(_resolvedTo, writer);
        metadataWriter.WriteObject(_result, writer);
        metadataWriter.WriteObject(From, writer);
      }
    }

    [Record]
    private class Resolved : ResolvedBase
    {
      public override Symbol              : TSymbol
      {
          get
          {
            if (ResolvedTo != null && ResolvedTo.IsSymbolEvaluated)
              ResolvedTo.Symbol :> TSymbol
            else if (Symbols.Length == 1)
              Symbols[0]
            else
              assert(false);
          }
      }

      public override IsSymbolEvaluated   : bool     { get { ResolvedTo != null && ResolvedTo.IsSymbolEvaluated || Symbols.Length == 1 } }
      public override IsNameValid         : bool     { get { Symbol.IsNameValid } }
      public override Name                : string   { get { Symbol.Name } }
      public override IsFullNameEvaluated : bool     { get { Symbol.IsFullNameEvaluated } }
      public override FullName            : string   { get { Symbol.FullName } }

      public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
      {
        def resolvedTo = metadataReader.ReadObject(reader);
        def result     = metadataReader.ReadObject(reader);
        def from       = metadataReader.ReadObject(reader);
        def res = Resolved(result, from);
        res._resolvedTo = resolvedTo;
        res
      }
    }

    [Record]
    private class Unresolved : ResolvedBase
    {
      public override IsSymbolEvaluated   : bool     { get { false } }
      public override Symbol              : TSymbol  { get { assert(false, "The property Symbol is not evaluated.") } }

      public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
      {
        def resolvedTo = metadataReader.ReadObject(reader);
        def result     = metadataReader.ReadObject(reader);
        def from       = metadataReader.ReadObject(reader);
        def res = Unresolved(result, from);
        res._resolvedTo = resolvedTo;
        res
      }
    }

    [Record]
    private class Ignore : ResolvedBase
    {
      public override IgnoreAmbiguities : bool     { get { true } }
      public override IsSymbolEvaluated : bool     { get { From.IsSymbolEvaluated } }
      public override Symbol            : TSymbol  { get { From.Symbol :> TSymbol } }

      public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
      {
        def resolvedTo = metadataReader.ReadObject(reader);
        def result     = metadataReader.ReadObject(reader);
        def from       = metadataReader.ReadObject(reader);
        def res = Ignore(result, from);
        res._resolvedTo = resolvedTo;
        res
      }
    }

    public abstract Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void;

    public override ToString() : string
    {
      def displayCount = 5;
      def symbols = _symbols;
      def syms = if (symbols.Length > displayCount) $"..$(symbols.Take(displayCount))..." else $"..$symbols";
      def typeName = typeof(TSymbol).Name;
      def resolvedTo = if (_resolvedTo != null) "R " else "";
      $"$resolvedTo$syms [$typeName]"
    }
  }
}
#pragma warning restore 10003
