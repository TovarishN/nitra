using System.Threading;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  [Record]
  public class CollectSymbolsAndRefsInSpanAstVisitor : IAstVisitor
  {
    _cancellationToken : CancellationToken;
    _span              : NSpan;

    [RecordIgnore] public Refs  : List[IRef] { get; private set; default List(); }
    [RecordIgnore] public Names : List[Name] { get; private set; default List(); }

    public Visit(parseTree : IAst) : void
    {
      when (_cancellationToken.IsCancellationRequested)
        return;
      
      when (parseTree.Span.IntersectsWith(_span))
        parseTree.Accept(this);
    }

    public Visit(name : Name) : void implements IAstVisitor.Visit
    {
      def span = name.Span;

      when (!span.IntersectsWith(_span) || !name.IsSymbolEvaluated)
        return;

      Names.Add(name);
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      def span = reference.Span;

      when (!span.IntersectsWith(_span) || !reference.IsRefEvaluated)
        return;

      Refs.Add(reference.Ref);
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
