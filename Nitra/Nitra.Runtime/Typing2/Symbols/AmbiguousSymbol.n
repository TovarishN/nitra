using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
// TODO: rename Symbol2 to Symbol and remove follow line
using Symbol  = Nitra.Runtime.Binding.Symbol2;
using ISymbol = Nitra.Runtime.Binding.ISymbol2;

namespace Nitra.Runtime.Binding
{
  public class AmbiguousSymbol : Symbol, IAmbiguousSymbol
  {
    public this(ambiguous : list[ISymbol])
    {
      assert(!ambiguous.IsEmpty);

      Ambiguous = ambiguous;
    }

    public override Name              : string             { get { Ambiguous.Head.Name } }
    public override IsNameValid       : bool               { get { Ambiguous.Head.IsNameValid } }
    public override Kind              : string             { get { "ambiguous" } }
    public override IsResolved        : bool               { get { ResolutionResult != null } }
    public override SpanClass         : string             { get { if (IsResolved) ResolutionResult.SpanClass else "Error" } }
    public          Ambiguous         : list[ISymbol]      { get; }
    public          FilteredAmbiguous : list[ISymbol]      { get; private set; }
    public          AllDeclarations   : Seq[Declaration]
    {
      get
      {
        foreach (a in FilteredAmbiguous ?? Ambiguous)
          foreach (d in a.Declarations)
            yield d;
      }
    }

    public override GetDeclarationsUntyped() : Seq[Declaration]
    {
      AllDeclarations
    }

    mutable _resolutionResult : ISymbol;

    public override ResolutionResult : ISymbol { get { _resolutionResult } }
    public SetResolutionResult(value : ISymbol) : void
    {
      assert2(_resolutionResult == null);
      _resolutionResult = value;
      FilteredAmbiguous = [value];
    }

    public SetResolutionResultList(values : list[ISymbol]) : void
    {
      assert2(FilteredAmbiguous == null);
      FilteredAmbiguous = values;
    }
    
    public override TryResolve(reference : Reference, algorithm : Func[IAmbiguousSymbol, Seq[ISymbol]]) : ISymbol
    {
      SymbolUtils.TryResolve(reference, this, algorithm);
    }

    public override ToString() : string { if (IsResolved) ResolutionResult.ToString() else $<#$Kind: ..$(Ambiguous; " "; _.FullName)#>  }
  }
}
