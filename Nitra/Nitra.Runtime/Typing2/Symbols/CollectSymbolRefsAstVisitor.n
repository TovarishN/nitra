using System.Threading;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  [Record]
  public class CollectSymbolRefsAstVisitor : IAstVisitor
  {
    _cancellationToken    : CancellationToken;
    _projectSupport       : IProjectSupport { get; }
    public Symbol         : DeclarationSymbol { get; }

    [RecordIgnore] public FoundSymbols : List[IRef] { get; default List(); }

    public Visit(parseTree : IAst) : void
    {
      when (_cancellationToken.IsCancellationRequested)
        return;

      parseTree.Accept(this);
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      unless (reference.IsRefEvaluated)
        return;

      def loop(r : IRef) : void
      {
        if (r.IsSymbolEvaluated)
        {
          if (r.Symbol.Equals(Symbol))
            FoundSymbols.Add(r);
          else if (r.IsResolvedToEvaluated)
            loop(r.ResolvedTo);
          else
          {
            mutable type;
            mutable typeArgs;

            when (_projectSupport.DeconstructType(r.Symbol, out type, out typeArgs))
              when (type.Equals(Symbol))
                FoundSymbols.Add(r);
          }
        }
        else when (r.IsAmbiguous)
        {
          foreach (a when a.Equals(Symbol) in r.Ambiguities)
          {
            FoundSymbols.Add(r);
            return;
          }
        }
      }

      loop(reference.Ref)
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
