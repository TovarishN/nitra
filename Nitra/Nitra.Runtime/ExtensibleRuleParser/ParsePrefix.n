using Nitra.Internal.Recovery;
using Nitra.Runtime.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;

using System;
using System.Collections.Generic;

namespace Nitra.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public BestPrefix(mutable bestResult : int, parseResult : ParseResult) : int
    {
      while (bestResult > 0 && (parseResult.rawTree[bestResult] & RawTreeMask.Flags) != RawTreeFlags.Best)
        bestResult = parseResult.rawTree[bestResult + RawTreeOfs.Next];
      bestResult;
    }

    public BestPrefixRawTreeAtPos(mutable curTextPos : int, parseResult : ParseResult) : int
    {
      mutable prefixRawTreePtr = parseResult.GetRawTree(curTextPos, PrefixId);
      def bestRawTree          = BestPrefix(parseResult.GetPrefix(prefixRawTreePtr), parseResult);
      bestRawTree
    }

    public ParsePrefix(mutable curTextPos : int, text : string, parseResult : ParseResult) : int
    {
      unchecked
      {
        mutable prefixRawTreePtr;
        mutable state = ExtensionRuleParserState();
        state.parseResult = parseResult;
        state.curTextPos = curTextPos;

        prefixRawTreePtr = parseResult.TryGetRawTree(curTextPos, PrefixId);
        when (prefixRawTreePtr > 0)
        {
          def maxFailPos = parseResult.rawTree[prefixRawTreePtr + PrefixOfs.MaxFailPos];
          when (parseResult.MaxFailPos < maxFailPos)
            parseResult.MaxFailPos = maxFailPos;
          state.bestResult = BestPrefix(parseResult.GetPrefix(prefixRawTreePtr), parseResult);
          if (state.bestResult > 0)
          {
            def rawTreeState = parseResult.rawTree[state.bestResult + RawTreeOfs.State];
            if (rawTreeState == ParseResult.RawTreeParsedState)
              return curTextPos + GetPrefixSize(state.bestResult, parseResult);
            else if (rawTreeState < 0)
              assert3(false)
            else
            {
              def prefixRule = PrefixRuleParser(state.bestResult, parseResult);
              def maxFailPos = parseResult.rawTree[state.bestResult + RawTreeOfs.Sizes + prefixRule.SubrulesCount - 1];
              when (maxFailPos > parseResult.MaxFailPos)
                parseResult.MaxFailPos = maxFailPos;
              return -1;
            }
          }
          else if (state.bestResult < 0)
            return curTextPos;
          else
          {
            when (curTextPos > parseResult.MaxFailPos)
              parseResult.MaxFailPos = curTextPos;
            return -1; // облом разбора
          }
        }

        //нет мемоизации префикса
        prefixRawTreePtr = parseResult.Allocate(PrefixOfs.NodeSize, PrefixId);
        parseResult.rawTree[prefixRawTreePtr + PrefixOfs.Next] = parseResult.memoize[curTextPos];
        parseResult.memoize[curTextPos] = prefixRawTreePtr;
        state.bestResult = 0;
        state.bestEndPos = -1;
        state.lastResult = 0;
        state.ambiguous  = false;
        if (curTextPos < text.Length)
        {
          def c = text[curTextPos]; // временная переменная для отсечения правил по первой букве
          for (mutable i = PrefixRules.Length - 1; i >= 0; --i)
          {
            def prefixRule = PrefixRules[i];
            when (prefixRule.LowerBound <= c && c <= prefixRule.UpperBound)
            {
              state.newResult = -1;
              state.newEndPos = prefixRule.Parse(curTextPos, text, ref state.newResult, parseResult);
              when (state.newResult > 0)
                state.Append();
            }
          }
        }
        else
        {
          assert(curTextPos == text.Length);
          when (!CanParseEmptyString)
            return -1;
          for (mutable i = PrefixRules.Length - 1; i >= 0; --i)
          {
            def prefixRule = PrefixRules[i];
            state.newResult = -1;
            state.newEndPos = prefixRule.Parse(curTextPos, text, ref state.newResult, parseResult);
            when (state.newResult > 0)
              state.Append();
          }
        }

        when (state.ambiguous)
        {
          def unfiltered = List();
          mutable ptr = state.lastResult;
          while (ptr > 0)
          {
            def parser = parseResult.GetRuleParser(ptr) :> PrefixRuleParser;
            def flags = parseResult.rawTree[ptr] & ExtensibleRuleParser.RawTreeMask.Flags;
            when (flags == ExtensibleRuleParser.RawTreeFlags.Equal)
              unfiltered.Add(ptr, parser);
            when (flags == ExtensibleRuleParser.RawTreeFlags.Best)
            {
              unfiltered.Add(ptr, parser);
              break;
            }
            ptr = parseResult.rawTree[ptr + ExtensibleRuleParser.RawTreeOfs.Next];
          }
          def parsers = HashSet();
          foreach ((_ptr, parser) in unfiltered)
            _ = parsers.Add(parser);
          state.lastResult = 0;
          foreach ((ptr, parser) in unfiltered)
            when (!parser.HiddenBy.Overlaps(parsers))
            {
              parseResult.rawTree[ptr + ExtensibleRuleParser.RawTreeOfs.Next] = state.lastResult;
              state.lastResult = ptr;
            }
        }

        parseResult.rawTree[prefixRawTreePtr + PrefixOfs.List] = state.lastResult;

        when (state.bestResult <= 0 || state.bestEndPos < 0)// не смогли разобрать префикс
        {
          when (curTextPos > parseResult.MaxFailPos)
            parseResult.MaxFailPos = curTextPos;
          parseResult.rawTree[prefixRawTreePtr + PrefixOfs.MaxFailPos] = parseResult.MaxFailPos;
          return -1;
        }
        parseResult.rawTree[prefixRawTreePtr + PrefixOfs.MaxFailPos] = parseResult.MaxFailPos;
        state.bestEndPos;
      }
    }
  }
}
