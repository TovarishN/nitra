using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.ProjectSystem
{
  [Record]
  public struct CompilerMessage : IComparable[CompilerMessage]
  {
    public static EmptyCompilerMessages : ReadOnlyCollection[CompilerMessage] = ReadOnlyCollection(array(0));

    public Type              : CompilerMessageType                 { get; }
    public Kind              : Guid                                { get; }
    public Location          : Location                            { get; }
    public Text              : string                              { get; }
    public Number            : int                                 { get; }

    internal mutable _nestedMessages : List[CompilerMessage];

    public HasNestedMessages : bool                                { get { _nestedMessages != null } }
    public NestedMessages    : ReadOnlyCollection[CompilerMessage]
    {
      get { if (HasNestedMessages) ReadOnlyCollection(_nestedMessages) else EmptyCompilerMessages }
    }

    public override ToString() : string
    {
      def type =
        match (Type)
        {
          | FatalError
          | Error      => "error: "
          | Warning    => "warning: "
          | Hint       => "hint: "
        }
      this.Location.ToMessageString() + type + Text
    }

    public CompareTo(other : Nitra.ProjectSystem.CompilerMessage) : int
    {
      this.Location.CompareTo(other.Location)
    }
  }

  public module CompilerMessageExtensions
  {
    public TranslateTo(this message : CompilerMessage, target : ICompilerMessages) : void
    {
      if (message.HasNestedMessages)
        using (root = target.ReportRootMessage(message.Type, message.Location, message.Text, message.Number))
          message._nestedMessages.TranslateTo(root)
      else
        target.ReportMessage(message.Type, message.Location, message.Text, message.Number)
    }

    public TranslateTo(this messages : Seq[CompilerMessage], target : ICompilerMessages) : void
    {
      foreach (message in messages)
        message.TranslateTo(target)
    }
  }
}
