using Nemerle;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;

using NC = Nemerle.Collections;

namespace Nitra
{
  [Record]
  public variant StatisticsTask
  {
    public Id     : string { get; }
    public Title  : string { get; }
    public abstract Total : TimeSpan { get; }
    public TotalFormatted : string { get { Total.TotalSeconds.ToString("N6") } }
    protected abstract ToString(sb : Text.StringBuilder, level : int) : void;
    public override ToString() : string { def sb = Text.StringBuilder(); ToString(sb, 0); sb.ToString() }
    protected HeaderToString(sb : Text.StringBuilder, level : int) : void
    {
      _ = sb.Append(' ', level);
      _ = sb.AppendLine(this.Title + ": " + this.Total);
    }

    | Single
      {
        public this(idAndTitle : string) { this(idAndTitle, idAndTitle) }
        [RecordIgnore] private _timer : Stopwatch = Stopwatch();
        public Elapsed : TimeSpan { get { _timer.Elapsed } }
        public override Total : TimeSpan { get { Elapsed } }
        protected override ToString(sb : Text.StringBuilder, level : int) : void { HeaderToString(sb, level); }

        public Start()   : void { _timer.Start(); }
        public Restart() : void { _timer.Restart(); }
        public Reset()   : void { _timer.Reset(); }
        public Stop()    : void { _timer.Stop(); }
      }

    | Container
      {
        public this(idAndTitle : string) { this(idAndTitle, idAndTitle) }
        [RecordIgnore] private _tasks : Dictionary[string, StatisticsTask] = Dictionary();
        [RecordIgnore] public  Tasks  : List[StatisticsTask] { get; default List(); }

        public override Total : TimeSpan
        {
          get
          {
            mutable result;
            foreach (t in _tasks.Values)
              result += t.Total;
            result
          }
        }

        protected override ToString(sb : Text.StringBuilder, level : int) : void
        {
          HeaderToString(sb, level);

          def nextLevel = level + 1;

          foreach (task in Tasks)
            task.ToString(sb, nextLevel);
        }

        public Item[id : string] : StatisticsTask
        {
          get
          {
            mutable result;
            _ = _tasks.TryGetValue(id, out result);
            result
          }
        }

        private AddSubtask(task : StatisticsTask) : void
        {
          _tasks.Add(task.Id, task);
          Tasks.Add(task);
        }

        public ReplaceSingleSubtask(idAndTitle : string) : StatisticsTask.Single { ReplaceSingleSubtask(idAndTitle, idAndTitle) }
        public ReplaceSingleSubtask(id : string, title : string) : StatisticsTask.Single
        {
          def newTask = StatisticsTask.Single(id, title);
          ReplaceSubtask(newTask);
          newTask
        }

        public ReplaceSubtask(newTask : StatisticsTask) : void
        {
          mutable node;
          when (_tasks.TryGetValue(newTask.Id, out node))
          {
            def index = Tasks.IndexOf(node);
            Tasks[index] = newTask;
            _tasks[newTask.Id] = newTask;
            return;
          }

          AddSubtask(newTask);
        }

        public ReplaceContainerSubtask(idAndTitle : string) : StatisticsTask.Container { ReplaceContainerSubtask(idAndTitle, idAndTitle) }
        public ReplaceContainerSubtask(id : string, title : string) : StatisticsTask.Container
        {
          def newTask = StatisticsTask.Container(id, title);
          ReplaceSubtask(newTask);
          newTask
        }

        public GetOrAddContainerSubtask(idAndTitle : string) : StatisticsTask.Container { GetOrAddContainerSubtask(idAndTitle, idAndTitle) }
        public GetOrAddContainerSubtask(id : string, title : string) : StatisticsTask.Container
        {
          mutable node;
          when (_tasks.TryGetValue(id, out node))
            return node :> StatisticsTask.Container;

          def newTask = StatisticsTask.Container(id, title);
          AddSubtask(newTask);
          newTask
        }
      }
    }
}
