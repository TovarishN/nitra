using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Runtime;
using Nitra.ProjectSystem;
using Nitra.Typing;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Nitra.Serialization
{
  public sealed class MetadataReader : IMetadataReader, IDisposable
  {
    private _reader                       : BinaryReader;
    private _symbolConstructorRegistry    : ExternalSymbolConstructorRegistry;
    private _externalSymbolPropertyReader : IExternalSymbolPropertyReader;
    private _root                         : OldNamespaceSymbol;
    private _stringTable                  : array[string];
    private _stringTableSourceSnapshot    : array[SourceSnapshot];

    public this(stream : Stream, symbolConstructorRegistry : ExternalSymbolConstructorRegistry, externalSymbolPropertyReader : IExternalSymbolPropertyReader, project : Project, assemblyId : byte, symbolLocation : Location)
    {
      this(stream, symbolConstructorRegistry, externalSymbolPropertyReader, project, project.RootNamespace, assemblyId, symbolLocation)
    }

    public this(stream : Stream, symbolConstructorRegistry : ExternalSymbolConstructorRegistry, externalSymbolPropertyReader : IExternalSymbolPropertyReader, project : Project, root : OldNamespaceSymbol, assemblyId : byte, symbolLocation : Location)
    {
      def reader                    = BinaryReader(stream, Text.Encoding.UTF8);
      _reader                       = reader;
      _stringTable                  = ReadStringTable(reader);
      _stringTableSourceSnapshot    = if (_stringTable == null) null else array(_stringTable.Length);
      _symbolConstructorRegistry    = symbolConstructorRegistry;
      _externalSymbolPropertyReader = externalSymbolPropertyReader ?? DefaultExternalSymbolPropertyReader();
      _root                         = root;
      AssemblyId                    = assemblyId;
      SymbolLocation                = symbolLocation;
      Project                       = project;
    }

    public Dispose() : void
    {
      _reader.Dispose();
    }

    public CreateSymbols() : void
    {
      ReadNameTree();
      ReadSymbolHeaders();
      ReadReferencedAssemblies();
      ReadNameTree();
      ReadExternalSymbolInfo();
    }

    public ReadSymbols() : void
    {
      def loop()
      {
        def symbolId = _reader.ReadInt32();
        when (symbolId > 0)
        {
          def symbol = _localSymbols[symbolId];
          symbol.Deserialize(_reader, this);
          loop();
        }
      }
      loop();
    }

    public ReadSymbolsExternalProperties() : void
    {
      foreach (p in _localSymbols)
        p.Value.ReadExternalProperties(Project, _externalSymbolPropertyReader);
    }

    public AssemblyId     : byte     { get; }

    public SymbolLocation : Location { get; }

    public Project        : Project  { get; }

    public ReferencedAssemblies : Seq[AssemblyName]
    {
      get { _referencedAssemblies.Values }
    }

    private static ReadStringTable(reader : BinaryReader) : array[string]
    {
      def currPos = reader.BaseStream.Position;
      def checkData = reader.ReadBytes(NitraUtils.StringTableCheckData.Length);

      unless (NitraUtils.StringTableCheckData.SequenceEqual(checkData))
      {
        reader.BaseStream.Position = currPos;
        return null;
      }

      def stringTable = array(reader.ReadInt32());

      for (mutable i = 0; i < stringTable.Length; i++)
        stringTable[i] = reader.ReadString();

      def checkString = reader.ReadString();

      assert2(checkString == NitraUtils.StringTableCheckString);

      stringTable
    }

    private ReadNameTree() : void
    {
      def loop()
      {
        def id = _reader.ReadInt32();
        when (id > 0)
        {
          def parentId           = _reader.ReadInt32();
          def partName           = _reader.ReadString();
          def hasNamespaceSymbol = _reader.ReadBoolean();

          def parent = if (parentId == -1) _root.Node else _nodes[parentId];
          def node   =
            if (hasNamespaceSymbol)
            {
              def ([parentNs]) = parent.GetSymbol.[OldNamespaceSymbol](); // parent must be NamespaceSymbol

              match (parent.BindMany.[OldNamespaceSymbol](partName))
              {
                | [ns] => ns.AddDefinition(SymbolLocation); ns.Node // namespace already exists
                | []   =>
                  def nsSymbol = OldNamespaceSymbol(partName);
                  parentNs.AddChild(nsSymbol, SymbolLocation);
                  nsSymbol.AddDefinition(SymbolLocation);
                  nsSymbol.Node

                | _    => assert3(false)
              }
            }
            else
              parent.AddNode(partName);
          _nodes.Add(id, node);
          loop();
        }
      }
      loop();
    }

    private ReadSymbolHeaders() : void
    {
      def loop()
      {
        def symbolTypeId = _reader.ReadString();
        unless (string.IsNullOrEmpty(symbolTypeId))
        {
          def symbolConstructor = _symbolConstructorRegistry.Resolve(symbolTypeId);
          symbolConstructor.Invoke(this, _reader);
          loop();
        }
      }
      loop();
    }

    private ReadReferencedAssemblies() : void
    {
      def loop()
      {
        def assemblyId = _reader.ReadByte();
        when (assemblyId > 0)
        {
          def assemblyName = _reader.ReadString();
          _referencedAssemblies.Add(assemblyId, AssemblyName(assemblyName));
          loop();
        }
      }
      loop();
    }

    private ReadExternalSymbolInfo() : void
    {
      def loopTypes()
      {
        def symbolTypeId = _reader.ReadString();
        unless (string.IsNullOrEmpty(symbolTypeId))
        {
          def loopSymbols()
          {
            def symbolId = _reader.ReadInt32();
            when (symbolId > 0)
            {
              def nodeId     = _reader.ReadInt32();
              def assemblyId = _reader.ReadByte();
              def symbolRef  = ExternalSymbolReference(symbolTypeId, nodeId, assemblyId);
              _externalSymbols.Add(symbolId, symbolRef);
              loopSymbols();
            }
          }
          loopSymbols();
          loopTypes();
        }
      }
      loopTypes();
    }

    private ReadSymbolRef(reader : BinaryReader) : ISymbol implements IMetadataReader.ReadSymbolRef
    {
      match (reader.ReadInt32())
      {
        | 0        => null
        | symbolId => ResolveSymbol(symbolId)
      }
    }

    private static LoadSource(filePath : string) : SourceSnapshot
    {
      def isExecutable = filePath.EndsWith(".dll",  StringComparison.OrdinalIgnoreCase) || filePath.EndsWith(".exe",  StringComparison.OrdinalIgnoreCase);
      def source =
        if (!isExecutable && File.Exists(filePath))
        {
          def text = File.ReadAllText(filePath, Encoding.UTF8);
          SourceSnapshot(text, filePath)
        }
        else
          SingleLineSourceSnapshot("", filePath);

      source
    }

    private ReadLocation(reader : BinaryReader) : Location implements IMetadataReader.ReadLocation
    {
      when (_stringTable == null)
        return SymbolLocation;

      def index      = reader.ReadInt32();
      mutable source = _stringTableSourceSnapshot[index];
      when (source == null)
      {
        source = LoadSource(_stringTable[index]);
        _stringTableSourceSnapshot[index] = source;
      }

      def span = NSpan(reader.ReadInt32(), reader.ReadInt32());
      Location(source, span)
    }

    private ReadString(reader : BinaryReader) : string implements IMetadataReader.ReadString
    {
      def id  = reader.ReadInt32();
      def str = _stringTable[id];
      str
    }

    private RegisterSymbol(symbolId : int, symbol : IImportableSymbol) : void implements IMetadataReader.Register
    {
      _localSymbols.Add(symbolId, symbol)
    }

    private GetNode(nodeId : int) : HierarchyNode implements IMetadataReader.GetNode
    {
      _nodes[nodeId]
    }

    [Memoize]
    private ResolveSymbol(symbolId : int) : ISymbol
    {
      mutable localSymbol;
      when (_localSymbols.TryGetValue(symbolId, out localSymbol))
        return localSymbol;

      mutable externalSymbolRef;
      when (_externalSymbols.TryGetValue(symbolId, out externalSymbolRef))
      {
        def assemblyName = _referencedAssemblies[externalSymbolRef.ReferenceId];
        def node         = _nodes[externalSymbolRef.NodeId];
        def assemblyId   = Project.GetAssemblyId(assemblyName);
        foreach (s is IExportableSymbol in node.GetSymbols())
          when (s.AssemblyId == assemblyId && string.Equals(s.SymbolTypeId, externalSymbolRef.SymbolTypeId, StringComparison.InvariantCulture))
            return s;

        _ = Project.FatalError.[object](SymbolLocation, $"Failed to load symbol '$(node.FullName)'. Add project reference to assembly '$assemblyName'.")
      }

      assert2(false, $"Symbol $symbolId is not resolved.");
      null
    }

    private _nodes                : Dictionary[int,  HierarchyNode]           = Dictionary();
    private _localSymbols         : Dictionary[int,  IImportableSymbol]       = Dictionary();
    private _referencedAssemblies : Dictionary[byte, AssemblyName]            = Dictionary();
    private _externalSymbols      : Dictionary[int,  ExternalSymbolReference] = Dictionary();

    [Record]
    private struct ExternalSymbolReference
    {
      public SymbolTypeId : string { get; }
      public NodeId       : int    { get; }
      public ReferenceId  : byte   { get; }
    }
  }
}
