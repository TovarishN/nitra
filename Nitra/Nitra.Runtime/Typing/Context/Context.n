using Nitra.Runtime;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  [DebuggerDisplay("{DebugViewInline}")]
  public abstract class Context : IContext, ICompilerMessages
  {
    public Parent  : Context { get; }
    public Parents : Seq[Context]
    {
      get
      {
        def lst = List();
        def loop(context : Context) : void
        {
          | null => ()
          | _    => lst.Add(context); loop(context.Parent);
        }

        loop(this);
        lst.Reverse();
        lst
      }
    }

    public virtual Project : Project { get { Parent.Project } }

    public virtual BindMany[T](path : list[Location]) : BindingResult[T]
      where T: Symbol
    {
      Parent.BindMany(path)
    }

    public virtual BindMany[T](name : Location) : BindingResult[T]
      where T: Symbol
    {
      Parent.BindMany(name)
    }

    public DebugView : string
    {
      get { $<#..$(Parents; "\r\n"; p => $"$p        $(p.GetType().Name)")#> }
    }

    public DebugViewInline : string
    {
      get { $<#..$(Parents; "  ->  ")#> }
    }

    public ReportMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void
    {
      Project.CompilerMessages.ReportMessage(messageType, loc, msg, num)
    }

    public ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages
    {
      Project.CompilerMessages.ReportRootMessage(messageType, loc, msg, num)
    }

    public SetFutureMessagesKind(kind : Guid) : void { Project.CompilerMessages.SetFutureMessagesKind(kind); }

    public Remove(predicate : Func[Guid, Location, bool]) : void { Project.CompilerMessages.Remove(predicate); }
  }

  public interface IContext
  {
    Parent  : Context { get; }
    Project : Project { get; }
  }
}
