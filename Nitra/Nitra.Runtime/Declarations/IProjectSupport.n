using Nemerle.Collections;

using Nitra.ProjectSystem;

using System;
using System.Collections.Immutable;
using System.Threading;

namespace Nitra.Declarations
{
  /// Implement this interface if you need custom calculation of the dependent properties for one or more files.
  /// This interface is requested from a start rule after the Parse Tree to AST mapping is finished.
  /// Returns: The project data. It put in "data" parameter in next time when RefreshProject() will be called.
  public interface IProjectSupport
  {
    RefreshReferences(cancellationToken : CancellationToken, project : Project) : DependentPropertyEvalContext;
    RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : DependentPropertyEvalContext) : void;
    GetSymbolById(data : DependentPropertyEvalContext, symbolId : int) : ValueOption[DeclarationSymbol];
    DeconstructType(symbol : DeclarationSymbol, type : out TypeSymbol, typeArgs : out ImmutableArray[TypeSymbol]) : bool;
    /// <summary>Call the callback for each global symbol (namespaces, typese, etc).</summary>
    /// <param name="callback">Call for each gobal symbol. If 'callback' returns true, the symbols visiting will be stopped..</param>
    /// <returns>True if visiting was stopped by 'callback'.</returns>
    VisitGlobalSymbols(data : DependentPropertyEvalContext, callback : Predicate[DeclarationSymbol]) : void;
    Postprocessing(cancellationToken : CancellationToken, project : Project, asts : ImmutableArray[IAst * bool], data : DependentPropertyEvalContext) : void;
  }
}
