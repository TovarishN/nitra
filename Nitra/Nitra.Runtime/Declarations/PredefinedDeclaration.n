using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public class PredefinedDeclaration : DeclarationBase, Declaration
  {
    public this(name : Name, symbolFactory : Func[DeclarationSymbol])
    {
      this(name, symbolFactory, false)
    }

    public this(name : Name, symbolFactory : Func[DeclarationSymbol], ignoreCase : bool)
    {
      _symbolFactory = symbolFactory;
      Source         = name.Source;
      Span           = name.Span;
      __NameImpl     = name;
      IgnoreCase     = ignoreCase;
    }

    private         _symbolFactory   : Func[DeclarationSymbol];
    private mutable _containingTable : TableScope;

    public Name                       : Name              { get { __NameImpl } }
    public IsSymbolEvaluated          : bool              { get { __NameImpl.IsSymbolEvaluated } }
    public Symbol                     : DeclarationSymbol
    {
      get { __NameImpl.Symbol }
      set { __NameImpl.Symbol = value }
    }
    public ResetSymbol() : void { }

    
    public IsContainingTableEvaluated : bool              { get { _containingTable : object != null } }
    public ContainingTable            : TableScope
    {
      get { assert(IsContainingTableEvaluated); _containingTable }
      set { assert(!IsContainingTableEvaluated); _containingTable = value }
    }

    public ResetContainingTable() : void { }

    public override IsParsed : bool { get { false } }

    public override IgnoreCase : bool { get; }

    public override CreateSymbol() : DeclarationSymbol
    {
      _symbolFactory()
    }

    public ContainingTable_Location : string * int * int { get; set; }
    public Symbol_Location : string * int * int { get; set; }

    public override Accept(visitor : IAstVisitor) : void
    {
      visitor.Visit(Name);
    }

    public override ToXaml() : string
    {
      Name.ToXaml()
    }

    public DefineSymbol(containingScope : TableScope = null) : DeclarationSymbol
    {
      assert(!IsSymbolEvaluated, "Predefined declaration already has symbol");

      if (containingScope : object != null)
        containingScope.Define(this, null)
      else
      {
        def symbol = CreateSymbol();
        symbol.AddDeclaration(this);
        Name.Symbol = symbol;
        symbol
      }
    }
  }
}
