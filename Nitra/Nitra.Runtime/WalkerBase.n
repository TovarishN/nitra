using Nemerle;
using Nemerle.Collections;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

[assembly: DefineSurround("not_recovery", false, def old_isRecovered = { def old = _isRecovered; _isRecovered = false; old }, _isRecovered = old_isRecovered)]

namespace Nitra.Runtime
{
  [Record]
  public struct ExtensionAmbiguity[T]
    where T : ExtensionRuleParser
  {
    public RawTreePtr          : int;
    public ExtensionRuleParser : T;
  }

  public abstract class WalkerBase[TContext]
  {
    mutable _isRecovered : bool;
    public IsRecovered : bool { get { _isRecovered } }

    public Walk(parseResult : IParseResult, context : TContext) : void
    {
      def parseResult = parseResult :> ParseResult;
      _isRecovered = parseResult.RecoveredSequences.Count > 0;
      def endPos = parseResult.ParseEnd;

      match (parseResult.RuleParser)
      {
        | ExtensibleRuleParser as ruleParser => WalkExtensible(parseResult.StartPos, endPos, ruleParser, parseResult, context)
        | SimpleRuleParser     as ruleParser => WalkSimple(parseResult.StartPos, endPos, ruleParser, parseResult, context)
        | _                                  => assert3(false)
      }
    }

    public virtual OnDeleted(parseResult : IParseResult, startPos : int, endPos : int, sequenceInfo : SequenceInfo, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnEmpty(ruleInfo : SubruleInfo.Empty, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnMarker(ruleInfo : SubruleInfo.Marker, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, parseResult : IParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      IgnoreParams();
    }

    public virtual OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      IgnoreParams();
    }


    public virtual OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      WalkSimple(startPos, endPos, ruleInfo.RuleParser, parseResult, context);
    }

    public virtual OnListItem(rawTreePtr : int, ruleInfo : SubruleInfo.ListItem, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.ParsingSequence, startPos, endPos, context))
          return;
      }

      assert2(endPos >= 0);

      when (startPos != endPos)
      {
        surroundwith(not_recovery)
        {
          _ = WalkSequence(rawTreePtr, startPos, parseResult, context);
        }
      }
    }

    public virtual OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      WalkExtensible(startPos, endPos, ruleInfo.RuleParser, parseResult, context)
    }

    public virtual OnOption(ruleInfo : SubruleInfo.Option, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      assert2(endPos >= 0);

      when (startPos == endPos)
        return;

      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.Rule.ParsingSequence, startPos, endPos, context))
          return;
      }

      surroundwith(not_recovery)
      {
        def curTextPos = WalkSequence((parseResult :> ParseResult).GetRawTree(startPos, ruleInfo.Rule.Id), startPos, parseResult, context);
        assert3(curTextPos == endPos);
      }
    }

    public virtual OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      mutable curTextPos = startPos;

      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.ParsingSequence, startPos, endPos, context))
          return;
      }

      assert2(endPos >= 0);

      when (startPos != endPos && !ruleInfo.IsOptimized)
      {
        def parseResult = parseResult :> ParseResult;
        surroundwith(not_recovery)
          while (curTextPos < endPos)
          {
            def rawTreePtr = parseResult.GetRawTree(curTextPos, ruleInfo.Item.Id);
            def endPos = curTextPos + parseResult.GetRawTreeSize(rawTreePtr, ruleInfo.Item);
            OnListItem(rawTreePtr, ruleInfo.ListItemRule, curTextPos, endPos, parseResult, context);
            curTextPos = endPos;
          }
        assert3(curTextPos == endPos);
      }
    }

    public virtual OnDyntamicSyntaxExtensionPoint(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      mutable curTextPos = startPos;

      when (_isRecovered)
        when (Walk(parseResult, (ruleInfo.Item.Subrules[0] :> SubruleInfo.ExtensibleCall).RuleParser.DynamicExtensibleParsingSequence, startPos, endPos, context))
          return;

      assert2(endPos >= 0);

      when (startPos != endPos)
      surroundwith(not_recovery)
      {
        mutable ruleParser = (ruleInfo.Item.Subrules[0] :> SubruleInfo.ExtensibleCall).RuleParser;
        mutable grammar    = ruleParser.Grammar;
        def descriptor     = ruleParser.Descriptor :> ExtensibleRuleDescriptor;
        def parseResult    = parseResult :> ParseResult;
        while (curTextPos < endPos)
        {
          mutable prefixRawTreePtr = parseResult.GetRawTree(curTextPos, ruleParser.PrefixId);
          def bestRawTree          = ruleParser.BestPrefix(parseResult.GetPrefix(prefixRawTreePtr), parseResult);
          def endPos               = curTextPos + ruleParser.GetPrefixSize(bestRawTree, parseResult);
          def extensionRuleParser  = ruleParser.PrefixRuleParser(bestRawTree, parseResult);

          OnDynamicExtensibleItem(bestRawTree, curTextPos, endPos, extensionRuleParser, parseResult, context);

          def newGrammar = extensionRuleParser.GrammarChangeHandler(bestRawTree, curTextPos, endPos, parseResult, grammar);
          when (grammar : object != newGrammar)
          {
            grammar    = newGrammar;
            ruleParser = grammar.GetExtensibleRuleParser(descriptor, "0");
          }
          curTextPos = endPos;
        }
        assert3(curTextPos == endPos);
      }
    }

    public virtual OnDynamicExtensibleItem(rawTreePtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : IParseResult, context : TContext) : void
    {
      WalkPrefix(rawTreePtr, startPos, endPos, ruleParser :> PrefixRuleParser, parseResult, context);
    }

    public virtual OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : IParseResult, context : TContext) : void
    {
      mutable curTextPos = startPos;

      when (_isRecovered)
      {
        when (Walk(parseResult, ruleInfo.ParsingSequence, startPos, endPos, context))
          return;
      }

      assert2(endPos >= 0);

      when (startPos != endPos)
      {
        def parseResult = parseResult :> ParseResult;
        surroundwith(not_recovery)
        while (true)
        {
          when (curTextPos >= endPos) break;
          def rawTreePtr = parseResult.GetRawTree(curTextPos, ruleInfo.Item.Id);
          def itemEndPos = curTextPos + parseResult.GetRawTreeSize(rawTreePtr, ruleInfo.Item);
          OnListItem(rawTreePtr, ruleInfo.ListItemRule, curTextPos, itemEndPos, parseResult, context);
          curTextPos = itemEndPos;

          when (curTextPos >= endPos) break;
          def rawTreePtr = parseResult.GetRawTree(curTextPos, ruleInfo.Separator.Id);
          def itemEndPos = curTextPos + parseResult.GetRawTreeSize(rawTreePtr, ruleInfo.Separator);
          OnListItem(rawTreePtr, ruleInfo.ListItemSeparator, curTextPos, itemEndPos, parseResult, context);
          curTextPos = itemEndPos;
        }
        assert3(curTextPos == endPos);
      }
    }

    private GetExtensions[T](parseResult : IParseResult, minRuleId : int, extensions : array[T], begin : int, end : int, ambiguity : out List[ExtensionAmbiguity[T]]) : T
      where T : ExtensionRuleParser
    {
      mutable firstParser;

      foreach (extension in extensions)
      {
        when (extension.RuleId >= minRuleId)
        when ((parseResult :> ParseResult).RecoveredSequences.ContainsKey((begin, end, extension.ParsingSequence)))
        {
          if (firstParser == null)
            firstParser = extension;
          else
          {
            when (ambiguity == null)
            {
              ambiguity = List();
              ambiguity.Add(ExtensionAmbiguity(-1, firstParser));
            }
            ambiguity.Add(ExtensionAmbiguity(-1, extension));
          }
        }
      }

      firstParser
    }

    public Walk(parseResult : IParseResult, subrules : array[SubruleStart], sequenceInfo : SequenceInfo, context : TContext) : void
    {
      StartWalkSequence(sequenceInfo);
      def host = parseResult.ParserHost;

      mutable prevIndexWithMarkers = -1;
      for (mutable i = 0; i < subrules.Length - 1; ++i)
      {
        def begin    = subrules[i].Pos;
        def end      = subrules[i + 1].Pos;
        def state    = host.ParsingStates[subrules[i].State];
        def ruleInfo = state.SubruleInfo;

        when (sequenceInfo != null)
        {
          for (mutable j = prevIndexWithMarkers + 1; j < ruleInfo.IndexWithMarkers; j++)
          {
            def subruleInfo = sequenceInfo.SubrulesWithMarkers[j];
            WalkSubrule(subruleInfo, begin, begin, parseResult, context);
          }
        }

        match (state)
        {
          | DynamicExtensibleItem as state =>
            if (begin == end && begin != parseResult.CompletionPos)
              OnPrefixMissed(state.RuleParser, begin, parseResult, context);
            else
            {
              mutable ambiguousPrefixs;
              def firstPrefix = GetExtensions(parseResult, -1, state.RuleParser.PrefixRules, begin, end, out ambiguousPrefixs);

              if (ambiguousPrefixs != null)
                OnAmbiguousPrefix(parseResult, state.RuleParser, ambiguousPrefixs, begin, end, context);
              else if (firstPrefix != null)
                OnDynamicExtensibleItem(-1, begin, end, firstPrefix, parseResult, context);
              else
              {
                def parseResult = parseResult :> ParseResult;
                mutable pos = begin;
                mutable prefixRawTreePtr = state.RuleParser.FindFirstPrefix(pos, parseResult);
                assert2(prefixRawTreePtr > 0);
                OnDynamicExtensibleItem(prefixRawTreePtr, begin, end, state.RuleParser.PrefixRuleParser(prefixRawTreePtr, parseResult), parseResult, context);
              }
            }

          | ExtensionPrefix  as state =>
            if (begin == end && begin != parseResult.CompletionPos)
              OnPrefixMissed(state.RuleParser, begin, parseResult, context);
            else
            {
              mutable ambiguousPrefixs;
              def firstPrefix = GetExtensions(parseResult, -1, state.RuleParser.PrefixRules, begin, end, out ambiguousPrefixs);

              if (ambiguousPrefixs != null)
                OnAmbiguousPrefix(parseResult, state.RuleParser, ambiguousPrefixs, begin, end, context);
              else when (firstPrefix != null)
                _ = WalkPrefix(-1, begin, end, firstPrefix, parseResult, context);
            }

          | ExtensionPostfix as state =>
            mutable ambiguousPostfixs;
            def firstPrefix = GetExtensions(parseResult, state.RuleParser.FirstPostfixRuleId, state.RuleParser.PostfixRules, begin, end, out ambiguousPostfixs);

            if (ambiguousPostfixs != null)
              OnAmbiguousPostfix(parseResult, state.RuleParser, ambiguousPostfixs, begin, end, context);
            else when (firstPrefix != null)
              _ = WalkPostfix(-1, begin, end, firstPrefix, parseResult, context);

          | Predicate => ()

          | _ => WalkSubrule(ruleInfo, begin, end, parseResult, context)
        }
        prevIndexWithMarkers = if (ruleInfo == null) -1 else ruleInfo.IndexWithMarkers;
      }

      when (sequenceInfo != null)
      {
        def seqEnd = subrules[subrules.Length - 1].Pos;
        for (mutable j = prevIndexWithMarkers + 1; j < sequenceInfo.SubrulesWithMarkers.Length; j++)
        {
          def subruleInfo = sequenceInfo.SubrulesWithMarkers[j];
          WalkSubrule(subruleInfo, seqEnd, seqEnd, parseResult, context)
        }
      }

      FinishWalkSequence(sequenceInfo);
    }

    private WalkSubrule(ruleInfo : SubruleInfo, begin : int, end : int, parseResult : IParseResult, context : TContext) : void
    {
      match (ruleInfo)
      {
        | Marker                                     as ruleInfo => OnMarker                      (    ruleInfo, begin, end, parseResult, context)
        | RegularCall                                as ruleInfo => OnRegularCall                 (    ruleInfo, begin, end, parseResult, context)
        | TokenString                                as ruleInfo => OnTokenString                 (    ruleInfo, begin, end, parseResult, context)
        | SimpleCall                                 as ruleInfo => OnSimpleCall                  (    ruleInfo, begin, end, parseResult, context)
        | ExtensibleCall                             as ruleInfo => OnExtensibleCall              (    ruleInfo, begin, end, parseResult, context)
        | Option                                     as ruleInfo => OnOption                      (    ruleInfo, begin, end, parseResult, context)
        | List(IsDynamicSyntaxExtentionPoint = true) as ruleInfo => OnDyntamicSyntaxExtensionPoint(    ruleInfo, begin, end, parseResult, context)
        | List                                       as ruleInfo => OnList                        (    ruleInfo, begin, end, parseResult, context)
        | ListWithSeparator                          as ruleInfo => OnListWithSeparator           (    ruleInfo, begin, end, parseResult, context)
        | ListItem                                   as ruleInfo => OnListItem                    (-1, ruleInfo, begin, end, parseResult, context)
        | Empty                                      as ruleInfo => OnEmpty                       (    ruleInfo, begin, end, parseResult, context)
      }
    }

    public virtual OnAmbiguous(parseResult : IParseResult, parseWays : array[array[SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, context : TContext) : void
    {
      _ = startPos; _ = endPos;

      foreach (parseWay in parseWays)
        Walk(parseResult, parseWay, sequenceInfo, context)
    }

    public virtual OnAmbiguousPrefix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PrefixRuleParser]], startPos : int, endPos : int, context : TContext) : void
    {
      _ = extensibleRuleParser;
      foreach (parser in ambiguousPrefixs)
        _ = WalkPrefix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
    }

    public virtual OnAmbiguousPostfix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PostfixRuleParser]], startPos : int, endPos : int, context : TContext) : void
    {
      _ = extensibleRuleParser;
      foreach (parser in ambiguousPrefixs)
        _ = WalkPostfix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
    }

    Walk(parseResult : IParseResult, parsingSequence : ParsingSequence, startPos : int, endPos : int, context : TContext) : bool
    {
      when (startPos == endPos && startPos != parseResult.CompletionPos)
        return true;

      def parseResult = parseResult :> ParseResult;
      match (parseResult.TryGetRecoveredSequence(startPos, endPos, parsingSequence))
      {
        | null when startPos == endPos && startPos == parseResult.CompletionPos => true
        | null => false
        | Unambiguous as recoveredSequence =>
          if (recoveredSequence.IsDeleted)
            OnDeleted(parseResult, startPos, endPos, parsingSequence.SequenceInfo, context);
          else
            Walk(parseResult, parseResult.RecoveredSubrules[recoveredSequence.Subrules].Subrules, parsingSequence.SequenceInfo, context);
          true

        | Ambiguous   as recoveredSequence =>
          assert2(!recoveredSequence.IsDeleted);
          def parseWays = array(recoveredSequence.Subrules.Length);
          foreach (subruleStart in recoveredSequence.Subrules with i)
            parseWays[i] = parseResult.RecoveredSubrules[subruleStart].Subrules;

          OnAmbiguous(parseResult, parseWays, parsingSequence.SequenceInfo, startPos, endPos, context);
          true
      }
    }

    public virtual WalkSimple(startPos : int, endPos : int, ruleParser : SimpleRuleParser, parseResult : IParseResult, context : TContext) : void
    {
      when (_isRecovered)
      {
        when (Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context))
          return;
      }

      surroundwith(not_recovery)
      {
        def end = WalkSequence((parseResult :> ParseResult).TryGetRawTree(startPos, ruleParser.RuleId), startPos, parseResult, context);
        assert(end == endPos);
      }
    }

    public virtual WalkExtensible(startPos : int, endPos : int, ruleParser : ExtensibleRuleParser, parseResult : IParseResult, context : TContext) : void
    {
      when (_isRecovered)
      {
        when (Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context))
          return;
      }

      surroundwith(not_recovery)
      {
        def parseResult = parseResult :> ParseResult;
        mutable curTextPos = startPos;
        curTextPos = WalkExtension(parseResult.TryGetRawTree(curTextPos, ruleParser.PrefixId), curTextPos, ruleParser, parseResult, context);
        while (curTextPos < endPos)
          curTextPos = WalkExtension(parseResult.TryGetRawTree(curTextPos, ruleParser.PostfixId), curTextPos, ruleParser, parseResult, context);
        when (curTextPos != endPos)
          assert2(false);
      }
    }

    public WalkExtension(rawTreePtr : int, mutable curTextPos : int, ruleParser : ExtensibleRuleParser, parseResult : IParseResult, context : TContext) : int
    {
      assert(rawTreePtr > 0);

      def parseResult = parseResult :> ParseResult;
      def id          = parseResult.rawTree[rawTreePtr] & ExtensibleRuleParser.RawTreeMask.Id;

      if (id == ruleParser.PrefixId)
      {
        mutable _rawTreePtr = rawTreePtr;
        def bestResult = parseResult.GetPrefix(_rawTreePtr);

        if (bestResult > 0)
        {
          mutable pos = curTextPos;
          mutable prefixRawTreePtr = ruleParser.FindFirstPrefix(pos, parseResult);
          if (ruleParser.FindNextPrefix(prefixRawTreePtr, parseResult) > 0)
          {
            def ambiguousPrefixs = List.[ExtensionAmbiguity[PrefixRuleParser]]();
            def extensionParser = ruleParser.PrefixRuleParser(prefixRawTreePtr, parseResult);
            def endPos = curTextPos + parseResult.GetRawTreeSize(prefixRawTreePtr, extensionParser.SequenceInfo);
            do
            {
              def extensionParser = ruleParser.PrefixRuleParser(prefixRawTreePtr, parseResult);
              ambiguousPrefixs.Add(ExtensionAmbiguity(prefixRawTreePtr, extensionParser));
              prefixRawTreePtr = ruleParser.FindNextPrefix(prefixRawTreePtr, parseResult);
            }
            while (prefixRawTreePtr > 0);

            OnAmbiguousPrefix(parseResult, ruleParser, ambiguousPrefixs, curTextPos, endPos, context);

            endPos
          }
          else
          {
            def extensionParser = ruleParser.PrefixRuleParser(prefixRawTreePtr, parseResult);
            def endPos = curTextPos + parseResult.GetRawTreeSize(prefixRawTreePtr, extensionParser.SequenceInfo);
            WalkPrefix(prefixRawTreePtr, curTextPos, endPos, extensionParser, parseResult, context);
            endPos
          }
        }
        else
        {
          OnPrefixMissed(ruleParser, curTextPos, parseResult, context);
          curTextPos
        }
      }
      else
      {
        mutable pos = curTextPos;
        mutable postfixRawTreePtr = ruleParser.FindFirstPostfix(pos, parseResult);
        if (ruleParser.FindNextPostfix(postfixRawTreePtr, parseResult) > 0)
        {
          def ambiguousPrefixs = List.[ExtensionAmbiguity[PostfixRuleParser]]();
          def extensionParser = ruleParser.PostfixRuleParser(postfixRawTreePtr, parseResult);
          def endPos = curTextPos + parseResult.GetRawTreeSize(postfixRawTreePtr, extensionParser.SequenceInfo);
          do
          {
            def extensionParser = ruleParser.PostfixRuleParser(postfixRawTreePtr, parseResult);
            ambiguousPrefixs.Add(ExtensionAmbiguity(postfixRawTreePtr, extensionParser));
            postfixRawTreePtr = ruleParser.FindNextPostfix(postfixRawTreePtr, parseResult);
          }
          while (postfixRawTreePtr > 0);

          OnAmbiguousPostfix(parseResult, ruleParser, ambiguousPrefixs, curTextPos, endPos, context);

          endPos
        }
        else
        {
          def extensionParser = ruleParser.PostfixRuleParser(postfixRawTreePtr, parseResult);
          def endPos = curTextPos + parseResult.GetRawTreeSize(postfixRawTreePtr, extensionParser.SequenceInfo);
          WalkPostfix(postfixRawTreePtr, curTextPos, endPos, extensionParser, parseResult, context);
          endPos
        }
      }
    }

    public virtual WalkPrefix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PrefixRuleParser, parseResult : IParseResult, context : TContext) : void
    {
      if (rawTreePtr < 0)
        _ = Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context);
      else
        _ = WalkSequence(rawTreePtr, startPos, parseResult, context)
    }

    public virtual WalkPostfix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PostfixRuleParser, parseResult : IParseResult, context : TContext) : void
    {
      if (rawTreePtr < 0)
        _ = Walk(parseResult, ruleParser.ParsingSequence, startPos, endPos, context);
      else
        _ = WalkSequence(rawTreePtr, startPos, parseResult, context)
    }

    public virtual StartWalkSequence (sequenceInfo : SequenceInfo) : void { IgnoreParams(); }
    public virtual FinishWalkSequence(sequenceInfo : SequenceInfo) : void { IgnoreParams(); }

    protected WalkSequence(rawTreePtr : int, mutable curTextPos : int, parseResult : IParseResult, context : TContext) : int
    {
      assert2(rawTreePtr > 0);
      def parseResult = parseResult :> ParseResult;
      assert2(parseResult.rawTree[rawTreePtr + ExtensibleRuleParser.RawTreeOfs.State] == ParseResult.RawTreeParsedState);

      def sequenceInfo = parseResult.GetSequenceInfo(rawTreePtr);
      StartWalkSequence(sequenceInfo);
      foreach (ruleInfo in sequenceInfo.SubrulesWithMarkers)
      {
        if (ruleInfo is Marker as ruleInfo)
          OnMarker(ruleInfo, curTextPos, curTextPos, parseResult, context);
        else
        {
          def sizePtr = rawTreePtr + ruleInfo.Offset;
          def size    = parseResult.GetSize(sizePtr);
          def endPos  = curTextPos + size;

          match (ruleInfo)
          {
            | ListItem                                               => assert(false)
            | Marker                                                 => assert3(false)
            | RegularCall                                as ruleInfo => OnRegularCall                 (ruleInfo, curTextPos, endPos, parseResult, context)
            | TokenString                                as ruleInfo => OnTokenString                 (ruleInfo, curTextPos, endPos, parseResult, context)
            | SimpleCall                                 as ruleInfo => OnSimpleCall                  (ruleInfo, curTextPos, endPos, parseResult, context)
            | ExtensibleCall                             as ruleInfo => OnExtensibleCall              (ruleInfo, curTextPos, endPos, parseResult, context)
            | Option                                     as ruleInfo => OnOption                      (ruleInfo, curTextPos, endPos, parseResult, context)
            | List(IsDynamicSyntaxExtentionPoint = true) as ruleInfo => OnDyntamicSyntaxExtensionPoint(ruleInfo, curTextPos, endPos, parseResult, context)
            | List                                       as ruleInfo => OnList                        (ruleInfo, curTextPos, endPos, parseResult, context)
            | ListWithSeparator                          as ruleInfo => OnListWithSeparator           (ruleInfo, curTextPos, endPos, parseResult, context)
            | Empty                                      as ruleInfo => OnEmpty                       (ruleInfo, curTextPos, endPos, parseResult, context)
          }
          curTextPos = endPos;
        }
      }

      FinishWalkSequence(sequenceInfo);
      curTextPos
    }
  }
}
