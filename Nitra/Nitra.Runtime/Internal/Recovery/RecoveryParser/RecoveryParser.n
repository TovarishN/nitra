using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using Nitra.Runtime;
using Nitra.Runtime.GraphUtils;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;
using SCI = System.Collections.Immutable;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    public ParseResult       : ParseResult;
    public Sequences         : Hashtable[int * ParsingSequence, ParsedSequence] = Hashtable();
    public Records           : array[Hashtable[ParseRecord, TokenChanges]];
    public RecordsToProcess  : Heap[ParseRecord * TokenChanges] = Heap(1024,
      fun ((a, aTokenChanges), (b, bTokenChanges))
      {
        if (b.IsComplete) if (a.IsComplete) 0 else -1
        else              if (a.IsComplete) 1
        else
        {
          def c = (b.Sequence.StartTokenChanges + bTokenChanges).CompareTo(a.Sequence.StartTokenChanges + aTokenChanges);
          if (c != 0)
            c
          else
            b.ParsePos.CompareTo(a.ParsePos)
        }
      });

    public mutable MaxPos       : int = 0;
    public mutable BestSolution : TokenChanges = TokenChanges.Fail;
    public mutable IsRecordsToProcessCorrupted : bool = false;
    public CompletionPos : int;

    public StartSequence : ParsedSequence { get { this.Sequences[0, this.ParseResult.RuleParser.ParsingSequence] } }

    public this(parseResult : IParseResult)
    {
      def parseResultImpl = parseResult :> ParseResult;
      Records       = array(parseResultImpl.Text.Length + 1);
      CompletionPos = parseResultImpl.CompletionPos;
      ParseResult   = parseResultImpl;
    }

    private ErrorPositions : SCG.HashSet[int] = SCG.HashSet();

    public RecoveryFromAllErrors() : void
    {
      def parseSession       = ParseResult.ParseSession;
      def timer = Stopwatch.StartNew();
      def timeout = timer.Elapsed + parseSession.RecoveryTimeout;
      def textPos = 0;
      Records[textPos] = Hashtable();
      match (ParseResult.RuleParser)
      {
        | SimpleRuleParser     as ruleParser => _ = StartParseSequence(textPos, ruleParser.ParsingSequence, TokenChanges.None);
        | ExtensibleRuleParser as ruleParser => _ = StartParseSequence(textPos, ruleParser.ParsingSequence, TokenChanges.None);
        | _                                  => assert3(false)
      }
      Parse();

      mutable prevMaxPos = -1;
      while (BestSolution.IsFail)
      {
        ParseToFailPos();
        def curMaxPos = MaxPos;
        prevMaxPos = MaxPos;

        _ = ErrorPositions.Add(curMaxPos);
        InsertSubrules(curMaxPos);
        //Parse();
        //when (curMaxPos == MaxPos)
          DeleteTokenOrGarbage(curMaxPos, forceDelete = curMaxPos == prevMaxPos);
        //when (RecordsToProcess.Count == 0 && RecordsToComplete.Count == 0)
        //{
        //  BestSolution = BestSolution;
        //  throw Exception("Recovery fail.");
        //}
        Parse();
        when (timer.Elapsed > timeout)
        {
          Delete(curMaxPos, ParseResult.Text.Length);
          Parse();
        }
      }

      SaveRecoveredRawTreePart();

      ParseResult.Keywords = FilterKeywordsForCompletion();
    }

    [Record]
    private class KeywordRecordNode : GraphNodeWithConnections[KeywordRecordNode]
    {
      public Record : ParseRecord;
    }

    private FilterKeywordsForCompletion() : SCI.ImmutableArray[KeywordCompletionInfo]
    {
      when (CompletionPos < 0)
        return SCI.ImmutableArray.Empty;

      def keywords = SCI.ImmutableArray.CreateBuilder();
      foreach (keyword in KeywordsForCompletion)
        when (keyword.ParsePos != CompletionPos)
          keywords.Add(KeywordCompletionInfo(keyword.ParsePos, keyword.ParsingState.SubruleInfo :> SubruleInfo.TokenString));

      def records = Records[CompletionPos];
      when (records == null)
        return keywords.ToImmutable();

      def recordMap = Hashtable();
      foreach (record in records.Keys)
        recordMap[record] = KeywordRecordNode(record);

      foreach (node in recordMap.Values)
      {
        def record = node.Record;
        foreach (caller in record.Callers)
          when (recordMap.Get(caller) is Some(callerNode))
            callerNode.AddConnection(node);
        when (!record.IsComplete)
          foreach (next in record.ParsingState.Next)
            when (recordMap.Get(record.Next(next, record.ParsePos)) is Some(nextNode))
              nextNode.AddConnection(node);
      }
      //def nodes = GraphAlgorithms.FindMaximalDistanceToLeafInDAG(recordMap.Values).ToArray().SortInplace(((_, l), (_, r)) => -l.CompareTo(r));
      //KeywordsForCompletion.
      /*{
        mutable isFake = FakeRecords.Contains(keyword);
        foreach (prev in keyword.ParsingState.Prev)
          when (prev >= 0)
            isFake = isFake || FakeRecords.Contains(ParseRecord(keyword.Sequence, prev, keyword.ParsePos));
        when (keyword.ParsingState.IsStart)
          foreach (caller in keyword.Callers)
            isFake = isFake || FakeRecords.Contains(caller);
        when (!isFake)
          keywords.Add(KeywordCompletionInfo(keyword.ParsePos, keyword.ParsingState.SubruleInfo :> SubruleInfo.TokenString));
      }*/


      keywords.ToImmutable();
    }

    private ParseToFailPos() : void
    {
      def memoization = SCG.Dictionary();
      def grammar = this.ParseResult.RuleParser.Grammar;

      mutable maxPos;
      do
      {
        maxPos = MaxPos;
        mutable count;
        do
        {
          def records = Records[maxPos].KeyValuePairs.ToArray(); // to materialize collection
          count = records.Length;

          // Находим все состояния которые могут съедать мусор
          foreach ((record, tokenChanges) in records)
            when (record.State >= 0)
              foreach (seq in record.ParsingState.CalleeSequences)
                when (seq.CanConsumeErrorTokens)
                {
                  PredictionOrScanning(record, tokenChanges, false);
                  break;
                }

          def sequences = SCG.HashSet(Records[maxPos].Keys.Select(r => r.Sequence));
          foreach (sequence when sequence.ParsingSequence.SequenceInfo != null in sequences)
          {
            when (IsInsideToken(memoization, grammar, sequence) && !sequence.ParsingSequence.CanConsumeErrorTokens)
              continue;
            foreach ((subrule, _) in sequence.ParsedSubrules.KeyValuePairs.NToArray())//TODO optimize
              when (subrule.State >= 0 && subrule.End == maxPos)
              {
                def record = ParseRecord(sequence, subrule.State, subrule.Begin);
                PredictionOrScanning(record, Records[record.ParsePos][record], false);
              }
          }
          Parse();
        }
        while (count < Records[maxPos].Count);
      }
      while (maxPos < MaxPos);
    }

    private static IsInsideToken(memoization : SCG.Dictionary[ParsedSequence, bool], compositeGrammar : CompositeGrammar, seq : ParsedSequence) : bool
    {
      mutable res;
      when (memoization.TryGetValue(seq, out res))
        return res;

      when (seq.ParsingSequence.SequenceInfo is SequenceInfo.Root)
      {
        def parser = seq.ParsingSequence.SequenceInfo.Parser;
        res = compositeGrammar.IsVoidToken(parser);
        memoization[seq] = res;
        when (res)
          return res;
      }

      foreach (caller in seq.Callers)
      {
        res = IsInsideToken(memoization, compositeGrammar, caller.Sequence);
        when (res)
        {
          memoization[seq] = true;
          return true;
        }
      }

      memoization[seq] = false;
      false
    }

    internal static ParsingOrderSubrulesComparison : Comparison[ParsedSubrule * TokenChanges] = ((l, _), (r, _)) =>
    {
      res:
        {
          mutable c;
          c = l.Begin.CompareTo(r.Begin); when (c != 0) res(c);
          c = l.End.CompareTo(r.End); when (c != 0) res(c);
          l.State.CompareTo(r.State);
        }
    };
  }
}
