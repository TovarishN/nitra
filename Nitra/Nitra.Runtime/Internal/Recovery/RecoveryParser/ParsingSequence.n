using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record]
  public partial variant ParsingSequence
  {
    public SequenceInfo        : SequenceInfo;
    public RuleName            : string;
    public RuleDesc            : string;
    public IsToken             : bool;
    public MandatoryTokenCount : int;
    public StartStates         : array[int];
    public EndStates           : array[int];
    public States              : array[ParsingState];

    private _staticStateToEarleyMap : Hashtable[int, int];

    public Grammar             : CompositeGrammar;
    public ParserHost          : ParserHost { get { Grammar.ParserHost } }

    [RecordIgnore]
    public CanConsumeErrorTokens : bool { get; internal set; default false; }

    [RecordIgnore]
    public FirstTokens : SCG.HashSet[TokenParser] = SCG.HashSet();

    | Sequence   { }
    | Extensible { RuleParser : ExtensibleRuleParser }
    | DynamicExtensible { RuleParser : ExtensibleRuleParser }

    [RecordIgnore]
    public Callers             : SCG.HashSet[ParsingCallerInfo] = SCG.HashSet();

    public GetEarleyState(staticState : int) : int
    {
      def earleyState = _staticStateToEarleyMap[staticState];
      assert2(States.Exists(s => s.Id == earleyState));
      earleyState
    }

    public IsStartState(state : int) : bool
    {
      foreach (startState in StartStates)
        when (state == startState)
          return true;
      false
    }

    public IsNullable : bool
    {
      get
      {
        foreach (startState in StartStates)
          when (startState == -1)
            return true;
        false
      }
    }

    public Id : string
    {
      get
      {
        match (this)
        {
          | Sequence          as ps => $"s$(ps.SequenceInfo.Id)"
          | Extensible        as ps => $"e$(ps.RuleParser.PrefixId)bp$(ps.RuleParser.BindingPower)"
          | DynamicExtensible as ps => $"e$(ps.RuleParser.PrefixId)dyn"
        }
      }
    }

    public static CreateSimple(ruleParser : SimpleRuleParser, idBuilder : RuleIdBuilder, grammar : CompositeGrammar) : ParsingSequence
    {
      CreateSequence(ruleParser.Reflection(ruleParser.RuleId), ruleParser.IsTokenRule, Hashtable(), idBuilder, grammar)
    }

    public static CreateExtension(ruleParser : ExtensionRuleParser, idBuilder : RuleIdBuilder, grammar : CompositeGrammar) : ParsingSequence
    {
      CreateSequence(ruleParser.Reflection(ruleParser.RuleId), ruleParser.IsTokenRule, Hashtable(), idBuilder, grammar)
    }

    public static CreateExtensible(ruleParser : ExtensibleRuleParser, idBuilder : RuleIdBuilder, grammar : CompositeGrammar) : ParsingSequence
    {
      def sequenceCtor = ParsingSequence.Extensible(null, ruleParser.Descriptor.Name, "Extensible: " + ruleParser.Descriptor.Name, ruleParser.IsTokenRule, ruleParser.MandatoryTokenCount, _, _, _, _, grammar, ruleParser);
      def builder = ParsingSequenceBuilder(sequenceCtor, idBuilder, null);
      def _prefixState = builder.AddState(ParsingState.ExtensionPrefix (null, false, ruleParser));
      def postfixState = builder.AddState(ParsingState.ExtensionPostfix(null, false, ruleParser));

      builder.AddTransition(postfixState.End,   postfixState.Start);
      builder.AddTransition(postfixState.Start, postfixState.End);

      builder.AddDefaultTransitions();
      builder.CreateSequence();
    }

    public static CreateDynamicExtensible(ruleParser : ExtensibleRuleParser, idBuilder : RuleIdBuilder, grammar : CompositeGrammar) : ParsingSequence
    {
      when (ruleParser.DynamicExtensibleParsingSequence != null)
        return ruleParser.DynamicExtensibleParsingSequence;
      def sequenceCtor = ParsingSequence.DynamicExtensible(null, ruleParser.Descriptor.Name, "DynamicExtensible: " + ruleParser.Descriptor.Name, ruleParser.IsTokenRule, ruleParser.MandatoryTokenCount, _, _, _, _, grammar, ruleParser);
      def builder = ParsingSequenceBuilder(sequenceCtor, idBuilder, null);
      def state = builder.AddState(ParsingState.DynamicExtensibleItem(null, false, ruleParser));
      builder.AddTransition(state.End, state.Start);
      builder.AddDefaultTransitions();
      ruleParser.DynamicExtensibleParsingSequence = builder.CreateSequence();
      ruleParser.DynamicExtensibleParsingSequence;
    }

    public static CreateListSequence(subrule : SubruleInfo.List, staticStateToEarley : Hashtable[int, int], idBuilder : RuleIdBuilder, grammar : CompositeGrammar) : ParsingSequence
    {
      def sequenceCtor = ParsingSequence.Sequence(null, "List", subrule.Description, false, subrule.MandatoryTokenCount, _, _, _, _, grammar);
      def builder = ParsingSequenceBuilder(sequenceCtor, idBuilder, staticStateToEarley);

      def canConsumeErrorTokens = subrule.Item.Subrules.Length == 1 && subrule.Item.Subrules[0] is (SubruleInfo.ExtensibleCall as call when call.RuleParser.ParserData.Descriptor.Name == "IgnoreToken");

      def rule = CreateSequence(subrule.Item, false, staticStateToEarley, idBuilder, grammar);
      def subruleRule = SubruleInfo.ListItem(-1, subrule.Item.Description, -1, false, null, array[], rule, true, subrule.ParseItem);
      subruleRule.MandatoryTokenCount = subrule.Item.MandatoryTokenCount;
      subrule.ListItemRule = subruleRule;
      if (subrule.Max.HasValue)
      {
        for (mutable i = 0; i < subrule.Max.Value; ++i)
        {
          def state = builder.AddState(ParsingState.Subsequence(subruleRule, canConsumeErrorTokens, rule, subrule.Item));
          when (i >= subrule.Min)
            builder.AddTransition(state.Start, builder.EndState);
        }
      }
      else
      {
        mutable lastState;
        for (mutable i = 0; i < if (subrule.Min == 0) 1 else subrule.Min; ++i)
        {
          lastState = builder.AddState(ParsingState.Subsequence(subruleRule, canConsumeErrorTokens, rule, subrule.Item));
        }
        builder.AddTransition(lastState.End, lastState.Start);
      }

      when (subrule.CanParseEmptyString)
        builder.AddTransition(builder.StartState, builder.EndState);

      builder.AddDefaultTransitions();
      def parsingSequence = builder.CreateSequence();
      subrule.ParsingSequence = parsingSequence;
      parsingSequence.CanConsumeErrorTokens = canConsumeErrorTokens;
      parsingSequence
    }

    public static CreateListWithSeparatorSequence(subrule : SubruleInfo.ListWithSeparator, staticStateToEarley : Hashtable[int, int], idBuilder : RuleIdBuilder, grammar : CompositeGrammar) : ParsingSequence
    {
      def sequenceCtor = ParsingSequence.Sequence(null, "ListWithSeparator", subrule.Description, false, subrule.MandatoryTokenCount, _, _, _, _, grammar);
      def builder = ParsingSequenceBuilder(sequenceCtor, idBuilder, staticStateToEarley);

      def rule = CreateSequence(subrule.Item, false, staticStateToEarley, idBuilder, grammar);
      def separator = CreateSequence(subrule.Separator, false, staticStateToEarley, idBuilder, grammar);
      def subruleRule = SubruleInfo.ListItem(-1, subrule.Item.Description, -1, false, null, array[], rule, true, subrule.ParseItem);
      def subruleSeparator = SubruleInfo.ListItem(-1, subrule.Separator.Description, -1, false, null, array[], separator, false, subrule.ParseSeparator);
      subruleRule.MandatoryTokenCount = subrule.Item.MandatoryTokenCount;
      subruleSeparator.MandatoryTokenCount = subrule.Separator.MandatoryTokenCount;
      subrule.ListItemRule = subruleRule;
      subrule.ListItemSeparator = subruleSeparator;

      if (subrule.Max.HasValue)
      {
        def count = subrule.Max.Value;
        mutable ruleState;
        for (mutable i = 0; i < count; ++i)
        {
          ruleState = builder.AddState(ParsingState.Subsequence(subruleRule, false, rule, subrule.Item));
          when (i == 0)
            builder.AddTransition(builder.StartState, ruleState.Start);
          when (i >= subrule.Min)
            builder.AddTransition(ruleState.Start, builder.EndState);
          when (i < count - 1)
            _ = builder.AddState(ParsingState.Subsequence(subruleSeparator, false, separator, subrule.Separator));
        }
        builder.AddDefaultSequenceTransitions();
        builder.AddTransition(ruleState.End, builder.EndState);
        when (subrule.HangingSeparator)
        {
          def separatorState = builder.AddState(ParsingState.Subsequence(subruleSeparator, false, separator, subrule.Separator));
          builder.AddTransition(separatorState.Start, builder.EndState);
          builder.AddTransition(separatorState.End, builder.EndState);
        }
      }
      else
      {
        def count = if (subrule.Min == 0) 1 else subrule.Min;
        mutable ruleState;
        mutable separatorState;
        for (mutable i = 0; i < count; ++i)
        {
          ruleState = builder.AddState(ParsingState.Subsequence(subruleRule, false, rule, subrule.Item));
          when (i == 0)
            builder.AddTransition(builder.StartState, ruleState.Start);
          separatorState = builder.AddState(ParsingState.Subsequence(subruleSeparator, false, separator, subrule.Separator));
        }
        builder.AddDefaultSequenceTransitions();
        builder.AddTransition(separatorState.End, ruleState.Start);
        builder.AddTransition(ruleState.End, builder.EndState);
        when (subrule.HangingSeparator)
          builder.AddTransition(separatorState.End, builder.EndState);
      }

      when (subrule.CanParseEmptyString)
        builder.AddTransition(builder.StartState, builder.EndState);

      def parsingSequence = builder.CreateSequence();
      subrule.ParsingSequence = parsingSequence;
      parsingSequence
    }

    private static CreateSequence(sequence : SequenceInfo, isToken : bool, staticStateToEarley : Hashtable[int, int], idBuilder : RuleIdBuilder, grammar : CompositeGrammar) : ParsingSequence
    {
      def sequenceCtor = ParsingSequence.Sequence(sequence, sequence.RuleName, sequence.Description, isToken, sequence.MandatoryTokenCount, _, _, _, _, grammar);
      def builder = ParsingSequenceBuilder(sequenceCtor, idBuilder, staticStateToEarley);

      foreach (subrule in sequence.Subrules)
      {
        when (subrule.HeadPredicate != null)
          _ = builder.AddState(ParsingState.Predicate(subrule, false, subrule.HeadPredicate));

        def state = match (subrule)
        {
          | ListItem                     => assert(false)
          | Marker                       => assert3(false)
          | List              as subrule when subrule.IsDynamicSyntaxExtentionPoint
                                         => ParsingState.DynamicExtensible(subrule, false, CreateDynamicExtensible((subrule.Item.Subrules[0] :> SubruleInfo.ExtensibleCall).RuleParser, idBuilder, grammar))
          | ExtensibleCall    as subrule => ParsingState.Extensible       (subrule, false, subrule.RuleParser, subrule.RuleParser.Descriptor.IsReference)
          | SimpleCall        as subrule => ParsingState.Simple           (subrule, false, subrule.RuleParser, subrule.RuleParser.Descriptor.IsReference)
          | Empty             as subrule => ParsingState.Scan             (subrule, false)
          | RegularCall       as subrule => ParsingState.Scan             (subrule, false)
          | TokenString       as subrule => ParsingState.Scan             (subrule, false)
          | Option            as subrule => ParsingState.Subsequence      (subrule, false, CreateSequence(subrule.Rule, false, staticStateToEarley, idBuilder, grammar), subrule.Rule)
          | List              as subrule => ParsingState.List             (subrule, false, CreateListSequence(subrule, staticStateToEarley, idBuilder, grammar))
          | ListWithSeparator as subrule => ParsingState.ListWithSeparator(subrule, false, CreateListWithSeparatorSequence(subrule, staticStateToEarley, idBuilder, grammar))
        }
        _ = builder.AddState(state);
      }
      builder.AddDefaultTransitions();
      def parsingSequence = builder.CreateSequence();
      sequence.ParsingSequence = parsingSequence;
      parsingSequence
    }

    public override ToString() : string
    {
      def invalidState = -100;
      def sb = Text.StringBuilder();
      ToString(sb, invalidState);
      sb.ToString()
    }

    public ToString(sb : Text.StringBuilder, beforeState : int) : void
    {
      def contains[T](ary : array[T], value : T) : bool
      {
        Array.IndexOf(ary, value) >= 0
      }
      def isNullableLoop(state : ParsingState, seq : ParsingSequence, withSeparator : bool) : bool
      {
        def nextIndex = if (withSeparator) state.Id + 2 else state.Id + 1;
        seq.IsNullable
          || contains(seq.StartStates, state.Id) && contains(seq.StartStates, nextIndex)
          || state.Prev.Any(s => s < state.Id && (contains(seq.ParserHost.ParsingStates[s].Next, nextIndex) || contains(seq.ParserHost.ParsingStates[s].Next, -1)))
      }
      def printState(sb : Text.StringBuilder, state : ParsingState) : void
      {
        _ = sb.Append(state.Id).Append(":").Append(state.SubruleInfo.Description);
      }
      def seq      = this;
      def bp       =
        if (seq is ParsingSequence.Extensible as p)
          p.RuleParser.BindingPower
        else if (seq.SequenceInfo?.Parser is ExtensibleRuleParser as p)
          p.BindingPower
        else 0;

      mutable skip = false;
      foreach (state in seq.States)
      {
        when (skip)
        {
          skip = false;
          continue;
        }

        if (contains(state.Next, state.Id)) // loop
        {
          _ = sb.Append("(");
          when (beforeState == state.Id)
            _ = sb.Append("●  ");
          printState(sb, state);
          _ = sb.Append(")");
          if (isNullableLoop(state, seq, withSeparator=false))
            _ = sb.Append("*");
          else
            _ = sb.Append("+");
        }
        else if (contains(state.Next, state.Id + 1) && contains(seq.ParserHost.ParsingStates[state.Id + 1].Next, state.Id)) // loop with separator
        {
          _ = sb.Append("(");
          when (beforeState == state.Id)
            _ = sb.Append("●  ");
          printState(sb, state);
          _ = sb.Append("; ");
          def sepState = seq.ParserHost.ParsingStates[state.Id + 1];
          when (beforeState == sepState.Id)
            _ = sb.Append("●  ");
          printState(sb, sepState);
          when (sepState.Next.Length > 1)
            _ = sb.Append("; ?");
          _ = sb.Append(")");
          if (isNullableLoop(state, seq, withSeparator=true))
            _ = sb.Append("*");
          else
            _ = sb.Append("+");
          skip = true;
        }
        else
        {
          when (state.Id > 0)
            _ = sb.Append("  ");
          when (beforeState == state.Id)
            _ = sb.Append("●  ");
          printState(sb, state);
        }
      }

      when (beforeState == -1)
          _ = sb.Append(" ♦");

      when (bp > 0)
        _ = sb.Append(" ^ " + bp);
    }
  }
}
