using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.Reflection;

using System;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  [Record, StructuralEquality]
  public partial class ParsedSequence
  {
    [EqualsIgnore]               public           RecoveryParser    : RecoveryParser;
                                 public           StartPos          : int;
                                 public           ParsingSequence   : ParsingSequence;
    [EqualsIgnore]               public           StartTokenChanges : TokenChanges { get; internal set; }

    [RecordIgnore, EqualsIgnore] public           Callers           : SCG.HashSet[ParseRecord]                     = SCG.HashSet();
    [RecordIgnore, EqualsIgnore] public           ParsedSubrules    : Hashtable[ParsedSubrule, TokenChanges]       = Hashtable();
    [RecordIgnore, EqualsIgnore] public           Ends              : Hashtable[int, TokenChanges]                 = Hashtable();

    public IsToken             : bool       { get { ParsingSequence.IsToken }}
    public RuleName            : string     { get { ParsingSequence.RuleName } }
    public ParserHost          : ParserHost { get { ParsingSequence.ParserHost } }

    public StartParse() : void
    {
      foreach (startState in ParsingSequence.StartStates)
        RecoveryParser.StartParseSubrule(ParseRecord(this, startState, StartPos), TokenChanges.None);
    }

    public UpdateSubrules(end : int) : void
    {
      foreach ((subrule, subruleTokenChanges) when (subrule.End == end || subrule.Begin >= end) in ParsedSubrules.KeyValuePairs.ToArray().SortInplace(RecoveryParser.ParsingOrderSubrulesComparison))//TODO:Optimize
      {
        def subruleParseRecord = ParseRecord(this, subrule.State, subrule.Begin);
        mutable startChanges;
        when (RecoveryParser.Records[subrule.Begin].TryGetValue(subruleParseRecord, out startChanges))
          RecoveryParser.SubruleParsed(subrule.Begin, subrule.End, subruleParseRecord, startChanges, subruleTokenChanges);
      }
    }

    public AddParsedSubrule(subrule : ParsedSubrule, subruleTokenChanges : TokenChanges) : void
    {
      mutable oldChanges;
      if (ParsedSubrules.TryGetValue(subrule, out oldChanges))
        when (subruleTokenChanges < oldChanges)
        {
          ParsedSubrules[subrule] = subruleTokenChanges;
          UpdateSubrules(subrule.End);
        }
      else
        ParsedSubrules[subrule] = subruleTokenChanges;
    }

    public GetSequencesForSubrule(parsedSubrule : ParsedSubrule) : Seq[ParsedSequence]
    {
      //this.ParsingSequence.GetSequencesForSubrule(parsedSubrule, this.RecoveryParser);
      when (parsedSubrule.IsEmpty && !{ def cp = this.RecoveryParser.CompletionPos; cp >=0 && parsedSubrule.Begin == cp })
        return;

      def begin = parsedSubrule.Begin;
      def end   = parsedSubrule.End;
      mutable sequence;

      match (this.RecoveryParser.ParseResult.ParserHost.ParsingStates[parsedSubrule.State])
      {
        | Simple           as state =>
          when (RecoveryParser.Sequences.TryGetValue((begin, state.RuleParser.ParsingSequence), out sequence))
            when (sequence.Ends.Contains(end))
              yield sequence;

        | Extensible       as state =>
          when (RecoveryParser.Sequences.TryGetValue((begin, state.RuleParser.ParsingSequence), out sequence))
            when (sequence.Ends.Contains(end))
              yield sequence;

        | DynamicExtensibleItem as state =>
          foreach (prefixRule in state.RuleParser.PrefixRules)
            when (RecoveryParser.Sequences.TryGetValue((begin, prefixRule.ParsingSequence), out sequence))
              when (sequence.Ends.Contains(end))
                yield sequence;

        | ExtensionPrefix  as state =>
          foreach (prefixRule in state.RuleParser.PrefixRules)
            when (RecoveryParser.Sequences.TryGetValue((begin, prefixRule.ParsingSequence), out sequence))
              when (sequence.Ends.Contains(end))
                yield sequence;

        | ExtensionPostfix as state =>
          foreach (postfixRule when state.RuleParser.FirstPostfixRuleId <= postfixRule.RuleId in state.RuleParser.PostfixRules)
            when (RecoveryParser.Sequences.TryGetValue((begin, postfixRule.ParsingSequence), out sequence))
              when (sequence.Ends.Contains(end))
                yield sequence;

        | List              as state1 with seq = state1.Sequence
        | ListWithSeparator as state2 with seq = state2.Sequence
        | Subsequence       as state3 with seq = state3.Sequence
        | DynamicExtensible as state4 with seq = state4.Sequence =>
          when (RecoveryParser.Sequences.TryGetValue((begin, seq), out sequence))
            when (sequence.Ends.Contains(end))
              yield sequence;

        | Scan => ()
        | Predicate => ()
      }
    }

    public AddCaller(caller : ParseRecord) : void
    {
      when (Callers.Add(caller))
        foreach (end in Ends.Keys)
          RecoveryParser.Completion(end, caller, this);
    }

    public AddEnd(end : int, newTokenChanges : TokenChanges) : void
    {
      mutable oldTokenChanges;
      if (Ends.TryGetValue(end, out oldTokenChanges))
      {
        when (newTokenChanges < oldTokenChanges)
        {
          Ends[end] = newTokenChanges;
          foreach (caller in Callers)
            caller.Sequence.AddParsedSubrule(ParsedSubrule(caller.ParsePos, end, caller.State), newTokenChanges);
        }
      }
      else
      {
        Ends[end] = newTokenChanges;
        foreach (caller in Callers)
          RecoveryParser.Completion(end, caller, this);
      }
    }

    public override ToString() : string
    {
      def invalidState = -100;
      def invalidCurPos = -1;
      def sb = Text.StringBuilder();
      ToString(sb, invalidState, invalidCurPos);
      sb.ToString()
    }

    public ToString(sb : Text.StringBuilder, beforeState : int, curPos : int) : void
    {
      def startPos = this.StartPos;

      ParsingSequence.ToString(sb, beforeState);

      _ = sb.Append(", StartPos=");

      _ = sb.Append(startPos);
      _ = sb.Append(")");

      //when (IsSpeculative)
      //  _ = sb.Append(" !!! ");

      def text = this.RecoveryParser.ParseResult.Text;

      when (startPos <= text.Length)
      {
        _ = sb.Append("   «");
        def showLen = 30;

        when (startPos - showLen > 0)
          _ = sb.Append("…");

        _ = sb.Append(text.SafeLeftSubstring(startPos, showLen));

        _ = sb.Append("■");

        def middle = if (curPos >= 0) curPos - startPos else showLen;

        _ = sb.Append(text.SafeRightSubstring(startPos, middle));

        when (curPos >= 0)
          _ = sb.Append("▸");

        when (middle < showLen)
        _ = sb.Append(text.SafeRightSubstring(startPos + middle, showLen - middle));

        when (startPos + showLen <= text.Length)
          _ = sb.Append("…");

        _ = sb.Append("»");

        _ = sb.Append($" Name=«$RuleName»");
      }
    }
  }
}
