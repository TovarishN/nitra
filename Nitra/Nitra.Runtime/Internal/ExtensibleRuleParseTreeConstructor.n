using Nitra;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Internal
{
  public module ExtensibleRuleParseTreeConstructor
  {
    public Create[T](startPos : int, endPos : int, parseResult : ParseResult, bindingPower : string, ruleDescriptor : ExtensibleRuleDescriptor, grammar : CompositeGrammar) : T
      where T: ParseTree
    {
      def ruleParser = grammar.GetExtensibleRuleParser(ruleDescriptor, bindingPower);
      if (startPos < endPos || ruleParser.CanParseEmptyString || startPos == parseResult.ParseSession.CompletionPos)
      {
        match (parseResult.TryGetRecoveredSequence(startPos, endPos, ruleParser.ParsingSequence))
        {
          | null =>
            mutable pos = startPos;
            Create(ref pos, endPos - startPos, parseResult, bindingPower, ruleDescriptor, grammar)

          | Unambiguous(recoveredSubrulesIndex) => CreateImpl(startPos, parseResult, ruleParser, ruleDescriptor, recoveredSubrulesIndex)
          | Ambiguous(indexes) =>
            def ambiguities = array(indexes.Length);
            foreach (recoveredSubrulesIndex in indexes with i)
              ambiguities[i] = CreateImpl(startPos, parseResult, ruleParser, ruleDescriptor, recoveredSubrulesIndex);
            CreateAmbiguous(ruleDescriptor, ambiguities, ParseTreeAmbiguityType.Recovery);
        }
      }
      else
        CreateMissing(parseResult, ruleDescriptor, startPos)
    }

    private CreateImpl[T](startPos : int, parseResult : ParseResult, ruleParser : ExtensibleRuleParser, ruleDescriptor : ExtensibleRuleDescriptor, recoveredSubrulesIndex : int) : T
      where T: ParseTree
    {
      def (subruleStarts, _parsingSequence) = parseResult.RecoveredSubrules[recoveredSubrulesIndex];
      def host = parseResult.ParserHost;

      mutable resultParseTree;

      for (mutable i = 0; i < subruleStarts.Length - 1; ++i)
      {
        def begin    = subruleStarts[i].Pos;
        def end      = subruleStarts[i + 1].Pos;
        def state    = host.ParsingStates[subruleStarts[i].State];

        match (state)
        {
          | ExtensionPrefix =>
            assert(resultParseTree == null);

            resultParseTree =
              if (begin == end && begin != parseResult.ParseSession.CompletionPos) //!!!
                CreateMissing(parseResult, ruleDescriptor, begin);
              else
              {
                def prefixBuffer = LightList();

                foreach (prefix in ruleParser.PrefixRules)
                {
                  match (parseResult.TryGetRecoveredSequence(begin, end, prefix.ParsingSequence))
                  {
                    | null => ()
                    | Unambiguous(recoveredSubrulesIndex) =>
                      prefixBuffer.Add(CreatePrefix(begin, end, recoveredSubrulesIndex, prefix, parseResult));

                    | Ambiguous(indexes) =>
                      foreach (recoveredSubrulesIndex in indexes)
                        prefixBuffer.Add(CreatePrefix(begin, end, recoveredSubrulesIndex, prefix, parseResult));
                  }
                }

                match (prefixBuffer.Count)
                {
                  | 0 => assert(false)
                  | 1 => prefixBuffer.FirstItem
                  | _ => CreateAmbiguous(ruleDescriptor, prefixBuffer.ToArray(), ParseTreeAmbiguityType.Prefix)
                }
              };

          | ExtensionPostfix =>
            assert(resultParseTree != null);

            def postfixBuffer = LightList();

            foreach (postfix when (postfix.RuleId >= ruleParser.FirstPostfixRuleId) in ruleParser.PostfixRules)
            {
              match (parseResult.TryGetRecoveredSequence(begin, end, postfix.ParsingSequence))
              {
                | null => ()
                | Unambiguous(recoveredSubrulesIndex) =>
                  postfixBuffer.Add(CreatePostfix(resultParseTree, startPos, begin, end, recoveredSubrulesIndex, postfix, parseResult));

                | Ambiguous(indexes) =>
                  foreach (recoveredSubrulesIndex in indexes)
                    postfixBuffer.Add(CreatePostfix(resultParseTree, startPos, begin, end, recoveredSubrulesIndex, postfix, parseResult));
              }
            }

            resultParseTree =
              match (postfixBuffer.Count)
              {
                | 0 => assert(false)
                | 1 => postfixBuffer.FirstItem
                | _ => CreateAmbiguous(ruleDescriptor, postfixBuffer.ToArray(), ParseTreeAmbiguityType.Postfix)
              };

          | _ => assert(false, "ExtensionPrefix or ExtensionPostfix expected");
        }
      }

      assert(resultParseTree != null);
      resultParseTree
    }

    public Create[T](pos : ref int, size : int, parseResult : ParseResult, bindingPower : string, ruleDescriptor : ExtensibleRuleDescriptor, grammar : CompositeGrammar) : T
      where T: ParseTree
    {
      def ruleParser = grammar.GetExtensibleRuleParser(ruleDescriptor, bindingPower);
      if (size > 0 || ruleParser.CanParseEmptyString)
      {
        mutable newPos;
        mutable rawTreePtr = ruleParser.FindFirstPrefix(pos, parseResult);
        mutable prefixValue;
        def prefixStartPos = pos;
        if (rawTreePtr > 0)
        {
          def prefixParserOffset = GetExtensionParserOffset(ruleParser.PrefixRules);

          mutable extensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PrefixParsers, rawTreePtr, prefixParserOffset);
          newPos = pos;
          prefixValue = CreatePrefix(ref newPos, rawTreePtr, extensionParser, parseResult);
          rawTreePtr = ruleParser.FindNextPrefix(rawTreePtr, parseResult);
          when (rawTreePtr > 0)
          {
            def firstNewPos = newPos;
            def ambiguitys = SCG.List();
            ambiguitys.Add(prefixValue);
            def parsers = SCG.List();
            parsers.Add(extensionParser);
            while (rawTreePtr > 0)
            {
              def nextExtensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PrefixParsers, rawTreePtr, prefixParserOffset);
              newPos = pos;
              def _nextValue = CreatePrefix(ref newPos, rawTreePtr, nextExtensionParser, parseResult);
              assert(newPos == firstNewPos);
              ambiguitys.Add(_nextValue);
              parsers.Add(nextExtensionParser);
              extensionParser = nextExtensionParser;
              rawTreePtr = ruleParser.FindNextPrefix(rawTreePtr, parseResult);
            }
            // prefix ambiguity
            prefixValue = CreateAmbiguous(ruleDescriptor, ambiguitys.ToArray(), ParseTreeAmbiguityType.Prefix);
          }
          pos = newPos;
        }
        else
        {
          // missing prefix
          prefixValue = CreateMissing(parseResult, ruleDescriptor, prefixStartPos);
        }

        def postfixParserOffset = GetExtensionParserOffset(ruleParser.PostfixRules);
        mutable extensionParser;
        mutable postfixValue;
        while (pos < parseResult.ParseEnd && { rawTreePtr = ruleParser.FindFirstPostfix(pos, parseResult); rawTreePtr > 0 })
        {
          extensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PostfixParsers, rawTreePtr, postfixParserOffset);
          newPos = pos;
          postfixValue = CreatePostfix(prefixValue, prefixStartPos, ref newPos, rawTreePtr, extensionParser, parseResult);
          when (newPos == pos)
            break;
          rawTreePtr = ruleParser.FindNextPostfix(rawTreePtr, parseResult);
          when (rawTreePtr > 0)
          {
            def firstNewPos = newPos;
            def ambiguitys = SCG.List();
            ambiguitys.Add(postfixValue);
            def parsers = SCG.List();
            parsers.Add(extensionParser);
            while (rawTreePtr > 0)
            {
              def nextExtensionParser = GetExtensionParser(parseResult, ruleParser.ParserData.PostfixParsers, rawTreePtr, postfixParserOffset);
              newPos = pos;
              def _nextValue = CreatePostfix(prefixValue, prefixStartPos, ref newPos, rawTreePtr, nextExtensionParser, parseResult);
              assert(newPos == firstNewPos);
              ambiguitys.Add(_nextValue);
              parsers.Add(nextExtensionParser);
              extensionParser = nextExtensionParser;
              rawTreePtr = ruleParser.FindNextPostfix(rawTreePtr, parseResult);
            }
            // postfix ambiguity
            postfixValue = CreateAmbiguous(ruleDescriptor, ambiguitys.ToArray(), ParseTreeAmbiguityType.Postfix);
          }
          prefixValue = postfixValue;
          pos = newPos;
        }

        prefixValue
      }
      else
        CreateMissing(parseResult, ruleDescriptor, pos)
    }

    private GetExtensionParserOffset[T](parsers : array[T]) : int
      where T: ExtensionRuleParser
    {
      //FIXME empty array
      if (parsers.Length > 0) parsers[0].RuleId else 0
    }

    private GetExtensionParser[T](parseResult : ParseResult, parsers : array[T], rawTreePtr : int, offset : int) : T
      where T: ExtensionRuleParser
    {
      def ruleId = parseResult.rawTree[rawTreePtr + ExtensibleRuleParser.RawTreeOfs.Id] & ExtensibleRuleParser.RawTreeMask.Id;
      parsers[ruleId - offset]
    }

    private CreateAmbiguous[T](ruleDescriptor : ExtensibleRuleDescriptor, ambiguitys : array[T], ambiguityType : ParseTreeAmbiguityType) : T
      where T: ParseTree, class
    {
      ruleDescriptor.CreateAmbiguousParseTree(ambiguitys :> array[ParseTree], ambiguityType) :> T
    }

    private CreateMissing[T](parseResult : ParseResult, ruleDescriptor : ExtensibleRuleDescriptor, pos : int) : T
      where T: ParseTree
    {
      ruleDescriptor.CreateMissingParseTree(parseResult, pos) :> T
    }

    private CreatePrefix[T](pos : ref int, rawTreePtr : int, ruleParser : PrefixRuleParser, parseResult : ParseResult) : T
      where T: ParseTree
    {
      (ruleParser.Descriptor :> PrefixRuleDescriptor).CreateParseTree(ref pos, rawTreePtr, parseResult) :> T
    }

    private CreatePrefix[T](startPos : int, endPos : int, recoveredSubrulesIndex : int, ruleParser : PrefixRuleParser, parseResult : ParseResult) : T
      where T: ParseTree
    {
      (ruleParser.Descriptor :> PrefixRuleDescriptor).CreateParseTree(startPos, endPos, recoveredSubrulesIndex, parseResult) :> T
    }

    private CreatePostfix[T](prefix : T, prefixStartPos : int, pos : ref int, rawTreePtr : int, ruleParser : PostfixRuleParser, parseResult : ParseResult) : T
      where T: ParseTree
    {
      (ruleParser.Descriptor :> PostfixRuleDescriptor).CreateParseTree(prefix, prefixStartPos, ref pos, rawTreePtr, parseResult) :> T
    }

    private CreatePostfix[T](prefix : T, prefixStartPos : int, startPos : int, endPos : int, recoveredSubrulesIndex : int, ruleParser : PostfixRuleParser, parseResult : ParseResult) : T
      where T: ParseTree
    {
      (ruleParser.Descriptor :> PostfixRuleDescriptor).CreateParseTree(prefix, prefixStartPos, startPos, endPos, recoveredSubrulesIndex, parseResult) :> T
    }
  }
}
