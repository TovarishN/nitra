using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime.GraphUtils;
using System;
using System.Collections.Generic;
using System.Linq;
using Nitra.Internal;

namespace Nitra.Internal
{
  public sealed class ExtensibleRuleParserData : IParserInfo
  {
    public   Grammar             : CompositeGrammar           { get; }
    public   Descriptor          : ExtensibleRuleDescriptor   { get; }
    internal PrefixDescriptors   : array[PrefixRuleDescriptor];
    internal PostfixDescriptors  : array[PostfixRuleDescriptor];
    internal PrefixParsers       : array[PrefixRuleParser];
    internal PostfixParsers      : array[PostfixRuleParser];
    internal PrefixId            : int;
    internal PostfixId           : int;
    internal Parsers             : List[ExtensibleRuleParser] = List();
    internal MandatoryTokenCount : int { get; set; }
    internal IsDynamicExtensible : bool { get { Descriptor.IsDynamicExtensible } }

    [Record, StructuralEquality]
    private struct PreferIfConflictWithGraphNode : IGraphNode[PreferIfConflictWithGraphNode]
    {
      public RuleDescriptor : ExtensionRuleDescriptor { get; }
      public Connections : IEnumerable[PreferIfConflictWithGraphNode] { get { RuleDescriptor.PreferIfConflictWithList.Select(PreferIfConflictWithGraphNode(_)) } }
    }

    internal this(grammar : CompositeGrammar, rd : ExtensibleRuleDescriptor, prefixDescriptors : array[PrefixRuleDescriptor], postfixDescriptors : array[PostfixRuleDescriptor], ruleIdBuilder : RuleIdBuilder)
    {
      Grammar             = grammar;
      Descriptor          = rd;
      PrefixDescriptors   = prefixDescriptors;
      PostfixDescriptors  = postfixDescriptors;
      PrefixId            = ruleIdBuilder.NewRuleId(this);
      PostfixId           = ruleIdBuilder.NewRuleId(this);
      def newPostfix(postfixRd : PostfixRuleDescriptor)
      {
        def parser = postfixRd.NewParser(Grammar, ruleIdBuilder, this);
        parser.BindingPower = Grammar.GetBindingPower(rd, postfixRd.BindingPower);
        parser
      }
      PrefixParsers       = PrefixDescriptors.Map(rd => rd.NewParser(Grammar, ruleIdBuilder, this));
      PostfixParsers      = PostfixDescriptors.Map(newPostfix);

      when (PrefixDescriptors.Any(d => !d.PreferIfConflictWithList.IsEmpty()))
      {
        foreach (prefix in PrefixDescriptors)
          foreach (prefer in prefix.PreferIfConflictWithList)
            assert(PrefixDescriptors.Contains(prefer));
        assert(GraphAlgorithms.FindMaximalDistanceToLeafInDAG(PrefixDescriptors.Map(PreferIfConflictWithGraphNode(_))).Count() == PrefixDescriptors.Length);

        def d2p = Hashtable();
        for (mutable i = 0; i < PrefixDescriptors.Length; ++i)
          d2p.Add(PrefixDescriptors[i], PrefixParsers[i]);
        foreach (descryptor in PrefixDescriptors)
          foreach (preferIfConflictWith in descryptor.PreferIfConflictWithList)
            _ = d2p[preferIfConflictWith].HiddenBy.Add(d2p[descryptor]);
        mutable updated = true;
        while (updated)
        {
          updated = false;
          foreach (parser in PrefixParsers)
          {
            def newHiddenBy = HashSet(parser.HiddenBy);
            foreach (hiddenByParser in parser.HiddenBy)
              foreach (h in hiddenByParser.HiddenBy)
                _ = newHiddenBy.Add(h);
            when (newHiddenBy.Count != parser.HiddenBy.Count)
            {
              updated = true;
              foreach (n in newHiddenBy)
                _ = parser.HiddenBy.Add(n);
            }
          }
        }
      }
    }

    internal GetParser(bindingPowerName : string) : ExtensibleRuleParser
    {
      def bindingPower = Grammar.GetBindingPower(Descriptor, bindingPowerName);
      while (Parsers.Count <= bindingPower)
        Parsers.Add(null);

      mutable ruleParser = Parsers[bindingPower];
      when (ruleParser == null)
      {
        ruleParser = Internal.ExtensibleRuleParser(this, bindingPower);
        Parsers[bindingPower] = ruleParser;
      }
      ruleParser
    }

    public Init(ruleIdBuilder : RuleIdBuilder) : void
    {
      foreach (ruleParser in PrefixParsers)
        ruleParser.Init(ruleIdBuilder);
      foreach (ruleParser in PostfixParsers)
        ruleParser.Init(ruleIdBuilder);
    }

    public override ToString() : string
    {
      $"$(Descriptor.Name) ($(Descriptor.Grammar.FullName))"
    }
  }
}
