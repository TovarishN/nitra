using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Runtime.Errors
{
  public sealed class ErrorCollectorWalker : WalkerBase[Error.Node]
  {
    [Record]
    class AggregateOperator : INitraReflection
    {
      public OperatorInfo        : OperatorInfo;
      public Prefix              : bool           { get { this.OperatorInfo %&& OperatorInfo.Prefix } }
      public Postfix             : bool           { get { this.OperatorInfo %&& OperatorInfo.Postfix } }
      public Infix               : bool           { get { this.OperatorInfo %&& OperatorInfo.Infix } }
      public Arity               : int            { get; }
      public Errors              : List[Error];

      public CanParseEmptyString : bool           { get { false } }
      public ShortName           : string         { get { FullName } }
      public FullName            : string         { get { $"a $OperatorArity operator" } }
      public IsMarker            : bool           { get { false } }
      public OperatorArity       : string
      {
        get
        {
          match (Arity)
          {
            | 0 => assert(false);
            | 1 => "unary"
            | 2 => "binary"
            | 3 => "ternary"
            | 4 => "quaternary"
            | _ => "n-ary"
          }
        }
      }

      public override ToString() : string{ FullName }
    }

    [Record]
    public variant Error
    {
      | Leaf
        {
          Skipped : INitraReflection; Span : NSpan;

          public override Message(_isTopLevel : bool) : string
          {
            Skipped.ToString()
          }
        }

      | Node
        {
          Frame : INitraReflection;
          mutable IsAlternative : bool;
          [RecordIgnore] public Children : List[Error] = List();

          public Add(ruleInfo : INitraReflection, span : NSpan) : void
          {
            Children.Add(Error.Leaf(ruleInfo, span));
          }

          public override Message(isTopLevel : bool) : string
          {
            def (open, close) = if (isTopLevel) (null, null) else ("(", ")");
            if (Children.Count == 1)
              Children[0].Message()
            else if (IsAlternative)
              $<#$open..$(Children; " or "; _.Message(false))$close#>
            else
              $<#$open..$(Children; " "; _.Message(false))$close#>
          }
        }

      public ErrorPositions(posinitns : HashSet[int]) : void
      {
        match (this)
        {
          | Leaf as x => _ = posinitns.Add(x.Span.EndPos)
          | Node as n =>
            foreach (c in n.Children)
              c.ErrorPositions(posinitns);
        }
      }

      public Clone(pos : int) : Error
      {
        match (this)
        {
          | Leaf(skipped, span) => Leaf(skipped, span)
          | Node as n =>
            def newNode = Node(n.Frame, n.IsAlternative);
            foreach (c in n.Children)
            {
              | Leaf(_, span) when !span.IntersectsWith(pos, pos) => ()
              | _ => newNode.Children.Add(c.Clone(pos));
            }
            newNode
        }
      }

      class ListContextComparer : IEqualityComparer[List[Error]]
      {
        Comparer : ContextComparer = ContextComparer();

        public Equals(xs : List[Error], ys : List[Error]) : bool
        {
          when (xs.Count != ys.Count)
            return false;

          foreach (x in xs with i)
            unless (this.Comparer.Equals(x, ys[i]))
              return false;

          true
        }

        public GetHashCode(xs : List[Error]) : int
        {
          mutable hash;

          foreach (x in xs)
            hash = (hash << 1) ^ Comparer.GetHashCode(x);

          hash
        }
      }

      class ContextComparer : IEqualityComparer[Error]
      {
        public Equals(x : Error, y : Error) : bool
        {
          match (x, y)
          {
            | (Error.Leaf as x, Error.Leaf as y) =>
              when (x.Span != y.Span)
                return false;

              def cmp(a : INitraReflection, b : INitraReflection) : bool
              {
                | (SubruleInfo.TokenString       as a, SubruleInfo.TokenString       as b) => a.Str.Equals(b.Str)
                | (SubruleInfo.SimpleCall        as a, SubruleInfo.SimpleCall        as b) => a.RuleParser : object == b.RuleParser
                | (SubruleInfo.RegularCall       as a, SubruleInfo.RegularCall       as b) => a.Descriptor : object == b.Descriptor
                | (SubruleInfo.ExtensibleCall    as a, SubruleInfo.ExtensibleCall    as b) => a.RuleParser.ParserData : object == b.RuleParser.ParserData
                | (SubruleInfo.ListItem          as a, SubruleInfo.ListItem          as b) => cmpSeq(a.ParsingSequence.SequenceInfo, b.ParsingSequence.SequenceInfo)
                | (SubruleInfo.List              as a, SubruleInfo.List              as b) => cmpSeq(a.Item, b.Item)
                | (SubruleInfo.ListWithSeparator as a, SubruleInfo.ListWithSeparator as b) => cmpSeq(a.Item, b.Item) && cmpSeq(a.Separator, b.Separator)
                | (SubruleInfo.Option            as a, SubruleInfo.Option            as b) => cmpSeq(a.Rule, b.Rule)
                | (SubruleInfo.Marker,                 SubruleInfo.Marker)                 => true
                | _                                                                        => false
              }
              and cmpSeq(a : SequenceInfo, b : SequenceInfo) : bool
              {
                when (a.Subrules.Length == b.Subrules.Length)
                {
                  for (mutable i = 0; i < a.Subrules.Length; ++i)
                    when (!cmp(a.Subrules[i], b.Subrules[i]))
                      return false;

                  return true;
                }

                false
              }

              cmp(x.Skipped, y.Skipped)

            | _ => false
          }
        }

        public GetHashCode(obj : Error) : int
        {
          match (obj)
          {
            | Error.Leaf as obj =>
              def hash =
                match (obj.Skipped)
                {
                  | SubruleInfo.TokenString       as a => a.Str.GetHashCode()
                  | SubruleInfo.RegularCall       as a => a.Descriptor.IdInGrammar
                  | SubruleInfo.SimpleCall        as a => a.RuleParser.RuleId
                  | SubruleInfo.ExtensibleCall    as a => a.RuleParser.Descriptor.IdInGrammar
                  | SubruleInfo.ListItem          as a => a.Owner.ParsingSequence.GetHashCode() ^ a.State
                  | SubruleInfo.List              as a => a.Owner.ParsingSequence.GetHashCode() ^ a.State
                  | SubruleInfo.ListWithSeparator as a => a.Owner.ParsingSequence.GetHashCode() ^ a.State
                  | SubruleInfo.Option            as a => 42 ^ a.Owner.ParsingSequence.GetHashCode() ^ a.State
                  | SubruleInfo.Empty                  => 42
                  | SubruleInfo.Marker                 => 0
                };

              hash ^ obj.Span.GetHashCode()

            | _ => obj.GetHashCode()
          }
        }
      }

      static listContextComparer : ListContextComparer = ListContextComparer();
      static contextComparer     : ContextComparer = ContextComparer();

      public GetFlattenChildren(result : List[Error]) : void
      {
        match (this)
        {
          | Leaf as x => result.Add(x);
          | Node as n when n.IsAlternative =>
            def result2 = List();
            foreach (c in n.Children)
            {
              def altResult = List();
              c.GetFlattenChildren(altResult);
              result2.Add(altResult);
            }

            def nextList(result2 : List[List[Error]]) : List[Error]
            {
              def result = List();
              foreach (lst in result2)
              {
                when (lst.Count == 0)
                  break;
                result.Add(lst[0]);
                lst.RemoveAt(0);
              }

              result
            }
            def isAllTokensIsSameExtensions(tokens : List[Error]) : bool
            {
              mutable current;
              foreach (t in tokens)
              {
                | Leaf(SubruleInfo as info, _) =>
                  if (current == null)
                  {
                    def extensionRuleDescriptorOpt = info.Owner?.ExtensionRuleDescriptorOpt;
                    when (extensionRuleDescriptorOpt == null)
                      return false;
                    current = extensionRuleDescriptorOpt;
                  }
                  else when (current : object != info.Owner?.ExtensionRuleDescriptorOpt)
                    return false;

                | _ => return false;
              }

              true
            }
            def canBeFoldedAsOperator(tokens : List[Error]) : OperatorInfo * int
            {
              mutable currentParserData = null;
              mutable current = (OperatorInfo.None, 0);
              mutable isPostfix;
              mutable ruleCount = 0;

              foreach (t in tokens)
              {
                | Leaf(SubruleInfo as info, _) =>
                  def seq = info.Owner;
                  def parser = seq.Parser :> ExtensionRuleParser;
                  def desc = parser.Descriptor;

                  if (currentParserData == null)
                  {
                    currentParserData = parser.ParserData;
                    current           = (desc.OperatorInfo, desc.Arity);
                    isPostfix         = seq.IsPostfix;
                  }
                  else if (!object.ReferenceEquals(currentParserData, parser.ParserData))
                    return (OperatorInfo.None, 0);
                  else when (current[0] != desc.OperatorInfo && current[1] == desc.Arity)
                    return (OperatorInfo.None, 0);

                  ruleCount++;

                | _ => return (OperatorInfo.None, 0);
              }

              when (currentParserData == null || current[0] == OperatorInfo.None)
                return (OperatorInfo.None, 0);

              if (ruleCount > 3)
                current
              else
                (OperatorInfo.None, 0)
            }
            def isAllTokensEquals(tokens : List[Error]) : bool
            {
              mutable current;
              foreach (t in tokens)
              {
                | Leaf =>
                  if (current == null)
                    current = t;
                  else unless (contextComparer.Equals(current, t))
                    return false;

                | _ => return false;
              }

              true
            }

            def result3 = List();
            mutable current = nextList(result2);

            while (current.Count > 0)
            {
              if (isAllTokensEquals(current))
                result3.Add(current[0]) // все токены идентичны и можно брать первый попавшийся
              else if (isAllTokensIsSameExtensions(current))
              {
                def (operatorType, arity) = canBeFoldedAsOperator(current);
                if (operatorType != OperatorInfo.None && arity > 0)
                {
                  def op = AggregateOperator(operatorType, arity, current);
                  def newContext = Error.Leaf(op, (current[0] :> Error.Leaf).Span); // все токены относятся к одному оператору и могут быть объеденены
                  result3.Add(newContext);
                }
                else
                {
                  def newContext = Error.Node(n.Frame, isAlternative=true); // все токены относятся к одному оператору и могут быть объеденены
                  newContext.Children.AddRange(current);
                  result3.Add(newContext);
                }
              }
              else
              {
                // все плохо и нам не удалось сгруппировать токены. Рапортуем об наличии альтернатив
                def newContext = Error.Node(null, true); // все токены относятся к разным правилам
                newContext.Children.AddRange(current);
                result3.Add(newContext);
              }

              current = nextList(result2);
            }
            result.AddRange(result3);
            ();

          | Node as n =>
            foreach (c in n.Children)
              c.GetFlattenChildren(result);
        }
      }

      public abstract Message(isTopLevel : bool = true) : string;

      public override ToString() : string
      {
        match (this)
        {
          | Leaf as x => x.Skipped + " " + x.Span
          | Node as n => (if (n.IsAlternative) "Alternatives=" else "Children=").ToString() + n.Children.Count + " Tokens=" + DebugTotalLength
                          + "\r\n" + n.Frame?.ShortName;
        }
      }

      public Simplify() : Error
      {
        def result = List();
        GetFlattenChildren(result);
        def newContext = Error.Node(null, false);
        newContext.Children.AddRange(result);
        newContext
      }

      DebugTotalLength : int
      {
        [Memoize]
        get
        {
          match (this)
          {
            | Leaf => 1
            | Node as n => n.Children.Sum(c => c.DebugTotalLength)
          }
        }
      }

      [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
      AsArray2 : array[Error]
      {
        get
        {
          match (this)
          {
            | Leaf => array(0)
            | Node as n => n.Children.ToArray()
          }
        }
      }
    }

    _simpleNodes     : Hashtable[SimpleRuleParser * NSpan, Error.Node] = Hashtable();
    _extensibleNodes : Hashtable[ExtensibleRuleParser * NSpan, Error.Node] = Hashtable();

    public Errors : List[ExpectedError] { get; default List();}
    public Unexpecteds : List[UnexpectedError] { get; default List();}
    public ErrorCount : int { get; private set; }

    public this()
    {
    }

    public static ToDot(parseResult : IParseResult, context : Error) : string
    {
      def graphLabel = DotUtils.DotEscape((parseResult :> ParseResult).DebugText);
      def edges = List();
      def nodes = List();
      def nodesIdMap = Hashtable();
      mutable id = 0;
      def makeNodes(context : Error)
      {
        when (nodesIdMap.ContainsKey(context))
          return;

        id++;
        nodesIdMap.Add(context, id);
        def style = if (context is Node as n when n.IsAlternative) " color=red shape=box" else "";
        def name = "Node_" + id;

        nodes.Add($<#$name [label="$(DotUtils.DotEscape(context.ToString()))"$style]#>);

        when (context is Error.Node as node)
          foreach (child in node.Children)
            makeNodes(child);
      }
      def visited = HashSet();
      def makeEdges(context : Error)
      {
        unless (visited.Add(context))
          return;

        def style = if (context is Node as n when n.IsAlternative) " color=red" else "";
        def id1 = nodesIdMap[context];
        def name1 = "Node_" + id1;

        when (context is Error.Node as node)
          foreach (child in node.Children)
          {
            def id2 = nodesIdMap[child];
            def name2 = "Node_" + id2;
            edges.Add($<#$name1 -> $name2 [label="$(DotUtils.DotEscape(child.ToString()))"$style]#>);
            makeEdges(child);
          }
      }
      makeNodes(context);
      makeEdges(context);
      def content = $<#
        digraph RecoveryParser
        {
          rankdir=LR;
          compound=true;
          label="$graphLabel";
          fontname="Consolas";

          ..$(nodes; "\r\n          ")

          ..$(edges; "\r\n          ")
        }
      #>;

      content
    }

    public Walk(parseResult : IParseResult) : void
    {
      def parseResult = parseResult :> ParseResult;
      Unexpecteds.Clear();
      _simpleNodes.Clear();
      _extensibleNodes.Clear();
      def context = Error.Node(null, isAlternative=false);
      Walk(parseResult, context);

      //DotUtils.ExecuteDot(ToDot(parseResult, context));
      def newContext = context.Simplify();
      //DotUtils.ExecuteDot(ToDot(parseResult, newContext));
      def errorSet = HashSet();
      def errors = List();

      newContext.ErrorPositions(errorSet);

      if (errorSet.Count == 1)
      {
        def pos = errorSet.First();
        errors.Add(ExpectedError(Location(parseResult, pos), newContext));
      }
      else
        foreach (pos in errorSet.OrderBy(x => x))
          errors.Add(ExpectedError(Location(parseResult, pos), newContext.Clone(pos).Simplify()));

      errors.AddRange(Unexpecteds);

      def compilerMessages = parseResult.ParseSession.CompilerMessages;
      foreach (error in errors)
        compilerMessages.Error(error.Location, error.Message);

      ErrorCount = errors.Count;
    }

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      IgnoreParams();

      when (startPos == endPos && !ruleInfo.CanBeEmptyAtPos(startPos, parseResult))
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
      }
    }

    public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      IgnoreParams();

      when (startPos == endPos && !ruleInfo.CanBeEmptyAtPos(startPos, parseResult))
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
      }
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanBeEmptyAtPos(startPos, parseResult))
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      when (IsRecovered)
        base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanBeEmptyAtPos(startPos, parseResult))
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      when (IsRecovered)
        base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanBeEmptyAtPos(startPos, parseResult))
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      when (IsRecovered)
        base.OnList(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanBeEmptyAtPos(startPos, parseResult))
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      when (IsRecovered)
        base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListItem(rawTreePtr : int, ruleInfo : SubruleInfo.ListItem, startPos : int, endPos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      when (startPos == endPos && !ruleInfo.CanBeEmptyAtPos(startPos, parseResult))
      {
        context.Add(ruleInfo, NSpan(startPos, endPos));
        return;
      }
      when (IsRecovered)
        base.OnListItem(rawTreePtr, ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnDeleted(parseResult : IParseResult, startPos : int, endPos : int, _sequenceInfo : SequenceInfo, _context : Error.Node) : void
    {
      Unexpecteds.Add(UnexpectedError(Location(parseResult, startPos, endPos)));
    }

    public override OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, parseResult : IParseResult, context : Error.Node) : void
    {
      IgnoreParams();
      context.Add(ruleParser, NSpan(pos));
    }

    public override WalkSimple(startPos : int, endPos : int, ruleParser : SimpleRuleParser, parseResult : IParseResult, context : Error.Node) : void
    {
      mutable newContext;
      def key = (ruleParser, NSpan(startPos, endPos));
      if (_simpleNodes.TryGetValue(key, out newContext))
        newContext.IsAlternative = true;
      else
      {
        newContext = Error.Node(ruleParser, isAlternative=false);
        _simpleNodes.Add(key, newContext);
        when (IsRecovered)
          base.WalkSimple(startPos, endPos, ruleParser, parseResult, newContext);
      }
      AddErrors(context, newContext);
    }

    public override OnAmbiguous(parseResult : IParseResult, parseWays : array[array[SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, context : Error.Node) : void
    {
      def newContext = Error.Node(sequenceInfo, isAlternative=true);
      base.OnAmbiguous(parseResult, parseWays, sequenceInfo, startPos, endPos, newContext);
      AddErrors(context, newContext);
    }

    public override WalkExtensible(startPos : int, endPos : int, ruleParser : ExtensibleRuleParser, parseResult : IParseResult, context : Error.Node) : void
    {
      mutable newContext;
      def key = (ruleParser, NSpan(startPos, endPos));
      unless (_extensibleNodes.TryGetValue(key, out newContext))
      {
        newContext = Error.Node(ruleParser, isAlternative=true);
        _extensibleNodes.Add(key, newContext);
        when (IsRecovered)
          base.WalkExtensible(startPos, endPos, ruleParser, parseResult, newContext);
      }
      AddErrors(context, newContext);
    }

    public override WalkPrefix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PrefixRuleParser, parseResult : IParseResult, context : Error.Node) : void
    {
      def newContext = Error.Node(ruleParser, isAlternative=false);
      when (IsRecovered)
        base.WalkPrefix(rawTreePtr, startPos, endPos, ruleParser, parseResult, newContext);
      AddErrors(context, newContext);
    }

    public override WalkPostfix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PostfixRuleParser, parseResult : IParseResult, context : Error.Node) : void
    {
      def newContext = Error.Node(ruleParser, isAlternative=false);
      when (IsRecovered)
        base.WalkPostfix(rawTreePtr, startPos, endPos, ruleParser, parseResult, newContext);
      AddErrors(context, newContext);
    }

    AddErrors(context : Error.Node, newContext : Error.Node) : void
    {
      match (newContext.Children.Count)
      {
        | 0 => ()
        | 1 => context.Children.Add(newContext.Children[0])
        | _ => context.Children.Add(newContext);
      }
    }
  }
}
