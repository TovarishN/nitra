using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.ProjectSystem;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

using System.Text;
using SCG = System.Collections.Generic;

namespace Nitra
{
  public class CollectSymbolErrorsVisitor : IAstVisitor
  {
    public CompilerMessages : CompilerMessageList;

    public this()
    {
      this(CompilerMessageList())
    }

    public this(compilerMessages : CompilerMessageList)
    {
      CompilerMessages = compilerMessages;
    }

    public Visit(parseTree : IAst) : void
    {
      parseTree.Accept(this);
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      when (reference.IsRefEvaluated)
      {

        def processRef(r : IRef)
        {
          if (r.IsResolvedToEvaluated)
            processRef(r.ResolvedTo);
          else if (r.IsUnresolved)
            CompilerMessages.Error(reference, $"Unresolved reference '$reference'");
          else when (r.IsAmbiguous && !r.IgnoreAmbiguities)
            CompilerMessages.Error(reference, $"'$reference' is an ambiguous reference between overloads.");
        }

        processRef(reference.Ref)
      }
    }

    public Visit(_ : Name) : void implements IAstVisitor.Visit
    {
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
