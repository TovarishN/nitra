using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  public class VoidRuleWalker : WalkerBase[SpanInfoSet]
  {
    range : NSpan;
    mutable _inVoidRule : bool;

    public this(range : NSpan)
    {
      this.range = range;
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      when (range.IntersectsWith(startPos, endPos) || _inVoidRule)
        base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      when (range.IntersectsWith(startPos, endPos) || _inVoidRule)
        base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnOption(ruleInfo : SubruleInfo.Option, startPos : int, endPos : int, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      when (range.IntersectsWith(startPos, endPos) || _inVoidRule)
        base.OnOption(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      when (range.IntersectsWith(startPos, endPos) || _inVoidRule)
        base.OnList(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      when (range.IntersectsWith(startPos, endPos) || _inVoidRule)
        base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult, context);
    }

    public override WalkSimple(startPos : int, endPos : int, ruleParser : SimpleRuleParser, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      if (ruleParser.IsVoid && range.IntersectsWith(startPos, endPos))
      {
        def old_inVoidRule = _inVoidRule;
        _inVoidRule = true;
        base.WalkSimple(startPos, endPos, ruleParser, parseResult, context);
        _inVoidRule = old_inVoidRule;
      }
      else
        base.WalkSimple(startPos, endPos, ruleParser, parseResult, context);
    }

    public override WalkPrefix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PrefixRuleParser, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      base.WalkPrefix(rawTreePtr, startPos, endPos, ruleParser, parseResult, context);

      when (endPos >= 0 && _inVoidRule)
      {
        def spanClass = ruleParser.Descriptor.SpanClass;
        _ = context.Add(SpanInfo(NSpan(startPos, endPos), spanClass ?? Language.DefaultSpanClass));
      }
    }

    public override WalkPostfix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PostfixRuleParser, parseResult : IParseResult, context : SpanInfoSet) : void
    {
      base.WalkPostfix(rawTreePtr, startPos, endPos, ruleParser, parseResult, context);
      when (endPos >= 0 && _inVoidRule)
      {
        def spanClass = ruleParser.Descriptor.SpanClass;
        when (range.IntersectsWith(startPos, endPos) && endPos > startPos)
          _ = context.Add(SpanInfo(NSpan(startPos, endPos), spanClass ?? Language.DefaultSpanClass));
      }
    }
  }
}
