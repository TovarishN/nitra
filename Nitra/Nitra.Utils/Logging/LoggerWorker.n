using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Logging;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;

namespace Nitra.Logging
{
  public partial module Log
  {
    class LoggerWorker : IDisposable
    {
      public static SaveLogsCount = 3;
      
      _queue   : BlockingCollection[string * ConsoleColor * bool] = BlockingCollection();
      _logFile : StreamWriter;
      _date    : string;
      _name    : string;

      _thread  : Thread;
      _cts     : CancellationTokenSource = CancellationTokenSource();

      public this(name : string)
      {
        assert2(_logFile == null, "Only one logger instance can be created!");
        _name = name;
        def programDataPath  = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        _date                = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
        def logDir           = Path.Combine(programDataPath, "RSDN", "Nitra");
        def logPath          = Path.Combine(logDir, $"$name-$_date.html");
        if (Directory.Exists(logDir))
        {
          def files         = Directory.GetFiles(logDir, name + "-*.html");
          def filesToDelete = files.OrderBy(f => f).Take(Math.Max(files.Length - SaveLogsCount, 0));
          foreach (file in filesToDelete)
          {
            try
            {
              Console.WriteLine(file);
              File.Delete(file);
            }
            catch { _ is IOException => () }
          }
        }
        else
          _ = Directory.CreateDirectory(logDir);
        _logFile             = StreamWriter(logPath);
        _thread              = Thread(ParseWorkerMain);
        _thread.Priority     = ThreadPriority.BelowNormal;
        _thread.IsBackground = true;
        _thread.Start();
      }

      public Log(msg : string, color : ConsoleColor, lineBreak : bool) : void
      {
        _queue.Add((msg, color, lineBreak));
      }

      ParseWorkerMain() : void
      {
        def thread = Thread.CurrentThread;
        thread.Name = "Logger Worker";
        thread.CurrentCulture = CultureInfo.InvariantCulture;
        def header = $<#<!DOCTYPE html>
  <html>
  <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>Nitra $_date</title>
  <style>
  body {
    background-color: black;
    text-align: left;
    font-family: Consolas, Monaco, monospace;
    white-space: pre;
  }
  </style>
  </head>

  <body>#>;
      
        try
        {
          _logFile.WriteLine(header);
          foreach((msg, color, lineBreak) in _queue.GetConsumingEnumerable(_cts.Token))
          {
            try
              if (lineBreak)
                this.WriteLine(msg, color);
              else
                this.Write(msg, color);
            catch
            {
              | e is OperationCanceledException => Log.Canceled(e);
              | e => Log.Exception(e);
            }
          }
        }
        catch
        {
          | e is OperationCanceledException => Log.Canceled(e);
          | e => Log.Exception(e);
        }
        finally
        {
          _logFile.WriteLine("</body>\r\n</html>");
          _logFile.Close();
        }
      }

      static TranslateColor(color : ConsoleColor) : string
      {
        | Black       => "Black"
        | DarkBlue    => "DarkBlue"
        | DarkGreen   => "DarkGreen"
        | DarkCyan    => "DarkCyan"
        | DarkRed     => "DarkRed"
        | DarkMagenta => "DarkMagenta"
        | DarkYellow  => "olive"
        | Gray        => "Gray"
        | DarkGray    => "DarkGray"
        | Blue        => "Blue"
        | Green       => "limegreen"
        | Cyan        => "Cyan"
        | Red         => "Red"
        | Magenta     => "Magenta"
        | Yellow      => "Yellow"
        | White       => "White"
      }
    
      WriteLine(msg : string, color : ConsoleColor) : void
      {
        _logFile.Write(<#<span style="color:#>);
        _logFile.Write(TranslateColor(color));
        _logFile.Write(<#">#>);
        _logFile.Write(msg);
        _logFile.WriteLine(<#</span>#>);
        when (_queue.Count == 0)
          _logFile.Flush();
        Console.ForegroundColor = color;
        Console.WriteLine(msg);
        Console.ResetColor();
      }

      Write(msg : string, color : ConsoleColor) : void
      {
        _logFile.Write(<#<span style="color:#>);
        _logFile.Write(TranslateColor(color));
        _logFile.Write(<#">#>);
        _logFile.Write(msg);
        _logFile.Write(<#</span>#>);
        when (_queue.Count == 0)
          _logFile.Flush();
        Console.ForegroundColor = color;
        Console.Write(msg);
        Console.ResetColor();
      }
      
      public Flush() : void
      {
        try
          _logFile.Flush();
        catch ();
      }
      
      public Dispose() : void
      {
        try
        {
          _cts.Cancel();
          _cts.Dispose();
        }
        catch ();
        _thread.Join();
      }
    } // class LoggerWorker
  } // module Log
} // namespace
