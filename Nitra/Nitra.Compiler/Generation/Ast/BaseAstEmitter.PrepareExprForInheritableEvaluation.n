using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class BaseAstEmitter
  {
    private static PrepareExprForInheritableEvaluation(symbol : PropertyContainerSymbol, expr : PExpr, isQuotation : bool, isModified : ref bool) : PExpr
    {
      mutable isChildrenModified;

      def result = result:
      {
        match (expr)
        {
          | null | Wildcard | Void | As | Where | Literal | Typeof | EmptyArray | Error | ToComplete | Typed | TypedPattern | TypedType => ()
          | Base | This =>
            unless (isQuotation)
              result(Util.locate(expr.Location, <[ self ]>))

          | Is(pat, ty) =>
            def newPat = PrepareExprForInheritableEvaluation(symbol, pat, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Is(expr.Location, newPat, ty))

          | Match(obj, cases, loc) =>
            def newObj   = PrepareExprForInheritableEvaluation(symbol, obj, isQuotation, ref isChildrenModified);
            def newCases = LightList();
            foreach (case in cases)
              newCases.Add(PrepareExprForInheritableEvaluation(symbol, case, isQuotation, ref isChildrenModified));
            when (isChildrenModified)
              result(PExpr.Match(expr.Location, newObj, newCases.ToNList(), loc))

          | Ref(name) =>
            unless (isQuotation)
            when (symbol.LookupProperty(name.Id).HasValue)
              result(Util.locate(expr.Location, <[ self.$(name : name) ]>))

          | Member(obj, m) =>
            def newObj = PrepareExprForInheritableEvaluation(symbol, obj, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Member(expr.Location, newObj, m))

          | Call(func, args) =>
            def newFunc = PrepareExprForInheritableEvaluation(symbol, func, isQuotation, ref isChildrenModified);
            def newArgs = PrepareExprForInheritableEvaluation(symbol, args, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Call(expr.Location, newFunc, newArgs.ToNList()))

          | GenericSpecifier(func, parms) =>
            def newFunc = PrepareExprForInheritableEvaluation(symbol, func, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.GenericSpecifier(expr.Location, newFunc, parms))

          | ListLiteral(items) =>
            def newItems = PrepareExprForInheritableEvaluation(symbol, items, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.ListLiteral(expr.Location, newItems.ToNList()))

          | Assign(target, source) =>
            def newTarget = PrepareExprForInheritableEvaluation(symbol, target, isQuotation, ref isChildrenModified);
            def newSource = PrepareExprForInheritableEvaluation(symbol, source, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Assign(expr.Location, newTarget, newSource))

          | DefMutable(var, value) =>
            def newValue = PrepareExprForInheritableEvaluation(symbol, value, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.DefMutable(expr.Location, var, newValue))

          | Define(pattern, value) =>
            def newValue = PrepareExprForInheritableEvaluation(symbol, value, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Define(expr.Location, pattern, newValue))

          | DefFunctions(funcs) =>
            def newFuncs = LightList();
            foreach (func in funcs)
              newFuncs.Add(PrepareExprForInheritableEvaluation(symbol, func, isQuotation, ref isChildrenModified));
            when (isChildrenModified)
              result(PExpr.DefFunctions(expr.Location, newFuncs.ToNList()))

          | Lambda(func) =>
            def newFunc = PrepareExprForInheritableEvaluation(symbol, func, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Lambda(expr.Location, newFunc))

          | Throw(ex) =>
            def newEx = PrepareExprForInheritableEvaluation(symbol, ex, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Throw(expr.Location, newEx))

          | Try(body, cases) =>
            def newBody = PrepareExprForInheritableEvaluation(symbol, body, isQuotation, ref isChildrenModified);
            def newCases = LightList();
            foreach (case in cases)
              newCases.Add(PrepareExprForInheritableEvaluation(symbol, case, isQuotation, ref isChildrenModified));
            when (isChildrenModified)
              result(PExpr.Try(expr.Location, newBody, newCases.ToNList()))

          | TryFinally(body, handler) =>
            def newBody    = PrepareExprForInheritableEvaluation(symbol, body, isQuotation, ref isChildrenModified);
            def newHandler = PrepareExprForInheritableEvaluation(symbol, handler, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.TryFinally(expr.Location, newBody, newHandler))

          | TypeConversion(e, t) =>
            def newE = PrepareExprForInheritableEvaluation(symbol, e, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.TypeConversion(expr.Location, newE, t))

          | TypeEnforcement(e, t) =>
            def newE = PrepareExprForInheritableEvaluation(symbol, e, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.TypeEnforcement(expr.Location, newE, t))

          | Sequence(body) =>
            def newBody = PrepareExprForInheritableEvaluation(symbol, body, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Sequence(expr.Location, newBody.ToNList()))

          | Tuple(args) =>
            def newArgs = PrepareExprForInheritableEvaluation(symbol, args, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Tuple(expr.Location, newArgs.ToNList()))

          | Array(rank, args) =>
            def newArgs = PrepareExprForInheritableEvaluation(symbol, args, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Array(expr.Location, rank, newArgs))

          | Indexer(obj, args) =>
            def newObj  = PrepareExprForInheritableEvaluation(symbol, obj, isQuotation, ref isChildrenModified);
            def newArgs = PrepareExprForInheritableEvaluation(symbol, args, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Indexer(expr.Location, newObj, newArgs.ToNList()))

          | ParmByRef(e) =>
            def newE = PrepareExprForInheritableEvaluation(symbol, e, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.ParmByRef(expr.Location, newE))

          | ParmOut(e) =>
            def newE = PrepareExprForInheritableEvaluation(symbol, e, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.ParmOut(expr.Location, newE))

          | MacroCall(name, ns, args) =>
            def newArgs = LightList();
            foreach (arg in args)
              newArgs.Add(PrepareExprForInheritableEvaluation(symbol, arg, isQuotation, ref isChildrenModified));
            when (isChildrenModified)
              result(PExpr.MacroCall(expr.Location, name, ns, newArgs.ToNList()))

          | Quoted(body) =>
            def newBody = PrepareExprForInheritableEvaluation(symbol, body, true, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Quoted(expr.Location, newBody))

          | Spliced(e) =>
            def newE = PrepareExprForInheritableEvaluation(symbol, e, false, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Spliced(expr.Location, newE))

          | Ellipsis(e) =>
            def newE = PrepareExprForInheritableEvaluation(symbol, e, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(PExpr.Ellipsis(expr.Location, newE))
        }
        expr
      };

      when (result : object != expr)
        isModified = true;

      result
    }

    private static PrepareExprForInheritableEvaluation(symbol : PropertyContainerSymbol, case : MatchCase, isQuotation : bool, isModified : ref bool) : MatchCase
    {
      mutable isChildrenModified;

      def newBody = PrepareExprForInheritableEvaluation(symbol, case.body, isQuotation, ref isChildrenModified);
      def result =
        if (isChildrenModified)
          MatchCase(case.Location, case.patterns, newBody, case.disable_warnings);
        else
          case;

      when (result : object != case)
        isModified = true;

      result
    }

    private static PrepareExprForInheritableEvaluation(symbol : PropertyContainerSymbol, func : Function_decl, isQuotation : bool, isModified : ref bool) : Function_decl
    {
      mutable isChildrenModified;

      def newBody = PrepareExprForInheritableEvaluation(symbol, func.body, isQuotation, ref isChildrenModified);
      def result =
        if (isChildrenModified)
          Function_decl(func.Location, func.header, newBody);
        else
          func;

      when (result : object != func)
        isModified = true;

      result
    }

    private static PrepareExprForInheritableEvaluation(symbol : PropertyContainerSymbol, exprs : list[PExpr], isQuotation : bool, isModified : ref bool) : LightList[PExpr]
    {
      def result = LightList();
      foreach (expr in exprs)
        result.Add(PrepareExprForInheritableEvaluation(symbol, expr, isQuotation, ref isModified));
      result
    }

    private static PrepareExprForInheritableEvaluation(symbol : PropertyContainerSymbol, case : TryCase, isQuotation : bool, isModified : ref bool) : TryCase
    {
      mutable isChildrenModified;

      def result = result:
      {
        match (case)
        {
          | Catch(ex, type, handler) =>
            def newHandler = PrepareExprForInheritableEvaluation(symbol, handler, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(TryCase.Catch(case.Location, ex, type, newHandler))

          | Filter(ex, type, filter, handler) =>
            def newFilter  = PrepareExprForInheritableEvaluation(symbol, filter, isQuotation, ref isChildrenModified);
            def newHandler = PrepareExprForInheritableEvaluation(symbol, handler, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(TryCase.Filter(case.Location, ex, type, newFilter, newHandler))

          | Ellipsis(handler) =>
            def newHandler = PrepareExprForInheritableEvaluation(symbol, handler, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(TryCase.Ellipsis(case.Location, newHandler))
        }
        case
      };

      when (result : object != case)
        isModified = true;

      result
    }

    private static PrepareExprForInheritableEvaluation(symbol : PropertyContainerSymbol, element : SyntaxElement, isQuotation : bool, isModified : ref bool) : SyntaxElement
    {
      mutable isChildrenModified;

      def result = result:
      {
        match (element)
        {
          | Expression(body) =>
            def newBody = PrepareExprForInheritableEvaluation(symbol, body, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(SyntaxElement.Expression(newBody))

          | MatchCase(body) =>
            def newBody = PrepareExprForInheritableEvaluation(symbol, body, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(SyntaxElement.MatchCase(newBody))

          | Function(body) =>
            def newBody = PrepareExprForInheritableEvaluation(symbol, body, isQuotation, ref isChildrenModified);
            when (isChildrenModified)
              result(SyntaxElement.Function(newBody))

          | _ => ()
        }
        element
      };

      when (result : object != element)
        isModified = true;

      result
    }
  }
}
