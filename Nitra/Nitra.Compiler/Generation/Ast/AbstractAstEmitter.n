using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class AbstractAstEmitter : AstEmitter
  {
    private         _symbol            : AbstractAstSymbol;
    private mutable _tb                : TypeBuilder;
    private mutable _ambiguousTb       : TypeBuilder;
    private         _listEmitter       : ListAstEmitter;
    private         _optionEmitter     : OptionAstEmitter;

    public this(environment : EmitterEnvironment, symbol : AbstractAstSymbol)
    {
      base(environment, environment.NamespaceOfSymbol(symbol));
      this._symbol        = symbol;
      this._listEmitter   = ListAstEmitter(environment, symbol);
      this._optionEmitter = OptionAstEmitter(environment, symbol);
    }

    public override DefineNestedType(decl : ClassMember.TypeDeclaration) : TypeBuilder
    {
      assert(_tb != null);
      _tb.DefineNestedType(decl)
    }

    public override DefineTypes() : void
    {
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        assert(_tb == null);

        def baseTypes = SCG.List();
        baseTypes.Add(<[ $(Environment.AstTypeVar : typed) ]>);
        foreach (baseAst in _symbol.BaseAsts)
          baseTypes.Add(<[ $(Environment.GetAstType(baseAst) : typed) ]>);

        _tb = NemerleEnv.Define(<[ decl:
          public partial interface $(_symbol.Name : usesite) : ..$baseTypes
          {
          }
        ]>);

        assert(_ambiguousTb == null);
        _ambiguousTb = DefineAmbiguousAst(_tb, <[ Nitra.Declarations.AstBase ]>);

        _listEmitter.DefineTypes(_tb);
        _optionEmitter.DefineTypes(_tb);
      })
    }

    public override DefineMembers() : void
    {
      assert(_tb != null);

      def missingBody = SCG.List();
      missingBody.Add(<[ this.File = file ]>);
      missingBody.Add(<[ this.Span = span ]>);

      def dependentProps = SCG.Dictionary();

      def implementStructuralProperty(propertySymbol : PropertySymbol, propertyType : FixedType) : string
      {
        def name = propertySymbol.Name;
        when (propertySymbol.PropertyContainer == _symbol)
          _tb.Define(<[ decl: $(name : usesite) : $(propertyType : typed) { get; } ]>);

        def backingFieldName = Util.tmpname(name);
        _ambiguousTb.Define(<[ decl: private $(backingFieldName : usesite) : $(propertyType : typed) ]>);
        _ambiguousTb.Define(<[ decl:
          public $(name : usesite) : $(propertyType : typed)
          {
            get
            {
              if (this.IsAmbiguous)
                this.Ambiguities[0].$(name : usesite)
              else
                this.$(backingFieldName : usesite)
            }
          }
        ]>);
        backingFieldName
      }

      def thisType = _tb.GetMemType();

      foreach (s in _symbol.AllProperties)
      {
        | StructuralPropertySymbol as propertySymbol =>
          def propertyType     = TypeCompiler.CompileStructuralPropertyType(propertySymbol);
          def backingFieldName = implementStructuralProperty(propertySymbol, propertyType.Type);
          match (propertyType)
          {
            | Ast         =>
              if (propertyType.Type.Equals(thisType))
                missingBody.Add(<[ this.$(backingFieldName : usesite) = this ]>);
              else unless (propertySymbol.AstType.IsVoid)
                missingBody.Add(<[ this.$(backingFieldName : usesite) = $(GetMissingAstCtor(Environment, propertySymbol.AstType))(file, span) ]>);

            | ParsedValue => missingBody.Add(<[ this.$(backingFieldName : usesite) = Nitra.ParsedValue(span.StartPos) ]>);
            | Span        => missingBody.Add(<[ this.$(backingFieldName : usesite) = span ]>);
          }

        | ProjectedPropertySymbol as propertySymbol =>
          def propertyType     = TypeCompiler.CompileProjectedPropertyType(propertySymbol);
          def backingFieldName = implementStructuralProperty(propertySymbol, propertyType);
          if (propertyType.Equals(thisType))
            missingBody.Add(<[ this.$(backingFieldName : usesite) = this ]>);
          else when (propertySymbol.ProjectionType is Some(projectionType))
            missingBody.Add(<[ this.$(backingFieldName : usesite) = $(GetMissingAstCtor(Environment, projectionType))(file, span) ]>);

        | DependentPropertySymbol as propertySymbol =>
          def propertyRef = DependentPropertyRef.Reflected(propertySymbol, -1);
          dependentProps.Add(propertySymbol, propertyRef);

          when (propertySymbol.PropertyContainer == _symbol)
            DefineInterfaceDependentProperty(propertySymbol, _tb, propertySymbol.OverrideProperty.HasValue);

          DefineAmbiguousDependentProperty(propertyRef);

        | _ => assert(false)
      }

      _listEmitter.DefineMembers(dependentProps);
      _optionEmitter.DefineMembers(dependentProps);

      _ambiguousTb.Define(<[ decl:
        public this(file : $(Environment.FileTypeVar : typed), span : $(Environment.NSpanTypeVar : typed)) { ..$missingBody }
      ]>);

      _ambiguousTb.Define(<[ decl: 
        public override Accept(visitor : Nitra.Declarations.IAstVisitor) : void
        {
          Nitra.Internal.AstUtils.AcceptToAll(visitor, this.Ambiguities);
        }
      ]>);

      DefineResetPropertiesMethod(null, _ambiguousTb);
      DefineIsAllPropertiesEvaluatedProperty(null, _ambiguousTb);
      when (_symbol.HasEvaluations)
        DefineDependentPropertiesInheritableEvaluation(_tb, _symbol, dependentProps);

      when (_symbol.Symbol.HasValue)
        _ambiguousTb.Define(<[ decl:
          public CreateSymbol() : Nitra.Runtime.Binding.ISymbol2
          {
            throw System.NotImplementedException();
          }
        ]>);
    }

    private DefineAmbiguousDependentProperty(propertyRef : DependentPropertyRef) : void
    {
      def propertyType    = TypeCompiler.CompileDependentPropertyType(propertyRef.Symbol);
      def name            = propertyRef.Symbol.Name;
      def isEvaluatedName = GetIsEvaluatedPropertyName(propertyRef.Symbol);
      def mods            = AttributesAndModifiers(NemerleAttributes.Public, [MakeDependentPropertyAttribute(propertyRef.Symbol, propertyRef.Index)]);
      def backingFieldName = Util.tmpname(propertyRef.Symbol.Name);
      def hasValueBit = _ambiguousTb.GetBitFieldManager().Allocate();
      _ambiguousTb.Define(<[ decl:  private mutable $(backingFieldName : usesite) : $(propertyType : typed) ]>);
      _ambiguousTb.Define(<[ decl:
        ..$mods $(name : usesite) : $(propertyType : typed)
        {
          get
          {
            if (this.IsAmbiguous)
              this.Ambiguities[0].$(name : usesite)
            else
            {
              unless ($(hasValueBit.Read()))
                $(MakeAccessAssertion(propertyRef));
              this.$(backingFieldName : usesite)
            }
          }
          set
          {
            if (this.IsAmbiguous)
              foreach (ambiguity in this.Ambiguities)
                ambiguity.$(name : usesite) = value;
            else unless ($(hasValueBit.Read()))
            {
              this.$(backingFieldName : usesite) = value;
              $(hasValueBit.Set());
            }
          }
        }
      ]>);

      _ambiguousTb.Define(<[ decl:
        public $(isEvaluatedName : usesite) : bool
        {
          get
          {
            if (this.IsAmbiguous)
              this.Ambiguities[0].$(isEvaluatedName : usesite)
            else
              $(hasValueBit.Read())
          }
        }
      ]>);

      DefineDependenPropertyOverrideSetter(_ambiguousTb, propertyRef.Symbol);
    }

    public override Emit() : void
    {
      assert(_tb != null);
      _tb.Compile();

      assert(_ambiguousTb != null);
      _ambiguousTb.Compile();

      _listEmitter.Emit();
      _optionEmitter.Emit();
    }
  }
}
