using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  [Record]
  internal abstract partial class AstEmitter : BaseAstEmitter
  {
    public static AmbiguousOrMissingAstName = "AmbiguousOrMissing";

    public override Environment  : EmitterEnvironment { get; }
    public          NemerleEnv   : GlobalEnv          { get; }
    public override TypeCompiler : NTypeCompiler      { get { Environment.DefaultTypeCompiler } }

    public abstract DefineTypes() : void;
    public abstract DefineMembers() : void;
    public abstract Emit() : void;

    public virtual DefineNestedType(_ : ClassMember.TypeDeclaration) : TypeBuilder
    {
      throw NotSupportedException();
    }

    protected DefineAmbiguousAst(baseTb : TypeBuilder, baseType : PExpr = null) : TypeBuilder
    {
      def baseTypes = SCG.List();
      when (baseType != null)
        baseTypes.Add(baseType);
      baseTypes.Add(<[ $(baseTb.GetMemType() : typed) ]>);
      baseTypes.Add(<[ Nitra.Declarations.IAmbiguousAst ]>);

      baseTb.DefineNestedType(<[ decl:
        new public sealed partial class $(AmbiguousOrMissingAstName : usesite) : ..$baseTypes
        {
          public this(ambiguities : array[$(baseTb.GetMemType() : typed)])
          {
            assert(ambiguities != null);
            def first = ambiguities[0];
            this.File        = first.File;
            this.Span        = first.Span;
            this.Ambiguities = ambiguities;
          }

          public override IsAmbiguous : bool                                    { get { this.Ambiguities != null } }
          public override IsMissing   : bool                                    { get { this.Ambiguities == null } }
          public          Ambiguities : array[$(baseTb.GetMemType() : typed)]   { get; }

          private AmbiguitiesImpl : array[$(Environment.AstTypeVar : typed)] implements Nitra.Declarations.IAmbiguousAst.Ambiguities
          {
            get
            {
              assert(this.IsAmbiguous);
              this.Ambiguities :> array[$(Environment.AstTypeVar : typed)]
            }
          }

          public override EvalProperties(context : Nitra.Declarations.DependentPropertyEvalContext) : void
          {
            if (this.IsAmbiguous)
              Nitra.Internal.AstUtils.EvalAmbiguitiesProperties(context, this)
            else
              base.EvalProperties(context)
          }

          public override IsPropertyEvaluated(index : int) : bool
          {
            if (this.IsAmbiguous)
              this.Ambiguities[0].IsPropertyEvaluated(index)
            else
              base.IsPropertyEvaluated(index)
          }
        }
      ]>);
    }

    public static GetMissingAstCtor(environment : EmitterEnvironment, astType : AstType) : PExpr
    {
      match (astType)
      {
        | Option(symbol)                    => <[ $(environment.GetAstType(symbol) : typed).AstOption ]>
        | OptionList(symbol) | List(symbol) => <[ $(environment.GetAstType(symbol) : typed).AstList ]>
        | Ast(symbol)                       => environment.GetAmbiguousAstType(symbol)
        | _                                 => assert(false)
      }
    }

    public static GetAmbiguousAstCtor(environment : EmitterEnvironment, astType : AstType) : PExpr
    {
      match (astType)
      {
        | Option(symbol)                    => <[ $(environment.GetAstType(symbol) : typed).AmbiguousAstOption ]>
        | OptionList(symbol) | List(symbol) => <[ $(environment.GetAstType(symbol) : typed).AmbiguousAstList ]>
        | Ast(symbol)                       => environment.GetAmbiguousAstType(symbol)
        | _                                 => assert(false)
      }
    }

    public static GetMissingAstCtor(environment : EmitterEnvironment, projectionType : PropertyProjectionType) : PExpr
    {
      match (projectionType)
      {
        | Option            => <[ $(environment.GetAstType(projectionType.TargetAst) : typed).AstOption ]>
        | OptionList | List => <[ $(environment.GetAstType(projectionType.TargetAst) : typed).AstList ]>
        | Single            => environment.GetAmbiguousAstType(projectionType.TargetAst)
      }
    }
  }
}
