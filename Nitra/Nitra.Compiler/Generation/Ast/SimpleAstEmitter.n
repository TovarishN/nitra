using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SimpleAstEmitter : AstEmitter
  {
    private         _symbol            : SimpleAstSymbol;
    private mutable _tb                : TypeBuilder;
    private mutable _ambiguousTb       : TypeBuilder;
    private         _listEmitter       : ListAstEmitter;
    private         _optionEmitter     : OptionAstEmitter;
    private         _ownerEmitter      : AstEmitter;

    public this(environment : EmitterEnvironment, symbol : SimpleAstSymbol, ownerEmitter : AstEmitter)
    {
      base(environment, environment.NamespaceOfSymbol(symbol));
      this._symbol        = symbol;
      this._ownerEmitter  = ownerEmitter;
      this._listEmitter   = ListAstEmitter(environment, symbol);
      this._optionEmitter = OptionAstEmitter(environment, symbol);
    }

    public override DefineTypes() : void
    {
      Util.locate(_symbol.FirstLocation.NLocation(),
      {
        assert(_tb == null);

        def baseTypes = SCG.List();
        baseTypes.Add(<[ Nitra.Declarations.AstBase ]>);
        foreach (baseAst in _symbol.BaseAsts)
          baseTypes.Add(<[ $(Environment.GetAstType(baseAst) : typed) ]>);

        def decl = <[ decl:
          public partial class $(_symbol.Name : usesite) : ..$baseTypes
          {
            private this() {}
          }
        ]>;

        _tb = if (_ownerEmitter != null) _ownerEmitter.DefineNestedType(decl) else NemerleEnv.Define(decl);

        assert(_ambiguousTb == null);
        _ambiguousTb = DefineAmbiguousAst(_tb);

        _listEmitter.DefineTypes(_tb);
        _optionEmitter.DefineTypes(_tb);
      });
    }

    public override DefineMembers() : void
    {
      assert(_tb != null);

      def thisType = _tb.GetMemType();

      def acceptBody = SCG.List();

      def initParameters = SCG.List();
      initParameters.Add(<[ parameter: File : $(Environment.FileTypeVar : typed) ]>);
      initParameters.Add(<[ parameter: Span : $(Environment.NSpanTypeVar : typed) ]>);

      def initStatements = SCG.List();
      initStatements.Add(<[ this.File = File ]>);
      initStatements.Add(<[ mutable isSpanSet ]>);
      initStatements.Add(<[ unless (TryEvalSpan) { this.Span = Span; isSpanSet = true } ]>);

      def missingBody = SCG.List();
      missingBody.Add(<[ this.File = file ]>);
      missingBody.Add(<[ this.Span = span ]>);

      def dependentProps = SCG.Dictionary();

      def defineStructuralProperty(propertySymbol : StructuralPropertySymbol) : void
      {
        def name             = propertySymbol.Name;
        def propertyType     = TypeCompiler.CompileStructuralPropertyType(propertySymbol);

        initParameters.Add(<[ parameter : $(name : usesite) : $(propertyType.Type : typed) ]>);
        initStatements.Add(<[ this.$(name : usesite) = $(name : usesite) ]>);

        DefineStructuralProperty(name, propertyType.Type, _tb, _ambiguousTb);

        match (propertyType)
        {
          | Ast         =>
            initStatements.Add(<[ when ($(name : usesite).File : object == File) UpdateSpan(ref isSpanSet, $(name : usesite).Span) ]>);
            acceptBody.Add(<[ visitor.Visit(this.$(name : usesite)); ]>);

            if (propertyType.Type.Equals(thisType))
              missingBody.Add(<[ this.$(name : usesite) = this ]>);
            else unless (propertySymbol.AstType.IsVoid)
              missingBody.Add(<[ this.$(name : usesite) = $(GetMissingAstCtor(Environment, propertySymbol.AstType))(file, span) ]>);

          | ParsedValue =>
            initStatements.Add(<[ UpdateSpan(ref isSpanSet, $(name : usesite).Span) ]>);
            missingBody.Add(<[ this.$(name : usesite) = Nitra.ParsedValue(span.StartPos) ]>);

          | Span        =>
            initStatements.Add(<[ UpdateSpan(ref isSpanSet, $(name : usesite)) ]>);
            missingBody.Add(<[ this.$(name : usesite) = span ]>);
        }
      }

      def defineDependentProperty(propertySymbol : DependentPropertySymbol) : void
      {
        def index = dependentProps.Count;
        def bit   = _tb.GetBitFieldManager().Allocate();
        assert(bit.Index == index);

        def propertyRef = DependentPropertyRef.Compiling(propertySymbol, index, bit);
        dependentProps.Add(propertySymbol, propertyRef);

        DefineDependentProperty(_tb, propertyRef, NemerleModifiers.Public | NemerleModifiers.Virtual);
        DefineAmbiguousDependentProperty(_ambiguousTb, propertyRef, NemerleModifiers.Public | NemerleModifiers.Override);
      }

      def projectedProps = SCG.List();

      def defineProjectedProperty(propertySymbol : ProjectedPropertySymbol) : void
      {
        def name         = propertySymbol.Name;
        def propertyType = TypeCompiler.CompileProjectedPropertyType(propertySymbol);
        DefineStructuralProperty(name, propertyType, _tb, _ambiguousTb);
        projectedProps.Add(propertySymbol);

        if (propertyType.Equals(thisType))
          missingBody.Add(<[ this.$(name : usesite) = this ]>);
        else when (propertySymbol.ProjectionType is Some(projectionType))
          missingBody.Add(<[ this.$(name : usesite) = $(GetMissingAstCtor(Environment, projectionType))(file, span) ]>);
      }

      foreach (propertySymbol in _symbol.AllProperties)
      {
        | StructuralPropertySymbol as s => defineStructuralProperty(s)
        | DependentPropertySymbol  as s => defineDependentProperty(s)
        | ProjectedPropertySymbol  as s => defineProjectedProperty(s)
        | _ => ()
      }

      initParameters.Add(<[ parameter: TryEvalSpan : bool = false ]>);
      initStatements.Add(<[ unless (isSpanSet) this.Span = Span ]>);

      CompileProjection(projectedProps, initStatements);

      _tb.Define(<[ decl:
        public this(..$initParameters) { ..$initStatements }
      ]>);

      _ambiguousTb.Define(<[ decl:
        public this(file : $(Environment.FileTypeVar : typed), span : $(Environment.NSpanTypeVar : typed)) { ..$missingBody }
      ]>);

      DefineIsPropertyEvaluatedMethod(_tb, NemerleModifiers.Override);
      DefineResetPropertiesMethod(_tb, _ambiguousTb);
      DefineIsAllPropertiesEvaluatedProperty(_tb, _ambiguousTb);
      DefineDependentPropertiesSealedEvaluation(_tb, _symbol, dependentProps);

      _listEmitter.DefineMembers(dependentProps);
      _optionEmitter.DefineMembers(dependentProps);

      when (acceptBody.Count > 0)
        _tb.Define(<[ decl: public override Accept(visitor : Nitra.Declarations.IAstVisitor) : void { ..$acceptBody } ]>);

      when (_symbol.Symbol is SymbolRef.Some(s))
        _tb.Define(<[ decl:
          public CreateSymbol() : Nitra.Runtime.Binding.ISymbol2
          {
            $(Environment.GetSymbolClass(s) : typed)()
          }
        ]>);
    }

    public override Emit() : void
    {
      assert(_tb != null);
      _tb.Compile();

      assert(_ambiguousTb != null);
      _ambiguousTb.Compile();

      _listEmitter.Emit();
      _optionEmitter.Emit();
    }

    private static DefineStructuralProperty(name : string, type : FixedType, baseTb : TypeBuilder, ambiguousTb : TypeBuilder) : void
    {
      baseTb.Define(<[ decl: public virtual $(name : usesite) : $(type : typed) { get; protected set; } ]>);
      ambiguousTb.Define(<[ decl:
        public override $(name : usesite) : $(type : typed)
        {
          get
          {
            if (this.IsAmbiguous)
              this.Ambiguities[0].$(name : usesite)
            else
              base.$(name : usesite)
          }
          protected set
          {
            if (this.IsAmbiguous)
              throw System.InvalidOperationException()
            else
              base.$(name : usesite) = value
          }
        }
      ]>);
    }

    private DefineAmbiguousDependentProperty(tb : TypeBuilder, propertyRef : DependentPropertyRef, modifiers : NemerleModifiers) : void
    {
      def propertyType = TypeCompiler.CompileDependentPropertyType(propertyRef.Symbol);
      def name         = propertyRef.Symbol.Name;
      def mods         = AttributesAndModifiers(modifiers, [MakeDependentPropertyAttribute(propertyRef.Symbol, propertyRef.Index)]);
      tb.Define(<[ decl:
        ..$mods $(name : usesite) : $(propertyType : typed)
        {
          get
          {
            if (this.IsAmbiguous)
              this.Ambiguities[0].$(name : usesite)
            else
              base.$(name : usesite)
          }
          set
          {
            if (this.IsAmbiguous)
              foreach (ambiguity in this.Ambiguities)
                ambiguity.$(name : usesite) = value;
            else
              base.$(name : usesite) = value;
          }
        }
      ]>);

      def isEvaluatedName = GetIsEvaluatedPropertyName(propertyRef.Symbol);
      def isEvaluatedMods = AttributesAndModifiers(modifiers, []);
      tb.Define(<[ decl:
        ..$isEvaluatedMods $(isEvaluatedName : usesite) : bool
        {
          get
          {
            if (this.IsAmbiguous)
              this.Ambiguities[0].$(isEvaluatedName : usesite)
            else
              base.$(isEvaluatedName : usesite)
          }
        }
      ]>);
    }

    private CompileProjection(properties : SCG.List[ProjectedPropertySymbol], result : SCG.List[PExpr]) : void
    {
      def locFromExpr(astExpr : PExpr) : PExpr
      {
        <[
          def ast = $astExpr;
          Nitra.Location(ast.File, ast.Span)
        ]>
      }
      def locFromName(name : string) : PExpr { locFromExpr(<[ $(name : usesite) ]>) }

      foreach (g in properties.Where(p => p.ProjectionType.IsSome).GroupBy(p => p.ProjectionType.Value.ProjectionSource))
      {
        def projectionSource = g.Key;
        def init = SCG.List();
        def body = SCG.List();
        def end  = SCG.List();
        foreach (property in g)
        {
          match (property.ProjectionType.Value)
          {
            | OptionList as projectionType with canBeEmpty = true
            | List       as projectionType with canBeEmpty = false =>
              def targetName   = projectionType.TargetAst.FullName;
              def concreteType = Environment.GetAstType(projectionType.TargetAst);
              def bufferName = Util.tmpname("list");
              init.Add(<[ def $(bufferName : usesite) = System.Collections.Generic.List.[$(concreteType : typed)]() ]>);
              body.Add(<[
                match (item)
                {
                  | concreteItem is $(concreteType : typed) => $(bufferName : usesite).Add(concreteItem)
                  | _ => ()
                }
              ]>);
              end.Add(<[ this.$(property.Name : usesite) = $(concreteType : typed).AstList(this.$(projectionSource.Name : usesite).File, this.$(projectionSource.Name : usesite).Span, $(bufferName : usesite).ToArray()); ]>);
              unless (canBeEmpty)
              {
                end.Add(<[
                  when ($(bufferName : usesite).Count == 0)
                    Nitra.Declarations.AstContext.CompilerMessages.Error($(locFromExpr(<[ this.$(projectionSource.Name : usesite) ]>)), $$"Missing definition of '$targetName'.")
                ]>);
              }

            | Option as projectionType =>
              def targetName   = projectionType.TargetAst.FullName;
              def concreteType = Environment.GetAstType(projectionType.TargetAst);
              def bufferName   = Util.tmpname("option");
              init.Add(<[ mutable $(bufferName : usesite) : $(concreteType : typed) ]>);
              body.Add(<[
                match (item)
                {
                  | concreteItem is $(concreteType : typed) =>
                    if ($(bufferName : usesite) : object == null)
                      $(bufferName : usesite) = concreteItem
                    else
                      using (root = Nitra.Declarations.AstContext.CompilerMessages.RootError($(locFromName("concreteItem")), $$"Duplicate definition of '$targetName'."))
                      {
                        root.Hint($(locFromName(bufferName)), "Previous definition.")
                      }

                  | _ => ()
                }
              ]>);
              end.Add(<[
                this.$(property.Name : usesite) =
                  if ($(bufferName : usesite) : object != null)
                    $(concreteType : typed).AstOption(this.$(projectionSource.Name : usesite).File, this.$(projectionSource.Name : usesite).Span, $(bufferName : usesite))
                  else
                    $(concreteType : typed).AstOption(this.$(projectionSource.Name : usesite).File, this.$(projectionSource.Name : usesite).Span)
              ]>);

            | Single as projectionType =>
              def targetName   = projectionType.TargetAst.FullName;
              def concreteType = Environment.GetAstType(projectionType.TargetAst);
              def bufferName   = Util.tmpname("single");
              init.Add(<[ mutable $(bufferName : usesite) : $(concreteType : typed) ]>);
              body.Add(<[
                match (item)
                {
                  | concreteItem is $(concreteType : typed) =>
                    if ($(bufferName : usesite) : object == null)
                      $(bufferName : usesite) = concreteItem
                    else
                      using (root = Nitra.Declarations.AstContext.CompilerMessages.RootError($(locFromName("concreteItem")), $$"Duplicate definition of '$targetName'."))
                      {
                        root.Hint($(locFromName(bufferName)), "Previous definition.")
                      }

                  | _ => ()
                }
              ]>);
              end.Add(<[
                if ($(bufferName : usesite) : object != null)
                  this.$(property.Name : usesite) = $(bufferName : usesite)
                else
                  Nitra.Declarations.AstContext.CompilerMessages.Error($(locFromExpr(<[ this.$(projectionSource.Name : usesite) ]>)), $$"Missing definition of '$targetName'.")
              ]>);
          }
        }
        result.AddRange(init);
        result.Add(<[ foreach (item in this.$(projectionSource.Name : usesite)) { ..$body } ]>);
        result.AddRange(end);
      }
    }
  }
}
