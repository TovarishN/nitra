using Nitra.Typing;
using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal sealed class SimpleRuleParseTreeEmitter : RuleParseTreeEmitter
  {
    mutable _baseTb               : TypeBuilder;
    mutable _parsedTb             : TypeBuilder;
    mutable _chemicalTb           : TypeBuilder;
    mutable _ambiguousOrMissingTb : TypeBuilder;
    mutable _nestedTb             : TypeBuilder = null;

    public this(environment : EmitterEnvironment, ruleSymbol : SimpleRuleSymbol)
    {
      base(environment, environment.DefaultTypeCompiler, ruleSymbol)
    }

    public override IsTypesDefined : bool { get { _baseTb != null } }

    [Memoize]
    public override CreateConstant(name : string, value : int) : string
    {
      assert(IsTypesDefined);
      Util.CreateConstant(_parsedTb, name, value)
    }

    public override DefineNestedType(td : ClassMember.TypeDeclaration) : TypeBuilder
    {
      DefineWrappedNestedType(ref _nestedTb, _baseTb, td)
    }

    public override Emit() : void
    {
      assert(IsTypesDefined);

      _baseTb.Compile();
      _parsedTb.Compile();
      _chemicalTb.Compile();
      _ambiguousOrMissingTb.Compile();
      _nestedTb?.Compile();
    }

    public override DefineTypes(defineType : ClassMember.TypeDeclaration -> TypeBuilder) : void
    {
      assert(!IsTypesDefined);

      Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
      {
        _baseTb = defineType(<[decl:
          public new abstract partial class $(this.RuleSymbol.Name : usesite) : $(Environment.ParseTreeTypeVar : typed)
          {
            public override RuleDescriptor : Nitra.RuleDescriptor { get { $(RuleSymbol.GetRuleDescriptorRef()) } }
          }
        ]>);

        _parsedTb = _baseTb.DefineNestedType(<[decl:
          private new sealed partial class __Parsed__Node : $(_baseTb.GetMemType() : typed), Nitra.Internal.ISequenceParseTreeLoader[Nitra.NSpan], Nitra.Internal.ISequenceParseTreeLoader[Nitra.ParseTree]
          {
          }
        ]>);

        _chemicalTb = _baseTb.DefineNestedType(<[decl:
          private new sealed partial class __Chemical__Node : $(_baseTb.GetMemType() : typed)
          {
          }
        ]>);

        _ambiguousOrMissingTb = _baseTb.DefineNestedType(<[decl:
          public new sealed partial class AmbiguousOrMissingNode : $(_baseTb.GetMemType() : typed), Nitra.IAmbiguousParseTree
          {
            public this(ambiguities : array[$(_baseTb.GetMemType() : typed)])
            {
              assert(ambiguities != null);
              this.ambiguities = ambiguities;
            }

            private ambiguities    : array[$(_baseTb.GetMemType() : typed)];
            private sourceProvider : Nitra.Runtime.ISourceSnapshotProvider;
            private pos            : int;

            public override IsMissing      : bool                                   { get { this.ambiguities == null } }
            public override IsAmbiguous    : bool                                   { get { this.ambiguities != null } }
            public override Location       : Nitra.Location                         { get { if (IsAmbiguous) this.ambiguities[0].Location else Nitra.Location(this.sourceProvider, this.pos) } }
            public          Ambiguities    : array[$(_baseTb.GetMemType() : typed)] { get { assert(IsAmbiguous); this.ambiguities } }
            public          AmbiguityType  : Nitra.ParseTreeAmbiguityType           { get { assert(IsAmbiguous); Nitra.ParseTreeAmbiguityType.Recovery } }
          }
        ]>);
      });
    }

    public override DefineMembers() : void
    {
      assert(IsTypesDefined);

      Util.locate(this.RuleSymbol.FirstLocation.NLocation(),
      {
        DefineCreateMethod();

        def fields = GetFields();
        DefineParseTreeCtorAndFields(fields, _baseTb);
        DefineParsedNodeCtorAndFields(fields, _parsedTb);
        DefineChemicalNodeCtorAndFields(fields, _chemicalTb, _baseTb);
        DefineParseTreeApplyMethod(fields, _baseTb, _chemicalTb, _parsedTb);
        DefineSimpleRuleGetAstMethod(_baseTb);
        DefineParseTreePrettyPrint(_baseTb);
        DefineSimpleRuleMethods(_baseTb);
        DefineReadSequenceMethod(_parsedTb);

        DefineAmbiguousOrMissingCtorAndFields(fields, _ambiguousOrMissingTb);
        DefineAmbiguousOrMissingGetAstMethod(_ambiguousOrMissingTb);
        DefineAmbiguousOrMissingPrettyPrint(_ambiguousOrMissingTb);
        DefineAmbiguousOrMissingRuleMethods(_ambiguousOrMissingTb);
      })
    }

    private DefineCreateMethod() : void
    {
      _baseTb.DefineConditional(<[ decl:
        [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
        public static CreateParseTree(pos : ref int, size : int, parseResult : Nitra.ParseResult, grammar : Nitra.CompositeGrammar) : $(_baseTb.GetMemType() : typed)
        {
          def ruleParser = grammar.GetSimpleRuleParser($(this.RuleSymbol.GetRuleDescriptorRef()));
          if (size > 0 || ruleParser.CanParseEmptyString)
          {
            def rawTreePtr = parseResult.TryGetRawTree(pos, ruleParser.RuleId);
            assert(rawTreePtr > 0);
            $(_baseTb.GetMemType() : typed).__Parsed__Node(ref pos, rawTreePtr, parseResult)
          }
          else
            $(_baseTb.GetMemType() : typed).AmbiguousOrMissingNode(parseResult, pos)
        }
      ]>);

      _baseTb.DefineConditional(<[ decl:
        [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
        public static CreateParseTree(startPos : int, endPos : int, parseResult : Nitra.ParseResult, grammar : Nitra.CompositeGrammar) : $(_baseTb.GetMemType() : typed)
        {
          def ruleParser = grammar.GetSimpleRuleParser($(this.RuleSymbol.GetRuleDescriptorRef()));
          if (startPos < endPos || ruleParser.CanParseEmptyString || startPos == parseResult.ParseSession.CompletionPos)
          {
            match (parseResult.TryGetRecoveredSequence(startPos, endPos, ruleParser.ParsingSequence))
            {
              | null =>
                mutable pos = startPos;
                def rawTreePtr = parseResult.TryGetRawTree(pos, ruleParser.RuleId);
                def parseTree = $(_baseTb.GetMemType() : typed).__Parsed__Node(ref pos, rawTreePtr, parseResult);
                assert(pos == endPos);
                parseTree

              | Unambiguous(recoveredSubrulesIndex) => $(_baseTb.GetMemType() : typed).__Parsed__Node(startPos, endPos, recoveredSubrulesIndex, parseResult)
              | Ambiguous(indexes)                  =>
                def ambiguities = array(indexes.Length);
                foreach (recoveredSubrulesIndex in indexes with i)
                  ambiguities[i] = $(_baseTb.GetMemType() : typed).__Parsed__Node(startPos, endPos, recoveredSubrulesIndex, parseResult);
                $(_ambiguousOrMissingTb.GetMemType() : typed)(ambiguities)
            }
          }
          else
            $(_baseTb.GetMemType() : typed).AmbiguousOrMissingNode(parseResult, startPos)
        }
      ]>);

      when (this.RuleSymbol.Options.IsStart)
      {
        _baseTb.DefineConditional(<[ decl:
          [Nemerle.Diagnostics.CompileStatistic("ParseTree")]
          public static CreateParseTree(parseResult : Nitra.IParseResult) : $(_baseTb.GetMemType() : typed)
          {
            def parseResult = parseResult :> Nitra.ParseResult;
            CreateParseTree(parseResult.StartPos, parseResult.ParseEnd, parseResult, parseResult.RuleParser.Grammar);
          }
        ]>);
      }
    }
  }
}
