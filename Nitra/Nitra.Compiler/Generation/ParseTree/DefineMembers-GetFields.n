using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class RuleParseTreeEmitter
  {
    protected variant FieldExpr
    {
      | Chars  { ExprStandardMode  : PExpr; ExprRecoveryMode : PExpr; }
      | Tuple  { Items : list[FieldExpr] }
      | Prefix { Expr  : PExpr }
      | Other  { ExprStandardMode  : PExpr; ExprRecoveryMode : PExpr; }
    }

    [Record]
    protected sealed class FieldInfo
    {
      public Name : string;
      public Rule : Rule;
      public Type : FixedType;
      public Expr : FieldExpr;
    }

    protected GetFields() : SCG.List[FieldInfo]
    {
      def parentRawTreePtr = RawTreePointer.Existing(this.RuleSymbol.Sequence, this, "rawTreePtr");

      def ruleExprs = SCG.Dictionary.[Rule, FieldExpr](Rule.ReferenceEqualityComparer);

      when (this.RuleSymbol is ExtensionRuleSymbol(ExtensionType = Postfix(call, _)))
        ruleExprs.Add(call, FieldExpr.Prefix(<[ this.prefix ]>));

      def prevSubrules = SCG.List();
      foreach (subrule in this.RuleSymbol.Sequence.NonMarkerSubrules)
      {
        when (IsSubruleAcceptedForParseTree(subrule))
        {
          mutable needRuleParserStandardMode;
          def valueExpr = CompileSubruleValueStandardMode(subrule, parentRawTreePtr, ref needRuleParserStandardMode);

          def statementsStandardMode = SCG.List();
          foreach (subrule in prevSubrules)
            statementsStandardMode.Add(Skip(subrule, parentRawTreePtr));
          when (needRuleParserStandardMode)
            statementsStandardMode.Add(MakeRuleParserDefinition());
          statementsStandardMode.Add(valueExpr);

          def statementsRecoveryMode = <[
            if (this.rawTreePtr == 0)
            {
              def _subruleStartPos = this.startPos;
              $(CompileEmptySubruleValueRecoveryMode(subrule, false)) // TODO: false???
            }
            else
            {
              def recoveredSubrulesIndex = ~this.rawTreePtr;
              def (subruleStarts, parsingSequence) = parseResult.RecoveredSubrules[recoveredSubrulesIndex];
              mutable _subruleStartPos;
              mutable _subruleEndPos;
              $(CompileSubruleValueRecoveryMode(subrule))
            }
          ]>;

          def expr =
            if (subrule.SrcRule.Type is RuleType.Chars)
              FieldExpr.Chars(<[ { ..$statementsStandardMode } ]>, statementsRecoveryMode)
            else
              FieldExpr.Other(<[ { ..$statementsStandardMode } ]>, statementsRecoveryMode);

          ruleExprs.Add(subrule.SrcRule, expr);
        }
        prevSubrules.Add(subrule);
      }

      def makeFieldExpr(rule : Rule) : FieldExpr
      {
        if (rule is Rule.Sequence(Rules = rules))
        {
          def members = SCG.List();
          foreach (rule when !(rule.Type is RuleType.Void) in rules)
            members.Add(makeFieldExpr(rule));

          if(members.Count == 1)
            members[0]
          else
            FieldExpr.Tuple(members.ToNList())
        }
        else
        {
          mutable expr;
          unless (ruleExprs.TryGetValue(rule, out expr))
            assert3(false);
          expr
        }
      }

      def fields = SCG.List();
      foreach (rule in this.RuleSymbol.NonVoidSubRules)
        fields.Add(FieldInfo(rule.FieldName, rule, Environment.GetParseTreeType(rule.Type), makeFieldExpr(rule)));
      fields
    }

    protected DefineReadSequenceMethod(_parsedTb : TypeBuilder) : void
    {
      assert(_parsedTb != null);

      def parseTreeValues(cr : SequenceCompilationResult) : bool { cr.IsNonVoid && !cr.IsSpan }

      def spanValues(cr : SequenceCompilationResult) : bool { cr.IsNonVoid && cr.IsSpan }

      def standardModeBody(code : PExpr) : PExpr { code }

      def recoveryModeBody(code : PExpr) : PExpr
      {
        <[
          def (subruleStarts, parsingSequence) = parseResult.RecoveredSubrules[recoveredSubrulesIndex];
          mutable _subruleStartPos;
          mutable _subruleEndPos;
          $code;
        ]>
      }

      def makeIdSwitch(pred : SequenceCompilationResult -> bool, selector : SequenceCompilationResult -> PExpr, body : PExpr -> PExpr) : PExpr
      {
        def cases = SCG.List();
        foreach (copilationResult when pred(copilationResult) in _sequenceCompilationResults.Values with index)
        {
          def code = selector(copilationResult);
          cases.Add(<[ case: | $(index : int) => $code ]>);
        }
        if (cases.Count > 0)
        {
          cases.Add(<[ case: | _ => throw System.ArgumentOutOfRangeException("id") ]>);
          body(<[ match (id) { ..$cases } ]>)
        }
        else
          <[ throw System.ArgumentOutOfRangeException("id") ]>;
      }

      _parsedTb.DefineConditional(<[ decl:
        private __ReadSequenceParseTreeStandardMode(id : int, pos : ref int) : $(Environment.ParseTreeTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.ParseTreeTypeVar : typed)].ReadSequence
        {
          unchecked { _ = id; _ = pos; $(makeIdSwitch(parseTreeValues, _.CodeStandardMode, standardModeBody)) }
        }
      ]>);

      _parsedTb.DefineConditional(<[ decl:
        private __ReadSequenceSpanStandardMode(id : int, pos : ref int) : $(Environment.NSpanTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.NSpanTypeVar : typed)].ReadSequence
        {
          unchecked { _ = id; _ = pos; $(makeIdSwitch(spanValues, _.CodeStandardMode, standardModeBody)) }
        }
      ]>);

      _parsedTb.DefineConditional(<[ decl:
        private __ReadSequenceParseTreeRecoveryMode(id : int, recoveredSubrulesIndex : int) : $(Environment.ParseTreeTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.ParseTreeTypeVar : typed)].ReadSequence
        {
          unchecked { _ = id; _ = recoveredSubrulesIndex; $(makeIdSwitch(parseTreeValues, _.CodeRecoveryMode, recoveryModeBody)) }
        }
      ]>);

      _parsedTb.DefineConditional(<[ decl:
        private __ReadSequenceSpanRecoveryMode(id : int, recoveredSubrulesIndex : int) : $(Environment.NSpanTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.NSpanTypeVar : typed)].ReadSequence
        {
          unchecked { _ = id; _ = recoveredSubrulesIndex; $(makeIdSwitch(spanValues, _.CodeRecoveryMode, recoveryModeBody)) }
        }
      ]>);

      _parsedTb.DefineConditional(<[ decl:
        private __ReadEmptySequenceParseTree(id : int, _subruleStartPos : int) : $(Environment.ParseTreeTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.ParseTreeTypeVar : typed)].ReadEmptySequence
        {
          unchecked { _ = id; $(makeIdSwitch(parseTreeValues, _.EmptyCodeRecoveryMode, standardModeBody)) }
        }
      ]>);

      _parsedTb.DefineConditional(<[ decl:
        private __ReadEmptySequenceSpan(id : int, _subruleStartPos : int) : $(Environment.NSpanTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.NSpanTypeVar : typed)].ReadEmptySequence
        {
          unchecked { _ = id; $(makeIdSwitch(spanValues, _.EmptyCodeRecoveryMode, standardModeBody)) }
        }
      ]>);

      _parsedTb.DefineConditional(<[ decl:
        private __CreateAmbiguousSequenceParseTree(id : int, ambiguities : array[$(Environment.ParseTreeTypeVar : typed)]) : $(Environment.ParseTreeTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.ParseTreeTypeVar : typed)].CreateAmbiguousSequence
        {
          unchecked { _ = id; _ = ambiguities; $(makeIdSwitch(parseTreeValues, _.AmbiguousSequenceCode, standardModeBody)) }
        }
      ]>);

      _parsedTb.DefineConditional(<[ decl:
        private __CreateAmbiguousSequenceSpan(_ : int, _ : array[$(Environment.NSpanTypeVar : typed)]) : $(Environment.NSpanTypeVar : typed)
          implements Nitra.Internal.ISequenceParseTreeLoader[$(Environment.NSpanTypeVar : typed)].CreateAmbiguousSequence
        {
          throw System.NotSupportedException("Ambiguous NSpan is not supported")
        }
      ]>);
    }

    [RecordIgnore]
    private _sequenceCompilationResults : SCG.Dictionary[SequenceCompileInfo, SequenceCompilationResult] = SCG.Dictionary();

    [Record]
    private sealed class SequenceCompilationResult
    {
      public Sequence : SequenceCompileInfo;
      public Id : int;
      public IsNonVoid : bool;
      public IsSpan : bool;
      public CodeStandardMode : PExpr;
      public CodeRecoveryMode : PExpr;
      public EmptyCodeRecoveryMode : PExpr;
      public AmbiguousSequenceCode : PExpr;
    }

    private CompileSequence(sequence : SequenceCompileInfo) : SequenceCompilationResult
    {
      mutable compilationResult;
      unless (_sequenceCompilationResults.TryGetValue(sequence, out compilationResult))
      {
        def nameToExpr(varName : string, _ : SubruleCompileInfo) : PExpr { <[ $(varName : usesite) ]> }

        def rawTreePointer              = RawTreePointer.Temporary(sequence, this, "p");
        def subruleValues               = SCG.List();
        def statementsStandardMode      = SCG.List();
        def statementsRecoveryMode      = SCG.List();
        def statementsEmptyRecoveryMode = SCG.List();

        mutable needRuleParserStandardMode;

        foreach (subrule in sequence.NonMarkerSubrules)
        {
          if (IsSubruleAcceptedForParseTree(subrule))
          {
            def varName = subrule.MakeVariableName("pt");
            subruleValues.Add(varName, subrule);

            statementsStandardMode.Add(<[ def $(varName : usesite) = $(CompileSubruleValueStandardMode(subrule, rawTreePointer, ref needRuleParserStandardMode)) ]>);
            statementsRecoveryMode.Add(<[ def $(varName : usesite) = $(CompileSubruleValueRecoveryMode(subrule)) ]>);
            statementsEmptyRecoveryMode.Add(<[ def $(varName : usesite) = $(CompileEmptySubruleValueRecoveryMode(subrule, false)) ]>);
          }
          else
            statementsStandardMode.Add(Skip(subrule, rawTreePointer));
        }

        match (subruleValues.Count)
        {
          | 0 =>
            statementsStandardMode.Add(PExpr.Error("Cannot create VOID parse tree"));
            statementsRecoveryMode.Add(PExpr.Error("Cannot create VOID parse tree"));
            statementsEmptyRecoveryMode.Add(PExpr.Error("Cannot create VOID parse tree"));

          | 1 =>
            statementsStandardMode.Add(nameToExpr(subruleValues[0]));
            statementsRecoveryMode.Add(nameToExpr(subruleValues[0]));
            statementsEmptyRecoveryMode.Add(nameToExpr(subruleValues[0]));

          | _ =>
            statementsStandardMode.Insert(0, <[ def sequenceStartPos = pos; ]>);
            statementsStandardMode.Add(<[ Nitra.ConcreteSequenceParseTree(Nitra.Location(parseResult, sequenceStartPos, pos), ..$(subruleValues.MapToList(nameToExpr))) ]>);

            statementsRecoveryMode.Add(<[ def sequenceStartPos = subruleStarts[0].Pos ]>);
            statementsRecoveryMode.Add(<[ def sequenceEndPos = subruleStarts[subruleStarts.Length - 1].Pos ]>);
            statementsRecoveryMode.Add(<[ Nitra.ConcreteSequenceParseTree(Nitra.Location(parseResult, sequenceStartPos, sequenceEndPos), ..$(subruleValues.MapToList(nameToExpr))) ]>);

            statementsEmptyRecoveryMode.Add(<[ Nitra.ConcreteSequenceParseTree(Nitra.Location(parseResult, _subruleStartPos), ..$(subruleValues.MapToList(nameToExpr))) ]>);
        }

        def id               = _sequenceCompilationResults.Count;
        def isNonVoid        = subruleValues.Count > 0;
        def isSpan           = subruleValues.Count == 1 && subruleValues[0][1].SrcRule.Type is RuleType.Chars;

        when (rawTreePointer.IsAccessed)
          statementsStandardMode.Insert(0, <[ def $(rawTreePointer.Name : global) = parseResult.GetRawTree(pos, ruleParser.$(rawTreePointer.Sequence.RuleIdFieldName : global)); ]>);

        when (rawTreePointer.IsAccessed || needRuleParserStandardMode)
          statementsStandardMode.Insert(0, MakeRuleParserDefinition());

        def codeStandardMode      = <[ { ..$statementsStandardMode } ]>;
        def codeRecoveryMode      = <[ { ..$statementsRecoveryMode } ]>;
        def emptyCodeRecoveryMode = <[ { ..$statementsEmptyRecoveryMode } ]>;

        def ambiguousSequenceCode = 
          match (sequence.SrcRule.Type)
          {
            | Void         => PExpr.Error("Cannot create ambiguous VOID parse tree")
            | Chars        => PExpr.Error("Cannot create ambiguous NSPAN parse tree")
            | Ref(symbol is ExtensibleRuleSymbol, []) => <[ $(Environment.GetParseTreeType(symbol) : typed).AmbiguousOrMissingNode(Nitra.Internal.ParseTreeFactory.CastArray(ambiguities), Nitra.ParseTreeAmbiguityType.Recovery) ]>
            | Ref(symbol, [])  => <[ $(Environment.GetParseTreeType(symbol) : typed).AmbiguousOrMissingNode(Nitra.Internal.ParseTreeFactory.CastArray(ambiguities)) ]>
            | List(ty)     => <[ Nitra.AmbiguousListParseTree.[$(Environment.GetParseTreeType(ty) : typed)](Nitra.Internal.ParseTreeFactory.CastArray(ambiguities)) ]>
            | Option(ty)   => <[ Nitra.AmbiguousOptionParseTree.[$(Environment.GetParseTreeType(ty) : typed)](Nitra.Internal.ParseTreeFactory.CastArray(ambiguities)) ]>
            | Tuple(types) => <[ Nitra.AmbiguousSequenceParseTree.[..$(types.Map(t => <[ $(Environment.GetParseTreeType(t) : typed) ]>))](Nitra.Internal.ParseTreeFactory.CastArray(ambiguities)) ]>
          };

        compilationResult = SequenceCompilationResult(sequence, id, isNonVoid, isSpan, codeStandardMode, codeRecoveryMode, emptyCodeRecoveryMode, ambiguousSequenceCode);
        _sequenceCompilationResults[sequence] = compilationResult;
      }
      compilationResult
    }

    private MakeRuleParserDefinition() : PExpr
    {
      <[ def ruleParser = parseResult.GetRuleParser(rawTreePtr) :> $(this.RuleSymbol.GetParserClassRef()) ]>
    }

    private GetArgumentsForCreateParseTree(compilationResult : SequenceCompilationResult) : PExpr * PExpr * int * PExpr
    {
      if (compilationResult.IsSpan)
      {
        def spanType = Environment.NSpanTypeVar;
        (<[ $(spanType : typed) ]>, <[ $(spanType : typed) ]>, compilationResult.Id, <[ Nitra.Internal.NSpanCast.Instance ]>)
      }
      else
      {
        def loaderType = Environment.ParseTreeTypeVar;
        def parseTreeType    = Environment.GetParseTreeType(compilationResult.Sequence.SrcRule.Type);
        (<[ $(loaderType : typed) ]>, <[ $(parseTreeType : typed) ]>, compilationResult.Id, <[ Nitra.Internal.ParseTreeCast.[$(parseTreeType : typed)].Instance ]>)
      }
    }

    private CompileSubruleValueStandardMode(subrule : SubruleCompileInfo, parentRawTreePointer : RawTreePointer, needRuleParser : ref bool) : PExpr
    {
      match (subrule)
      {
        | Empty      as subrule => Skip(subrule, parentRawTreePointer)
        | SimpleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            Skip(subrule, parentRawTreePointer)
          else
          {
            needRuleParser = true;
            <[ $(Environment.GetParseTreeType(subrule.Symbol) : typed).CreateParseTree(ref pos, $(parentRawTreePointer.GetSize(subrule)), parseResult, ruleParser.Grammar) ]>
          }

        | ExtensibleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            Skip(subrule, parentRawTreePointer)
          else
          {
            needRuleParser = true;
            <[
              Nitra.Internal.ExtensibleRuleParseTreeConstructor.Create.[$(Environment.GetParseTreeType(subrule.Symbol) : typed)](
                ref pos,
                $(parentRawTreePointer.GetSize(subrule)),
                parseResult,
                $(subrule.BindingPower.Name : string),
                $(subrule.Symbol.GetRuleDescriptorRef()),
                ruleParser.Grammar);
            ]>
          }

        | RegularCall
        | List(IsSkipAnyPattern = true)
        | TokenString =>
          <[
            def tokenPos = pos;
            pos += $(parentRawTreePointer.GetSize(subrule));
            $(Environment.NSpanTypeVar : typed)(tokenPos, pos)
          ]>

        | Option(itemSequence) =>
          if (subrule.SrcRule.Type is RuleType.Void)
            Skip(subrule, parentRawTreePointer)
          else
          {
            def (loaderType, itemType, id, converter) = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
            <[ Nitra.Internal.ParseTreeFactory.CreateOption.[$loaderType, $itemType](this.parseResult, this, $(id : int), $converter, $(parentRawTreePointer.Var), $(subrule.Offset), ref pos) ]>
          }

        | List(IsDynamicSyntaxExtentionPoint = true, Item = itemSequence) =>
          if (subrule.SrcRule.Type is RuleType.Void)
            Skip(subrule, parentRawTreePointer)
          else
          {
            def callInfo    = itemSequence.NonMarkerSubrules[0] :> SubruleCompileInfo.ExtensibleCall;
            def itemType    = Environment.GetParseTreeType(callInfo.Symbol);
            <[
              Nitra.Internal.ParseTreeFactory.CreateDynamicExtensionPointList.[$(itemType : typed)](
                this.parseResult,
                $(parentRawTreePointer.Var),
                $(subrule.Offset),
                ref pos,
                $(callInfo.Symbol.GetRuleDescriptorRef()),
                $(callInfo.BindingPower.Name : string))
            ]>
          }

        | List(Item = itemSequence) =>
          if (subrule.SrcRule.Type is RuleType.Void)
            Skip(subrule, parentRawTreePointer)
          else
          {
            def (loaderType, itemType, id, converter) = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
            <[ Nitra.Internal.ParseTreeFactory.CreateList.[$loaderType, $itemType](this.parseResult, this, $(id : int), $converter, $(parentRawTreePointer.Var), $(subrule.Offset), ref pos) ]>
          }

        | ListWithSeparator(Item = itemSequence, Separator = separatorSequence)=>
          match (itemSequence.SrcRule.Type, separatorSequence.SrcRule.Type)
          {
            | (Void, Void) => Skip(subrule, parentRawTreePointer)
            | (_, Void) =>
              def (itemLoaderType, itemType, itemSequenceId, itemConverter) = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
              def (separatorLoaderType, _, separatorSequenceId, _)          = GetArgumentsForCreateParseTree(CompileSequence(separatorSequence));
              <[ Nitra.Internal.ParseTreeFactory.CreateListWithSeparatorOnlyItems.[$itemLoaderType, $itemType, $separatorLoaderType](this.parseResult, this, $(itemSequenceId : int), $itemConverter, this, $(separatorSequenceId : int), $(parentRawTreePointer.Var), $(subrule.Offset), ref pos) ]>

            | (Void, _) =>
              def (itemLoaderType, _, itemSequenceId, _)                                        = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
              def (separatorLoaderType, separatorType, separatorSequenceId, separatorConverter) = GetArgumentsForCreateParseTree(CompileSequence(separatorSequence));
              <[ Nitra.Internal.ParseTreeFactory.CreateListWithSeparatorOnlySeparators.[$itemLoaderType, $separatorLoaderType, $separatorType](this.parseResult, this, $(itemSequenceId : int), this, $(separatorSequenceId : int), $separatorConverter, $(parentRawTreePointer.Var), $(subrule.Offset), ref pos) ]>

            | _ =>
              def (itemLoaderType, itemType, itemSequenceId, itemConverter)                     = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
              def (separatorLoaderType, separatorType, separatorSequenceId, separatorConverter) = GetArgumentsForCreateParseTree(CompileSequence(separatorSequence));
              <[ Nitra.Internal.ParseTreeFactory.CreateListWithSeparator.[$itemLoaderType, $itemType, $separatorLoaderType, $separatorType](this.parseResult, this, $(itemSequenceId : int), $itemConverter, this, $(separatorSequenceId : int), $separatorConverter, $(parentRawTreePointer.Var), $(subrule.Offset), ref pos) ]>
          }

        | Marker => <[ () ]>
      }
    }

    private CompileSubruleValueRecoveryMode(subrule : SubruleCompileInfo) : PExpr
    {
      def recoveredValue = match (subrule)
      {
        | Empty => <[ () ]>
        | SimpleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            <[ () ]>
          else
            <[ $(Environment.GetParseTreeType(subrule.Symbol) : typed).CreateParseTree(_subruleStartPos, _subruleEndPos, parseResult, parsingSequence.Grammar) ]>

        | ExtensibleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            <[ () ]>
          else
            <[
              Nitra.Internal.ExtensibleRuleParseTreeConstructor.Create.[$(Environment.GetParseTreeType(subrule.Symbol) : typed)](
                _subruleStartPos,
                _subruleEndPos,
                parseResult,
                $(subrule.BindingPower.Name : string),
                $(subrule.Symbol.GetRuleDescriptorRef()),
                parsingSequence.Grammar);
            ]>

        | RegularCall
        | List as lst when lst.IsSkipAnyPattern
        | TokenString    => <[ $(Environment.NSpanTypeVar : typed)(_subruleStartPos, _subruleEndPos) ]>
        | Option(Rule = itemSequence) =>
          if (subrule.SrcRule.Type is RuleType.Void)
            <[ () ]>
          else
          {
            def (loaderType, itemType, id, converter) = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
            <[ Nitra.Internal.ParseTreeFactory.CreateOption.[$loaderType, $itemType](this.parseResult, this, $(id : int), $converter, state, _subruleStartPos, _subruleEndPos) ]>
          }

        | List(IsDynamicSyntaxExtentionPoint = true, Item = itemSequence) =>
          if (subrule.SrcRule.Type is RuleType.Void)
            <[ () ]>
          else
          {
            def callInfo    = itemSequence.NonMarkerSubrules[0] :> SubruleCompileInfo.ExtensibleCall;
            def itemType    = Environment.GetParseTreeType(callInfo.Symbol);
            <[
              Nitra.Internal.ParseTreeFactory.CreateDynamicExtensionPointList.[$(itemType : typed)](
                this.parseResult, state, _subruleStartPos, _subruleEndPos,
                $(callInfo.Symbol.GetRuleDescriptorRef()),
                $(callInfo.BindingPower.Name : string))
            ]>
          }

        | List(Item = itemSequence) =>
          if (subrule.SrcRule.Type is RuleType.Void)
            <[ () ]>
          else
          {
            def (loaderType, itemType, id, converter) = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
            <[ Nitra.Internal.ParseTreeFactory.CreateList.[$loaderType, $itemType](this.parseResult, this, $(id : int), $converter, state, _subruleStartPos, _subruleEndPos) ]>
          }

        | ListWithSeparator(Item = itemSequence, Separator = separatorSequence) =>
          match (itemSequence.SrcRule.Type, separatorSequence.SrcRule.Type)
          {
            | (Void, Void) => <[ () ]>
            | (_, Void)    =>
              def (itemLoaderType, itemType, itemSequenceId, itemConverter) = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
              <[
                Nitra.Internal.ParseTreeFactory.CreateListWithSeparatorOnlyItems.[$itemLoaderType, $itemType](
                  this.parseResult, this, $(itemSequenceId : int), $itemConverter, state, _subruleStartPos, _subruleEndPos)
              ]>

            | (Void, _)    =>
              def (separatorLoaderType, separatorType, separatorSequenceId, separatorConverter) = GetArgumentsForCreateParseTree(CompileSequence(separatorSequence));
              <[
                Nitra.Internal.ParseTreeFactory.CreateListWithSeparatorOnlySeparators.[$separatorLoaderType, $separatorType](
                  this.parseResult, this, $(separatorSequenceId : int), $separatorConverter, state, _subruleStartPos, _subruleEndPos)
              ]>

            | _ =>
              def (itemLoaderType, itemType, itemSequenceId, itemConverter)                     = GetArgumentsForCreateParseTree(CompileSequence(itemSequence));
              def (separatorLoaderType, separatorType, separatorSequenceId, separatorConverter) = GetArgumentsForCreateParseTree(CompileSequence(separatorSequence));
              <[
                Nitra.Internal.ParseTreeFactory.CreateListWithSeparator.[$itemLoaderType, $itemType, $separatorLoaderType, $separatorType](
                  this.parseResult, this, $(itemSequenceId : int), $itemConverter, this, $(separatorSequenceId : int), $separatorConverter, state, _subruleStartPos, _subruleEndPos)
              ]>
          }

        | Marker => <[ () ]>
      };

      def skippedValue = CompileEmptySubruleValueRecoveryMode(subrule, true);

      <[
        def state = parsingSequence.GetEarleyState($(subrule.State : int));
        if (Nitra.Internal.ParseTreeFactory.FindRecoveredSubrule(subruleStarts, state, out _subruleStartPos, out _subruleEndPos))
          $recoveredValue
        else
          $skippedValue
      ]>
    }

    private CompileEmptySubruleValueRecoveryMode(subrule : SubruleCompileInfo, allowEmptySpan : bool) : PExpr
    {
      match (subrule)
      {
        | Empty => <[ () ]>
        | SimpleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            <[ () ]>
          else if (allowEmptySpan)
            <[ $(Environment.GetParseTreeType(subrule.Symbol) : typed).CreateParseTree(_subruleStartPos, _subruleStartPos, parseResult, parsingSequence.Grammar) ]>
          else
            <[ $(Environment.GetParseTreeType(subrule.Symbol) : typed).AmbiguousOrMissingNode(parseResult, _subruleStartPos); ]>

        | ExtensibleCall as subrule =>
          if (subrule.Symbol.Type is RuleType.Void)
            <[ () ]>
          else
            <[ $(Environment.GetParseTreeType(subrule.Symbol) : typed).AmbiguousOrMissingNode(parseResult, _subruleStartPos); ]>

        | RegularCall
        | List as lst when lst.IsSkipAnyPattern
        | TokenString => <[ $(Environment.NSpanTypeVar : typed)(_subruleStartPos) ]>

        | Option as subrule =>
          if (subrule.SrcRule.Type is RuleType.Void)
            <[ () ]>
          else
            <[ Nitra.OptionParseTree.None(Nitra.Location(parseResult, _subruleStartPos)) ]>

        | List as lst =>
          if (lst.SrcRule.Type is RuleType.Void)
            <[ () ]>
          else
            <[ Nitra.EmptyListParseTree(Nitra.Location(parseResult, _subruleStartPos)) ]>

        | ListWithSeparator as lst =>
          match (lst.Item.SrcRule.Type, lst.Separator.SrcRule.Type)
          {
            | (Void, Void) => <[ () ]>
            | (_, Void)    => <[ Nitra.EmptyListParseTree(Nitra.Location(parseResult, _subruleStartPos)) ]>
            | (Void, _)    => <[ Nitra.EmptyListParseTree(Nitra.Location(parseResult, _subruleStartPos)) ]>
            | _            =>
              <[
                Nitra.ConcreteSequenceParseTree(
                  Nitra.Location(parseResult, _subruleStartPos),
                  Nitra.EmptyListParseTree(Nitra.Location(parseResult, _subruleStartPos)),
                  Nitra.EmptyListParseTree(Nitra.Location(parseResult, _subruleStartPos)))
              ]>
          }

        | Marker => <[ () ]>
      }
    }

    public static IsSubruleAcceptedForParseTree(subrule : SubruleCompileInfo) : bool
    {
      | SimpleCall(symbol, _args)          when symbol.Type is RuleType.Void
      | ExtensibleCall(symbol, _args, _bp) when symbol.Type is RuleType.Void
      | Empty
      | Marker => false
      | _ => !(subrule.SrcRule.Type is RuleType.Void)
    }

    private static Skip(subrule : SubruleCompileInfo, parentRawTreePointer : RawTreePointer) : PExpr
    {
      <[ pos += $(parentRawTreePointer.GetSize(subrule)); ]>
    }
  }
}
