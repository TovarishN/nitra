using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nitra.Internal;
using Nitra.Model;
using Nitra.Typing;

using System;
using System.Diagnostics;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  internal abstract partial class RuleParseTreeEmitter
  {
    protected DefineParseTreePrettyPrint(_nodeTb : TypeBuilder) : void
    {
      def isVoid(rule : Rule) { rule.Type is RuleType.Void }

      def makePrinter(ruleType : RuleType, title : string, parseTreePath : PExpr, body : PExpr) : PExpr
      {
        def name          = Util.tmpname("PrettyPrint" + title);
        def parseTreeType = Environment.GetParseTreeType(ruleType);
        _nodeTb.DefineConditional(<[ decl:
          private static $(name : usesite)(writer : Nitra.PrettyPrintWriter, source : Nitra.IPrettyPrintSource, parseTree : $(parseTreeType : typed), spanClass : Nitra.SpanClass) : void
          {
            if (parseTree.IsAmbiguous)
              writer.AmbiguousNode(parseTree :> Nitra.IAmbiguousParseTree, $(title : string), source, spanClass, $(name : usesite))
            else
              unchecked ($body)
          }
        ]>);
        <[ $(name : usesite)(writer, source, $parseTreePath, spanClass) ]>
      }

      def makeSpanClassRef(spanClass : SpanClassSymbol) : PExpr
      {
        if (spanClass != null)
          Environment.MakeSpanClassRef(spanClass)
        else
          <[ spanClass ]>
      }

      def isRecursiveCallFromPostfixRule(calleeRef)
      {
        match (this.RuleSymbol, calleeRef)
        {
          | (ExtensionRuleSymbol(BaseRule = SymbolRef.Some(baseRule), ExtensionType = Postfix), SymbolRef.Some(callee)) => baseRule.Equals(callee)
          | _ => false
        }
      }
      def fieldToString(rule : Rule) : PExpr
      {
        def loop(expr : PExpr, rule : Rule) : PExpr
        {
          def result =
            match (rule)
            {
              | String(str) as stringRule                       => <[ writer.String(source, $expr, $str, $(makeSpanClassRef(stringRule.SpanClass))); ]>
              | And | Not                                       => <[ () ]>
              | Sequence(rules) as sequenceRule                 =>
                def variables  = SCG.List();
                def statements = SCG.List();
                foreach (r in rules with i)
                {
                  if (isVoid(r))
                    statements.Add(loop(<[ () ]>, r));
                  else
                  {
                    def varName = Util.tmpname("item");
                    statements.Add(loop(<[ $(varName : usesite) ]>, r));
                    variables.Add(varName);
                  }
                }
                match (variables.Count)
                {
                  | 0 => <[ { ..$statements } ]>
                  | 1 =>
                    statements.Insert(0, <[ def $(variables[0] : usesite) = $expr ]>);
                    <[ { ..$statements } ]>

                  | _ =>
                    foreach(v in variables with index)
                      statements.Insert(index, <[ def $(v : usesite) = parseTree.$($"Item$(index + 1)" : usesite) ]>);
                    makePrinter(sequenceRule.Type, "Sequence", expr, <[ { ..$statements } ]>);
                }

              | Repeat as loop when loop.IsSkipAnyPattern                            => <[ writer.Token(source, $expr, true, "SkipAnyPattern", null); ]>
              //TODO: rule args
              | Call(SymbolRef.Some(RegularRuleSymbol as ruleSymbol), _args, _bp) as callRule => <[ writer.Token(source, $expr, $(ruleSymbol.CanParseEmptyString : bool), $(ruleSymbol.Name : string), $(makeSpanClassRef(callRule.SpanClass))); ]>
              | Call(SymbolRef.Some(MarkerSymbol as markerSymbol), _args, _bp) =>
                match (markerSymbol.Node.FullNameParts)
                {
                  | ["PrettyPrint",  "nl"] => <[ writer.NewLine() ]>
                  | ["PrettyPrint", "inl"] => <[ writer.NewLineAndIndent() ]>
                  | ["PrettyPrint",  "sm"] => <[ writer.Whitespace() ]>
                  | ["PrettyPrint",   "d"] => <[ writer.Unindent() ]>
                  | ["PrettyPrint",   "i"] => <[ writer.Indent() ]>
                  | _ => <[ () ]>
                }

              | Call(ruleRef, _args, _bp) when rule.Type is RuleType.Void =>
                match (ruleRef.GetValue(Environment.Project).Name)
                {
                  | "S" | "s" => <[ _ = "Whitespace"; ]> // TODO: add analysis of a space usefulness
                  | _ => <[ writer.Whitespace(); ]>
                }

              | Call(ruleRef, _args, _bp) when isRecursiveCallFromPostfixRule(ruleRef) => <[ $expr.PrettyPrint(writer, /*$bp*/0, spanClass); ]>//TODO: Broken PrettyPrint
              | Call                                                           => <[ $expr.PrettyPrint(writer, 0, spanClass); ]>
              | Repeat(_, _, rule) when isVoid(rule)                           => <[ writer.Whitespace(); ]>
              | Repeat(0, Some(1), rule) as optionRule                         =>
                makePrinter(optionRule.Type, "Option", expr, <[ when (parseTree.HasValue) $(loop(<[ parseTree.Value ]>, rule)) ]>);

              | Repeat(_, _, rule) as listRule                                 =>
                makePrinter(listRule.Type, "List", expr, <[ foreach (_elem in parseTree) $(loop(<[ _elem ]>, rule)) ]>);

              | RepeatWithSeparator(_, _, rule, separator, _) as listRule =>
                match (rule.Type, separator.Type)
                {
                  | (Void, Void) => <[ writer.Whitespace(); ]>
                  | (_, Void) =>
                    makePrinter(listRule.Type, "ListWithSeparatorOnlyItems", expr, <[
                      foreach (_elem in parseTree with i)
                      {
                        when (i > 0)
                          $(loop(<[ _ ]>, separator));
                        $(loop(<[ _elem ]>, rule));
                      }
                    ]>);

                  | (Void, _) =>
                    makePrinter(listRule.Type, "ListWithSeparatorOnlySeparators", expr, <[
                      foreach (_separator in parseTree with i)
                      {
                        $(loop(<[ _ ]>, rule));
                        $(loop(<[ _separator ]>, separator));
                      }
                      unless (parseTree.IsEmpty)
                        $(loop(<[ _ ]>, rule));
                    ]>);

                  | _ =>
                    makePrinter(listRule.Type, "ListWithSeparator", expr, <[
                      def elems      = parseTree.Item1;
                      def separators = parseTree.Item2;
                      foreach (elem in elems with i)
                      {
                        $(loop(<[ elem ]>, rule));
                        when (i < separators.Count)
                        {
                          def separator = separators[i];
                          $(loop(<[ separator ]>, separator));
                        }
                      }
                    ]>);
                }
            };
          result
        }
        loop(<[ this.$(rule.FieldName : usesite) ]>, rule);
      }

      def code = this.RuleSymbol.SubRules.Map(fieldToString);

      def printGarbage =
        if (this.RuleSymbol.IsToken) <[ writer.TryPrintGarbage(source, this.Span); ]>
        else <[ () ]>;

      def ruleSpanClass = this.RuleSymbol.Options.SpanClassSymbol;
      def spanClassInit =
        if (ruleSpanClass != null)
          <[ spanClass = $(Environment.MakeSpanClassRef(ruleSpanClass)) ]>;
        else
          <[ _ = spanClass ]>;

      def decl =
      if (this.RuleSymbol is ExtensionRuleSymbol(ExtensionType = Postfix(BindingPower = _bindingPower)))
        <[ decl:
          [Nemerle.Diagnostics.CompileStatistic("PrettyPrint")]
          public override PrettyPrint(writer : Nitra.PrettyPrintWriter, callerBindingPower : int, mutable spanClass : Nitra.SpanClass) : void
          {
            $spanClassInit;
            def source = this.PrettyPrintSource;
            $printGarbage;
            //TODO: determine correct braces from grammar
            when (callerBindingPower > 0/*$bindingPower*/)//TODO: Broken PrettyPrint
              writer.String(source, Nitra.NSpan(0, 1), "(", null);
            ..$code;
            when (callerBindingPower > 0/*$bindingPower*/)//TODO: Broken PrettyPrint
              writer.String(source, Nitra.NSpan(0, 1), ")", null);
          }
        ]>
      else
        <[ decl:
          [Nemerle.Diagnostics.CompileStatistic("PrettyPrint")]
          public override PrettyPrint(writer : Nitra.PrettyPrintWriter, callerBindingPower : int, mutable spanClass : Nitra.SpanClass) : void
          {
            $spanClassInit;
            def source = this.PrettyPrintSource;
            ignore(writer, callerBindingPower, source);
            ..$code;
          }
        ]>;
      _nodeTb.DefineConditional(decl);
    }

    protected DefineAmbiguousOrMissingPrettyPrint(_ambiguousOrMissingTb : TypeBuilder) : void
    {
      _ambiguousOrMissingTb.DefineConditional(<[ decl:
        [Nemerle.Diagnostics.CompileStatistic("PrettyPrint")]
        public override PrettyPrint(writer : Nitra.PrettyPrintWriter, _callerBindingPower : int, spanClass : Nitra.SpanClass) : void
        {
          if (this.IsAmbiguous)
            writer.AmbiguousNode(this, spanClass);
          else
            writer.MissingNode($(this.RuleSymbol.GetRuleDescriptorRef()));
        }
      ]>);
    }
  }
}
