using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Serialization
{
  [Record]
  public abstract class TypeSerializationBuilder
  {
    public          Compiler  : SerializationCompiler  { get; }
    public          Formatter : SerializationFormatter { get { Compiler.Formatter } }
    public          Type      : FixedType              { get; }
    public abstract Tag       : TypeTag                { get; }
    public          TagExpr   : PExpr                  { get { <[ $(Tag :> byte : byte) :> Nitra.Serialization.TypeTag ]> } }

    public abstract Write(obj : PExpr) : PExpr;
    public abstract Read(memberName : PExpr, typeTag : PExpr) : PExpr;
    protected virtual EmitImpl() : void {}

    [RecordIgnore] private mutable _isEmitted : bool;

    public Emit() : void
    {
      unless (_isEmitted)
      {
        EmitImpl();
        _isEmitted = true;
      }
    }

    public override ToString() : string
    {
      $"Type: $(Type)"
    }
  }
}
