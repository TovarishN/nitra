using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  public module PExprUtils
  {
    public FromQualifiedIdentifier(qid : list[string]) : PExpr
    {
      | []            => throw ArgumentOutOfRangeException("qid", "Non empty list required");
      | first :: tail => FromQualifiedMember(<[ $(first : usesite) ]>, tail)
    }

    public FromQualifiedIdentifier(qid : list[Identifier]) : PExpr
    {
      | []            => throw ArgumentOutOfRangeException("qid", "Non empty list required");
      | first :: tail => FromQualifiedMember(Util.locate(first.Location.NLocation(), <[ $(first.Value : usesite) ]>), tail)
    }

    public FromQualifiedMember(obj : PExpr, qid : list[string]) : PExpr
    {
      match (qid)
      {
        | []            => obj
        | first :: tail => FromQualifiedMember(<[ $obj.$(first : usesite) ]>, tail)
      }
    }

    public FromQualifiedMember(obj : PExpr, qid : list[Identifier]) : PExpr
    {
      match (qid)
      {
        | []            => obj
        | first :: tail => FromQualifiedMember(Util.locate(first.Location.NLocation(), <[ $obj.$(first.Value : usesite) ]>), tail)
      }
    }

    public static FlattenPExprSequence(this seq : IEnumerable[PExpr], recursive : bool = true) : list[PExpr]
    {
      def expandSequence(expr : PExpr)
      {
        | Sequence(exprs) => if (recursive) exprs.FlattenPExprSequence(true) else exprs
        | _               => [expr]
      }
      seq.Map(expandSequence).Flatten();
    }

    public static FlattenPExpr(this expr : IEnumerable[PExpr]) : PExpr
    {
      PExpr.Sequence(expr.NToList()).FlattenPExpr();
    }

    public static FlattenPExpr(this expr : PExpr) : PExpr
    {
      Macros.TraverseExpr(None(), expr, false, (_, after, expr) =>
      {
        if (after)
          match (expr)
          {
            | PExpr.Sequence(exprs) => PExpr.Sequence(exprs.FlattenPExprSequence(false))
            | expr => expr
          }
        else
          expr
      });
    }

    public static CombineAnd(acc : ref PExpr, predicate : PExpr) : void
    {
      assert(predicate : object != null);

      if (acc : object == null)
        acc = predicate;
      else
        acc = <[ $acc && $predicate ]>
    }
  }
}
