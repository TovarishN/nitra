using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal module RuleNameDecorators
  {
    public DecorateRuleClassName(this ruleSymbol : RuleSymbol) : string
    {
      | ExtensibleRuleSymbol => $"_#extensible#_..$(ruleSymbol.ModuleRelativeName; \"_\")_"
      | ExtensionRuleSymbol  => $"_#extension#__..$(ruleSymbol.ModuleRelativeName; \"_\")_"
      | SimpleRuleSymbol     => $"_#simple#_____..$(ruleSymbol.ModuleRelativeName; \"_\")_"
      | RegularRuleSymbol    => $"_#regular#____..$(ruleSymbol.ModuleRelativeName; \"_\")_"
      | _                    => assert(false)
    }

    public DecorateRuleDescriptorName(this ruleSymbol : RuleSymbol) : string
    {
      | ExtensibleRuleSymbol => $"..$(ruleSymbol.ModuleRelativeName; \"_\")"
      | ExtensionRuleSymbol  => $"..$(ruleSymbol.ModuleRelativeName; \"_\")"
      | SimpleRuleSymbol     => $"..$(ruleSymbol.ModuleRelativeName; \"_\")"
      | RegularRuleSymbol    => $"..$(ruleSymbol.ModuleRelativeName; \"_\")"
      | _                    => assert(false)
    }

    public DecorateRuleDescriptorName(this ruleSymbol : Nitra.Ast.RuleSymbol) : string
    {
      | Nitra.Ast.ExtensibleRuleSymbol => $"..$(GetSyntaxModuleRelativeName(ruleSymbol); \"_\")"
      | Nitra.Ast.ExtensionRuleSymbol  => $"..$(GetSyntaxModuleRelativeName(ruleSymbol); \"_\")"
      | Nitra.Ast.SimpleRuleSymbol     => $"..$(GetSyntaxModuleRelativeName(ruleSymbol); \"_\")"
      | Nitra.Ast.RegexRuleSymbol      => $"..$(GetSyntaxModuleRelativeName(ruleSymbol); \"_\")"
      | _                    => assert(false)
    }

    private GetSyntaxModuleRelativeName(symbol : Nitra.Declarations.DeclarationSymbol) : list[string]
    {
      def loop(symbol, path)
      {
        match (symbol)
        {
          | ruleMember   is Nitra.Ast.RuleBodyMemberDeclarationSymbol     => loop(ruleMember.Parent, ruleMember.Name :: path)
          | moduleMember is Nitra.Ast.SyntaxModuleMemberDeclarationSymbol => moduleMember.Name :: path
          | _ => assert(false, $"Can not determine declaring syntax module from symbol '$symbol'")
        }
      }
      loop(symbol, [])
    }

    public DecorateRuleName(this ruleSymbol : RuleSymbol) : string
    {
      $<#_#_..$(ruleSymbol.ModuleRelativeName; "_")_#>
    }
  }
}
