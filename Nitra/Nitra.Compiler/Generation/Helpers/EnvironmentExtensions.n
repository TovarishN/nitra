using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using Nitra.Model;
using Nitra.Typing;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  internal module EnvironmentExtensions
  {
    public MakeLabel(this environment : EmitterEnvironment, name : string) : PExprLabel
    {
      PExprLabel(environment.Manager, name);
    }

    public MakeLabels(this environment : EmitterEnvironment, count : int) : array[PExprLabel]
    {
      def labels = array(count);
      for (mutable i = 0; i < labels.Length; ++i)
        labels[i] = MakeLabel(environment, $"label$i");
      labels
    }

    public GetRuleDescriptorRef(this symbol : RuleSymbol) : PExpr
    {
      def moduleSymbol = symbol.DeclaringModule;
      def path = moduleSymbol.Node.FullNameParts + [symbol.DecorateRuleDescriptorName()];
      PExprUtils.FromQualifiedIdentifier(path);
    }

    public GetRuleDescriptorRef(this symbol : Nitra.Ast.RuleSymbol) : PExpr
    {
      def moduleSymbol = GetDeclaringSyntaxModule(symbol);
      def path         = Util.GetFullName(moduleSymbol, [symbol.DecorateRuleDescriptorName()]);
      PExprUtils.FromQualifiedIdentifier(path);
    }

    public GetGrammarDescriptorRef(this symbol : SyntaxModuleSymbol) : PExpr
    {
      def grammarTypeName = PExprUtils.FromQualifiedIdentifier(symbol.Node.FullNameParts);
      def grammarType     = ManagerClass.Instance.CoreEnv.BindFixedType(grammarTypeName);
      <[ $(grammarType : typed).StaticDescriptor ]>;
    }

    public GetGrammarDescriptorRef(this symbol : Nitra.Ast.SyntaxModuleSymbol) : PExpr
    {
      def grammarTypeName = PExprUtils.FromQualifiedIdentifier(Util.GetFullName(symbol, []));
      def grammarType     = ManagerClass.Instance.CoreEnv.BindFixedType(grammarTypeName);
      <[ $(grammarType : typed).StaticDescriptor ]>;
    }

    public GetParserClassRef(this symbol : RuleSymbol) : PExpr
    {
      def moduleSymbol = symbol.DeclaringModule;
      def path = moduleSymbol.Node.FullNameParts + [AssemblyConstants.GrammarImplName, symbol.DecorateRuleClassName()];
      PExprUtils.FromQualifiedIdentifier(path);
    }

    private GetDeclaringSyntaxModule(symbol : Nitra.Declarations.DeclarationSymbol) : Nitra.Ast.SyntaxModuleSymbol
    {
      | ruleMember   is Nitra.Ast.RuleBodyMemberDeclarationSymbol     => GetDeclaringSyntaxModule(ruleMember.Parent)
      | moduleMember is Nitra.Ast.SyntaxModuleMemberDeclarationSymbol => moduleMember.Parent
      | _ => assert(false, $"Can not determine declaring syntax module from symbol '$symbol'")
    }
  }
}
