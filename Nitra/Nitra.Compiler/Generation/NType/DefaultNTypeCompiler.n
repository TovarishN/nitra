using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Compiler
{
  public sealed class DefaultNTypeCompiler : NTypeCompiler
  {
    public this(environment : EmitterEnvironment)
    {
      Environment = environment;
    }

    public override Environment : EmitterEnvironment { get; }

    [Memoize]
    public override CompileProjectedPropertyType(propertySymbol : ProjectedPropertySymbol) : FixedType
    {
      def expr   = Compile(propertySymbol.Type);
      def result = Environment.Manager.CoreEnv.BindFixedType(expr);
      result
    }

    [Memoize]
    public override CompileStructuralPropertyType(propertySymbol : StructuralPropertySymbol) : AstPropertyType
    {
      def isParsedValueType(t : FixedType) : bool
      {
        | Class(x, [_]) => x.Equals(Environment.ParsedValueTypeInfo)
        | _ => false
      }

      def expr   = Compile(propertySymbol.Type);
      def result = Environment.Manager.CoreEnv.BindFixedType(expr);
      if (isParsedValueType(result))
        AstPropertyType.ParsedValue(result)
      else if (result.TryRequire(Environment.AstTypeVar))
        AstPropertyType.Ast(result)
      else if (result.TryRequire(Environment.NSpanTypeVar))
        AstPropertyType.Span(result)
      else
        AstPropertyType.ParsedValue(FixedType.Class(Environment.ParsedValueTypeInfo, [result]))
    }

    [Memoize]
    public override CompileDependentPropertyType(propertySymbol : DependentPropertySymbol) : FixedType
    {
      def expr = Compile(propertySymbol.Type);
      Environment.Manager.CoreEnv.BindFixedType(expr)
    }

    private MakeNemerleType(t : NPredefinedType) : PExpr
    {
      | Void   => <[ void ]>
      | Int    => <[ $(Environment.Int32TypeVar : typed) ]>
      | String => <[ $(Environment.StringTypeVar : typed) ]>
      | Ast    => <[ $(Environment.AstTypeVar : typed) ]>
    }

    public override Compile(t : NType) : PExpr
    {
      Util.locate(t.Location.NLocation(),
        match (t)
        {
          | Predefined(t)    => MakeNemerleType(t)
          | Qualified(parts) =>
            def makeName(part : TypeNamePart) : Name
            {
              def env = part.NemerleEnv ?? Environment.Manager.CoreEnv;
              Name(part.Name, Environment.Manager.MacroColors.Color, env)
            }

            if (parts is first :: other)
            {
              mutable acc = Util.locate(first.Location.NLocation(),
              {
                def head = <[ $(makeName(first) : name) ]>;
                if (first.TypeArguments.IsEmpty())
                  head
                else
                  <[ $head[..$(first.TypeArguments.Map(Compile))]]>;
              });
              foreach (t in other)
              {
                Util.locate(t.Location.NLocation(),
                {
                  acc = <[ $acc . $(makeName(t) : name) ]>;
                  unless (t.TypeArguments.IsEmpty())
                    acc = <[ $acc[..$(t.TypeArguments.Map(Compile))]]>;
                });
              }
              acc
            }
            else assert3(false)

          | Tuple(members)   => PExpr.Call(<[ $("*" : usesite) ]>, members.Map(Compile))
          | Func(from, to)   => <[ $(Compile(from)) -> $(Compile(to)) ]>
          | OptionList(item)
          | List(item)       => <[ $(Compile(item)).IAstList ]>
          | Option(item)     => <[ $(Compile(item)).IAstOption ]>
        })
    }
  }
}
