using Nitra.Model;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;

namespace Nitra.Compiler
{
  public abstract class NTypeCompiler
  {
    public abstract Environment : EmitterEnvironment { get; }
    public abstract CompileProjectedPropertyType(propertySymbol : ProjectedPropertySymbol) : FixedType;
    public abstract CompileStructuralPropertyType(propertySymbol : StructuralPropertySymbol) : AstPropertyType;
    public abstract CompileDependentPropertyType(propertySymbol : DependentPropertySymbol) : FixedType;
    public abstract Compile(t : NType) : PExpr;

    public CompileToAstPropertyType(t : NType) : AstPropertyType
    {
      def expr   = Compile(t);
      def result = Environment.Manager.CoreEnv.BindFixedType(expr);
      if (result is FixedType.Class(x, [argument]) when x.Equals(Environment.ParsedValueTypeInfo))
        AstPropertyType.ParsedValue(result, argument)
      else if (result.TryRequire(Environment.AstTypeVar))
        AstPropertyType.Ast(result)
      else if (result.TryRequire(Environment.NSpanTypeVar))
        AstPropertyType.Span(result)
      else
        AstPropertyType.ParsedValue(FixedType.Class(Environment.ParsedValueTypeInfo, [result]), result)
    }
  }
}
