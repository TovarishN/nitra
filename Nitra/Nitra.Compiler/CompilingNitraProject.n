using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Runtime;
using Nitra.Typing;
using Nitra.ProjectSystem;

using System;
using System.Reflection;
using System.Text;

using SCG  = System.Collections.Generic;
using Path = System.IO.Path;
using IOFile = System.IO.File;
using NC = Nemerle.Compiler;

namespace Nitra.Compiler
{
  public sealed partial class CompilingNitraProject : NitraProject
  {
    static DebugStop : bool = false;

    private this(manager : ManagerClass)
    {
      base(NemerleCompilerMessages());
      Manager = manager;
      ProjectDir = Path.GetDirectoryName(manager.Options.ProjectPath);
    }

    public ErrorCount : int { get { (CompilerMessages :> NemerleCompilerMessages).ErrorCount } }

    public override Manager : ManagerClass { get; }

    private mutable _environment : EmitterEnvironment;

    public Environment : EmitterEnvironment
    {
      get
      {
        when (_environment : object == null)
          _environment = EmitterEnvironment(this);
        _environment
      }
    }

    public override Files : Seq[Nitra.ProjectSystem.File] { get { _sourceFiles } }

    public override Init(referencedAssemblies : Seq[AssemblyName]) : void
    {
      base.Init(referencedAssemblies);
      _beforeInheritance = false;
      _beforeTypedMembers = false;
      _withTypedMembers = false;
      _environment = null;
      _allFiles.Clear();
      _sourceFiles.Clear();
    }

    public override GetNemerleType(symbol : Symbol) : FixedType
    {
      | ruleSymbol   is RuleSymbol   => Environment.GetParseTreeType(ruleSymbol)
      | astSymbol    is AstSymbol    => Environment.GetAstType(astSymbol)
      | symbolSymbol is SymbolSymbol => Environment.GetSymbolClass(symbolSymbol)
      | _ => assert(false, $"Cannot get Nemerle type for symbol '$symbol'")
    }

    private _allFiles      : SCG.Dictionary[int, NemerleFile] = SCG.Dictionary();
    private _sourceFiles   : SCG.List[NemerleFile]            = SCG.List();
    private _loadedSources : SCG.Dictionary[string, SourceSnapshot] = SCG.Dictionary(StringComparer.InvariantCultureIgnoreCase);

    public override MakeFakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location
    {
      MakeNitraLocation(location)
    }

    private LoadSource(filePath : string) : SourceSnapshot
    {
      mutable source;
      when (_loadedSources.TryGetValue(filePath, out source))
        return source;

      def isExecutable = filePath.EndsWith(".dll",  StringComparison.OrdinalIgnoreCase) || filePath.EndsWith(".exe",  StringComparison.OrdinalIgnoreCase);
      if (!isExecutable && NitraUtils.IsFileExists(filePath))
      {
        def text = IOFile.ReadAllText(filePath, Encoding.UTF8);
        source = SourceSnapshot(text, filePath)
      }
      else
        source = SingleLineSourceSnapshot("", filePath);

      _loadedSources[filePath] = source;

      source
    }

    private GetSource(location : Nemerle.Compiler.Location) : SourceSnapshot
    {
      mutable file;
      if (_allFiles.TryGetValue(location.FileIndex, out file))
        file.GetSource()
      else
        LoadSource(location.File)
    }

    public override MakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location
    {
      assert2(!DebugStop);
      def source = GetSource(location);
      try
      {
        if (location.Line == 0 || source is SingleLineSourceSnapshot)
          Nitra.Location(source, 0)
        else
        {
          def startPos = source.LineColumnToPosition(LineColumn(location.Line,    location.Column));
          def endPos   = source.LineColumnToPosition(LineColumn(location.EndLine, location.EndColumn));
          Nitra.Location(source, startPos, endPos)
        }
      }
      catch { | _e => assert2(false); Nitra.Location(source, 0) }
    }

    public override CreateNemerleFile(source : NC.SourceSnapshot) : NemerleFile
    {
      def file = InMemoryNemerleFile(this, source);
      _allFiles[source.FileIndex] = file;
      _sourceFiles.Add(file);

      mutable processingCount = 0;
      Manager.SubscribeSourceChanged(source.FileIndex, source =>
      {
        processingCount += 1;

        try
          file.SourceChanged(source);
        catch
        {
          | e => Message.Error(Nemerle.Compiler.Location(source, 1, 1), e.ToString());
        }

        when (processingCount > 1 && Manager.IsIntelliSenseMode)
          Manager.RequestOnBuildTypesTree();
      }, true);

      file
    }

    public override EmitSymbol(symbol : DeclarationSymbol, _context : DependentPropertyEvalContext) : void
    {
      IgnoreParams();
      // TODO: generate code
    }
  } // class
} // namespace
