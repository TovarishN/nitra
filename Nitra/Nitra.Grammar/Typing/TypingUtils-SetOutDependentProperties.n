using Nitra.Model;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    public SetOutDependentProperties(project : NitraProject) : void
    {
      def makeLocation(container : PropertyContainerSymbol, property : DependentPropertySymbol) : Location
      {
        if (property.PropertyContainer : object == container)
          property.FirstLocation
        else
          container.FirstLocation
      }
      def addAssignment(container : PropertyContainerSymbol, property : DependentPropertySymbol, expr : PExpr) : void
      {
        def loc        = makeLocation(container, property);
        def assignment = DependentPropertyAssignment(loc, [Identifier(container.FirstLocation, property.Name)], expr);
        (container :> IDependentPropertyAssignmentContainer).AddAssignment(assignment);
      }
      def reportError(container : PropertyContainerSymbol, property : DependentPropertySymbol) : void
      {
        def loc = makeLocation(container, property);
        project.Error(loc, $"Output dependent property '$(property.Name)' is never assigned to.");
      }

      def visitedSymbols = SCG.HashSet();

      def handleAst(symbol : AstSymbol) : void
      {
        when (symbol.AssemblyId == AssemblyIds.CurrentAssembly && visitedSymbols.Add(symbol) && symbol is IDependentPropertyAssignmentContainer)
        {
          def initializedOutProperties = SCG.HashSet(symbol.InitializedOutProperties);
          foreach (baseSymbol in symbol.AllBaseAsts)
          {
            handleAst(baseSymbol);
            initializedOutProperties.UnionWith(baseSymbol.InitializedOutProperties);
          }

          unless (symbol.IsAbstract)
          {
            foreach (DependentPropertySymbol(Direction = Out) as outPropertySymbol when !initializedOutProperties.Contains(outPropertySymbol) in symbol.AllProperties)
            {
              if (outPropertySymbol.LinkedProperty is SymbolRef.Some(inPropertySymbol))
                addAssignment(symbol, outPropertySymbol, <[ this.$(inPropertySymbol.Name : usesite) ]>);
              else if (symbol.IsDeclaration && outPropertySymbol.Name == "Symbol")
                addAssignment(symbol, outPropertySymbol, <[ this.ContainingScope.Define(this, context) ]>);
              else
                reportError(symbol, outPropertySymbol);
            }
          }
        }
      }

      def handleSymbol(symbol : SymbolSymbol) : void
      {
        when (symbol.AssemblyId == AssemblyIds.CurrentAssembly && visitedSymbols.Add(symbol) && symbol is IDependentPropertyAssignmentContainer)
        {
          def initializedOutProperties = SCG.HashSet(symbol.InitializedOutProperties);
          foreach (baseSymbol in symbol.AllBaseSymbols)
          {
            handleSymbol(baseSymbol);
            initializedOutProperties.UnionWith(baseSymbol.InitializedOutProperties);
          }

          unless (symbol.IsAbstract)
          {
            foreach (DependentPropertySymbol(Direction = Out) as outPropertySymbol when !initializedOutProperties.Contains(outPropertySymbol) in symbol.AllProperties)
            {
              if (outPropertySymbol.LinkedProperty is SymbolRef.Some(inPropertySymbol))
                addAssignment(symbol, outPropertySymbol, <[ this.$(inPropertySymbol.Name : usesite) ]>);
              else
                reportError(symbol, outPropertySymbol);
            }
          }
        }
      }

      foreach (symbol in project.RootNamespace.Node.GetDescendants.[PropertyContainerSymbol]())
      {
        | AstSymbol    as s => handleAst(s)
        | SymbolSymbol as s => handleSymbol(s)
        | _ => assert(false)
      }
    }
  }
}
