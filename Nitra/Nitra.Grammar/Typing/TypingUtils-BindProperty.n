using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindProperty(propertyContainer : PropertyContainerSymbol, fieldName : G.Identifier, compilerMessages : ICompilerMessages) : SymbolRef[PropertySymbol]
    {
      def name = fieldName.Value();
      match (propertyContainer.LookupProperty(name))
      {
        | VSome(p) => SymbolRef.Some(fieldName.Location, false, p)
        | VNone    =>
          compilerMessages.Error(fieldName, $"Unbound property '$name'.");
          SymbolRef.None(fieldName.Location, false)
      }
    }
  }
}
