using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

using NC = Nemerle.Compiler;

namespace Nitra.ProjectSystem
{
  public abstract class NemerleFile : ConcreteFile
  {
    protected this(project : Project, file : NC.File)
    {
      base(null);
      Project      = project;
      InternalFile = file;
    }

    public          InternalFile : NC.File  { get; }
    public override Project      : Project  { get; }
    public override FullName     : string   { get { InternalFile.FullName } }
    public override Language     : Language { get { NitraLang.Instance } }
    public override Id           : int      { get { InternalFile.Id } }
  }

  public class InMemoryNemerleFile : NemerleFile
  {
    public this(project : Project, source : NC.SourceSnapshot)
    {
      base(project, source.File);
      _source = source;
    }

    private mutable _source : NC.SourceSnapshot;

    public override GetSource() : Nitra.SourceSnapshot  { Nitra.SourceSnapshot(_source.GetText(), this) }
    public override Length      : int             { get { _source.GetText().Length } }

    public SourceChanged(newSource : NC.SourceSnapshot) : void
    {
      _source = newSource;

      ReParse();
      GetCompilerMessages().TranslateTo(Project.CompilerMessages);
    }
  }

  public class FakeNemerleFile : NemerleFile
  {
    public this (project : Project, name : string)
    {
      base(project, NC.FileUtils.GetFile(name));
      def fullName     = FullName;
      def isExecutable = fullName.EndsWith(".dll",  StringComparison.OrdinalIgnoreCase) || fullName.EndsWith(".exe",  StringComparison.OrdinalIgnoreCase);
      if (!isExecutable && NitraUtils.IsFileExists(fullName))
      {
        def text = File.ReadAllText(FullName, Encoding.UTF8);
        _source = SourceSnapshot(text, this, 0);
      }
      else
        _source = SingleLineSourceSnapshot("", this);
    }

    private _source : SourceSnapshot;

    public override GetSource() : SourceSnapshot  { _source }
    public override Length      : int             { get { 0 } }
  }
}
