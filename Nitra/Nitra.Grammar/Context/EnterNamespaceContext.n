using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public class EnteredNamespaceContext : EnteredScopeContext, INemerleEnvironmentContext
  {
    public Entered   : list[OldNamespaceSymbol] { get; }

    public this(parent : Context, currentNode : OldNamespaceSymbol)
    {
      base(parent);

      Namespace = currentNode;

      def getEnteredNss(currentNode : OldNamespaceSymbol, acc : list[OldNamespaceSymbol]) : list[OldNamespaceSymbol]
      {
        def parentNode = currentNode.Node.Parent;

        if (parentNode == null)
          currentNode :: acc
        else match (currentNode.Node.Parent.GetSymbol.[OldNamespaceSymbol]())
        {
          | [ns] => getEnteredNss(ns, currentNode :: acc)
          | _ => assert3(false)
        }
      }

      Entered = getEnteredNss(currentNode, []);
    }

    public virtual Namespace : OldNamespaceSymbol { get; }

    public override CurrentSymbols : list[Symbol] { get { Entered.Map(x => x) } }

    [Memoize]
    GetNemerleEnvironment() : GlobalEnv implements INemerleEnvironmentContext.GetNemerleEnvironment
    {
      def parentEnv = Parent.GetNemerleEnvironment();
      parentEnv.EnterIntoNamespace(Namespace.Node.FullNameParts)
    }

    public override ToString() : string
    {
      $<#namespace ..$(Entered; ".")#>
    }
  }
}
