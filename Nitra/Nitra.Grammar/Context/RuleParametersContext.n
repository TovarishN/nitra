using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  public sealed class RuleParametersContext : SimpleNameContext[RuleParameterSymbol]
  {
    public this(parent : Context, parameters : list[RuleParameterSymbol])
    {
      base(parent);
      
      _symbolMap = Map();
      Initialize(parameters);
    }

    public this(parent : Context)
    {
      base(parent);
      
      _symbolMap = Map();
    }
    
    private mutable _symbolMap : Map[string, RuleParameterSymbol];

    public override SymbolMap : Map[string, RuleParameterSymbol] { get { _symbolMap } }

    public Initialize(parameters : list[RuleParameterSymbol]) : void
    {
      assert(_symbolMap.IsEmpty);

      foreach (p in parameters)
      {
        if (_symbolMap.Find(p.Name) is Some(existingParameter))
          using (root = this.RootError(p.FirstLocation, $"Redefinition of rule parameter '$(p.Name)'"))
            root.Hint(existingParameter.FirstLocation, "previous definition");
        else
          _symbolMap = _symbolMap.Add(p.Name, p)
      }
    }
  }
}
