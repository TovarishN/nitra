using Nitra.Ast;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace DotNet
{
  public sealed class AstTypeUnifier : DotNet.TypeUnifier
  {
    public new static InitInstance() : void
    {
      Instance = AstTypeUnifier();
    }

    protected override IsSubtypeUnwraped(subtype : TypeSymbol, supertype : TypeSymbol) : bool
    {
      //subtype.GetType().IsAssignableFrom
      if (base.IsSubtypeUnwraped(subtype, supertype))
        true
      else match (subtype, supertype)
      {
        | (subtypeList is ListAstTypeSymbol, supertypeList is ListAstTypeSymbol) =>
          def result = IsSubtype(subtypeList.ElemType, supertypeList.ElemType);
          result

        | (extension is Nitra.Ast.ExtensionRuleSymbol, extensible is Nitra.Ast.TopExtensibleRuleSymbol)
          when extension.IsParentEvaluated && extension.Parent.Equals(extensible) => true
        | _ => false
      }
    }

    protected override UnifyUnwraped(typeSymbol1 : TypeSymbol, typeSymbol2 : TypeSymbol, updatedVariables : ref LightList[TypeVarSymbol]) : bool
    {
      match (typeSymbol1, typeSymbol2)
      {
        | (Nitra.Ast.FunctionTypeSymbol as f1, Nitra.Ast.FunctionTypeSymbol as f2) =>
          unless (RequireAll(f1.Parameters, f2.Parameters, ref updatedVariables))
            return false;

          ProvideImpl(f1.ReturnType, f2.ReturnType, ref updatedVariables)

        | (AstTypeSymbol, RuleTypeSymbol)
        | (RuleTypeSymbol, AstTypeSymbol) => false
        | _ => base.UnifyUnwraped(typeSymbol1, typeSymbol2, ref updatedVariables)
      }
    }
  }
}
