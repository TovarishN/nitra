using Nitra.ProjectSystem;
using Nitra.Typing.RuleMethod;
using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Typing
{
  public sealed class NitraExternalSymbolPropertyReader : DefaultExternalSymbolPropertyReader
  {
    public override ReadPropertyValue[T](project : Project, symbol : Symbol, propertyName : string) : T
    {
      match (symbol, propertyName)
      {
        | (PropertySymbol as s, "Type")       => AstProperty_Type(project :> NitraProject, s) :> T
        | (RuleMethodSymbol  as s, "Signature")  => RuleMethod_Signature(project :> NitraProject, s) :> T
        | _ => base.ReadPropertyValue(project, symbol, propertyName)
      }
    }

    private AstProperty_Type(project : NitraProject, symbol : PropertySymbol) : object
    {
      def nemerleType = project.GetNemerleType(symbol.PropertyContainer);

      mutable ntype;
      foreach (property is IProperty in nemerleType.TypeInfo.LookupMember(symbol.Name, false))
      {
        ntype = ReflectNType(project, nemerleType.TypeOfMember(property));
        break;
      }
      assert(ntype != null);
      ntype
    }

    private ReflectNType(project : NitraProject, typeVar : TypeVar) : NType
    {
      def getOuterType(ti : TypeInfo) : TypeInfo
      {
        def parentNode = ti.NamespaceNode.Parent;
        if (parentNode != null)
        {
          def loop(_)
          {
            | one :: _ when one.GetNestedTypes().Contains(ti) => one
            | _ :: tail => loop(tail)
            | []        => null
          }
          loop(parentNode.LookupTypes([], false))
        }
        else
          null
      }

      def makeQualified(loc : Nitra.Location, ti : TypeInfo, args : list[TypeVar]) : NType.Qualified
      {
        def env       = ti.Manager.CoreEnv;
        def nameParts = ti.FullName.Split(array['.']);
        assert(nameParts.Length > 0);
        mutable typeNameParts = [TypeNamePart(loc, nameParts[nameParts.Length - 1], args.Map(ReflectNType(project, _)), env)];
        for (mutable i = nameParts.Length - 2; i >= 0; --i)
          typeNameParts ::= TypeNamePart(loc, nameParts[i], [], env);
        NType.Qualified(loc, typeNameParts)
      }

      def loc = project.MakeFakeNitraLocation(typeVar.Location);
      match (typeVar)
      {
        | FixedType.Tuple(members)               => NType.Tuple(loc, members.Map(ReflectNType(project, _))) // for function signatures
        | FixedType.Void                         => NType.Predefined(loc, NPredefinedType.Void)
        | FixedType.Fun(from, to)                => NType.Func(loc, ReflectNType(project, from), ReflectNType(project, to))
        | FixedType.Class(ti, []) when ti.FullName == "System.Int32"            => NType.Predefined(loc, NPredefinedType.Int)
        | FixedType.Class(ti, []) when ti.FullName == "System.String"           => NType.Predefined(loc, NPredefinedType.String)
        | FixedType.Class(ti, []) when ti.FullName == "Nitra.Declarations.IAst" => NType.Predefined(loc, NPredefinedType.Ast)
        | FixedType.Class(ti, []) when ti.Name == "IAstOption" =>
          def outerType = getOuterType(ti);
          if (outerType : object != null)
            NType.Option(loc, ReflectNType(project, FixedType.Class(outerType, []) <- Location = typeVar.Location))
          else
            makeQualified(loc, ti, [])

        | FixedType.Class(ti, []) when ti.Name == "IAstList" =>
          def outerType = getOuterType(ti);
          if (outerType : object != null)
            NType.List(loc, ReflectNType(project, FixedType.Class(outerType, []) <- Location = typeVar.Location))
          else
            makeQualified(loc, ti, [])

        | FixedType.Class(ti, args) => makeQualified(loc, ti, args)
        | _ => assert3(false, "Failed to reflect NType from TypeVar")
      }
    }

    private RuleMethod_Signature(project : NitraProject, symbol : RuleMethodSymbol) : object
    {
      def reflectParameter(p : Typedtree.TParameter) : RuleMethodParameter
      {
        def loc  = project.MakeFakeNitraLocation(p.NameLocation);
        def name = Identifier(loc, p.Name);
        def type = ReflectNType(project, p.Type);
        RuleMethodParameter(loc, name, type)
      }

      def nemerleType = project.GetNemerleType(symbol.DeclaringRule);

      mutable signature;
      foreach (method is IMethod in nemerleType.TypeInfo.LookupMember(symbol.Name, false))
      {
        def loc        = project.MakeFakeNitraLocation(method.NameLocation);
        def parameters = method.Header.Parameters.Map(reflectParameter);
        def type       = ReflectNType(project, method.Header.ReturnType);
        signature      = RuleMethodSignature(loc, parameters, type);
        break;
      }
      assert(signature != null);
      signature
    }
  }
}
