using Nitra.Runtime;
using Nitra.Model;
using Nitra.Typing.RuleMethod;
using Nitra.Utils;

using Nemerle;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol]
  public abstract class ExtensionRuleSymbol     : SyntaxRuleSymbol, IRuleDeclarationSite
  {
    public        abstract BaseRule             : SymbolRef[ExtensibleRuleSymbol] { get; }
    public sealed override Type                 : RuleType                        { get { if (BaseRule is SymbolRef.Some(s)) s.Type else RuleType.Void() } }
    public        override Description          : string                          { get { "extension rule" } }

    public variant ExtensionRuleType
    {
      | Prefix
      | Postfix { prefix : Rule.Call; rule : Rule.Sequence; public BindingPower : BindingPowerInfo { get prefix.BindingPower } }
    }

    public ExtensionType : ExtensionRuleType
    {
      [Memoize] get { DetectExtensionType(BaseRule, Rule) }
    }

    private static DetectExtensionType(baseRule : SymbolRef[ExtensibleRuleSymbol], seq : Rule.Sequence) : ExtensionRuleType
    {
      def isMarker(r : SymbolRef[_]) : bool
      {
        | SymbolRef.Some(s) => s is MarkerSymbol
        | SymbolRef.None    => false
      }

      def lookupPrefixCall(rules : list[Rule]) : option[Rule.Call] * list[Rule]
      {
        | Call(callee, _, _)           :: tail when isMarker(callee)   => lookupPrefixCall(tail)
        | Call(callee, _, _) as prefix :: tail when callee == baseRule => (Some(prefix), tail)
        | Sequence(seqRules)        :: tail =>
          match (lookupPrefixCall(seqRules))
          {
            | (None, []) => lookupPrefixCall(tail)
            | (None, _)  => (None(), rules)
            | (Some as prefix, seqTail) => (prefix, seqTail + tail)
          }

        | rules => (None(), rules)
      }

      match (lookupPrefixCall(seq.Rules))
      {
        | (None(), _)                => ExtensionRuleType.Prefix()
        | (Some(prefix), otherRules) => ExtensionRuleType.Postfix(prefix, Rule.Sequence(seq, otherRules))
      }
    }
  }

  [Record, ChemicalSymbol]
  public abstract class BaseExtensionRuleSymbol : ExtensionRuleSymbol
  {
    public override IdInGrammar         : int        { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }

  public sealed class ParsedExtensionRuleSymbol : BaseExtensionRuleSymbol
  {
    public this(node : G.RuleBodyMember.ExtensionRule, declarationSite : IRuleDeclarationSite)
    {
      assert(declarationSite.Node != null);

      def (loc, name) =
        if (node.NameOpt.HasValue)
        {
          def name = node.NameOpt.Value.Item1;
          (name.Location, name.GetText())
        }
        else
        {
          def name1 = node.RuleExpression.InferName();
          def name2 = if (IsIdentifier(name1)) ToPascalCase(name1) else "";

          when (name2 == "")
            declarationSite.Node.Project.Error(node, "Can't infer name for this rule.");
          (Location(node.Location.Source, node.Pipe.EndPos), name2);
        };

      base(loc, name);
      _node = node;
      DeclarationSite = declarationSite;
    }

    private _node                    : G.RuleBodyMember.ExtensionRule;
    private mutable _options         : RuleDefinitionOptions;

    public override DeclarationSite  : IRuleDeclarationSite           { get; }
    public override BaseRule         : ExtensibleRuleRef              { get { _node.BaseRuleRef } }
    public override Options          : RuleDefinitionOptions
    {
      get
      {
        when (_options == null)
        {
          def defaults = if (BaseRule is SymbolRef.Some(symbol)) symbol.Options.InheritedCopy() else RuleDefinitionOptions.Empty;
          _options = _node.RuleAttributes.Options(defaults)
        }
        _options
      }
    }
    public override SyntaxMappings   : list[SyntaxMappingSymbol]      { get { _syntaxMappings } }
    public override Rule             : Rule.Sequence                  { get { _node.TypedRule } }
    public override Parameters       : list[RuleParameterSymbol]      { get { if (BaseRule is SymbolRef.Some(s)) s.Parameters else [] } }
    public override LastLocation     : option[Location]
    {
      [Memoize]  get
      {
        if (_node.RuleBodyOpt.HasValue)
          Some(_node.RuleBodyOpt.Value.GetLastLocation())
        else
          Some(Utils.MakeLastLocation(_node))
      }
    }

    internal SetOptions(newOptions : RuleDefinitionOptions) : void
    {
      assert(newOptions != null);
      _options = newOptions;
    }

    private mutable _syntaxMappings : list[SyntaxMappingSymbol] = [];

    internal override AddSyntaxMapping(symbol : SyntaxMappingSymbol) : void
    {
      _syntaxMappings ::= symbol;
    }
  }
}
