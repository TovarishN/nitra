using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  public abstract class RuleDefSymbol : RuleSymbol
  {
    public abstract Type                : RuleType                  {           get; }
    public abstract Options             : RuleDefinitionOptions     {           get; }
    public abstract IdInGrammar         : int                       {           get; }
    public virtual  LastLocation        : option[Location]          {           get { None() } }
    public abstract IsToken             : bool                      {           get; }
    public abstract Parameters          : list[RuleParameterSymbol] {           get; }
    
    public          RuleMethods         : list[RuleMethodSymbol]    { [Memoize] get { Node.GetChildren.[RuleMethod.RuleMethodSymbol]().NToList() } }

    public GetDefaultRuleDefinitionOptions() : RuleDefinitionOptions
    {
      def defaults = DeclarationSite.GetDefaultRuleDefinitionOptions();
      if (defaults.IsExplicitSpaces != Options.IsExplicitSpaces)
        defaults.SetExplicitSpaces(null, Options.IsExplicitSpaces)
      else
        defaults
    }
  }
}
