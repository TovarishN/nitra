using Nemerle.Collections;
using Nitra.Runtime;
using Nitra.Model;
using Nitra.Typing.RuleMethod;

using Nemerle;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ExtensibleRuleSymbol : SyntaxRuleSymbol, IRuleDeclarationSite, IPrecedenceSymbolOwner
  {
    public sealed override Type          : RuleType                        { [Memoize] get { RuleType.Ref(this, this.Parameters.Map(x => x)) } }
    public sealed override Rule          : Rule.Sequence                   { get { assert3(false) } }
    public        override Description   : string                          { get "extensible rule" }
  }

  [Record, ChemicalSymbol]
  public abstract class BaseExtensibleRuleSymbol : ExtensibleRuleSymbol
  {
    public override IdInGrammar         : int  { [Memoize] get { DeclaringModule.GetNewRuleId() } }
  }

  public sealed class ParsedExtensibleRuleSymbol : BaseExtensibleRuleSymbol
  {
    public this(node : G.ExtensibleRule, declarationSite : IRuleDeclarationSite, parameters : list[RuleParameterSymbol] = null)
    {
      base(node.Name);
      _node = node;
      DeclarationSite = declarationSite;
      Parameters      = parameters ?? [];
    }

    private _node                    : G.ExtensibleRule;

    public override DeclarationSite : IRuleDeclarationSite            { get; }
    public override Options         : RuleDefinitionOptions           { [Memoize] get { _node.RuleAttributes.Options(DeclarationSite.GetDefaultRuleDefinitionOptions()) } }
    public override LastLocation    : option[Location]                {           get { Some(_node.RuleBody.GetLastLocation()) } }
    public override SyntaxMappings  : list[SyntaxMappingSymbol]       {           get { _syntaxMappings } }
    public override Parameters      : list[RuleParameterSymbol]       {           get; }

    private mutable _syntaxMappings : list[SyntaxMappingSymbol] = [];

    internal override AddSyntaxMapping(symbol : SyntaxMappingSymbol) : void
    {
      _syntaxMappings ::= symbol;
    }
  }

  public sealed class ParsedExtensibleTokenRuleSymbol : BaseExtensibleRuleSymbol
  {
    public this(node : G.ExtensibleRule, declarationSite : IRuleDeclarationSite, parameters : list[RuleParameterSymbol] = null)
    {
      base(node.Name);
      _node = node;
      DeclarationSite = declarationSite;
      Parameters      = parameters ?? [];
    }

    private _node                        : G.ExtensibleRule;

    public override DeclarationSite     : IRuleDeclarationSite            {           get; }
    public override Options             : RuleDefinitionOptions           { [Memoize] get { _node.RuleAttributes.Options(RuleDefinitionOptions.CreateTokenRule()) } }
    public override LastLocation        : option[Location]                {           get { Some(_node.RuleBody.GetLastLocation()) } }
    public override SyntaxMappings      : list[SyntaxMappingSymbol]       {           get { _syntaxMappings } }
    public override Parameters          : list[RuleParameterSymbol]       {           get; }

    private mutable _syntaxMappings : list[SyntaxMappingSymbol] = [];

    internal override AddSyntaxMapping(symbol : SyntaxMappingSymbol) : void
    {
      _syntaxMappings ::= symbol;
    }
  }
}
