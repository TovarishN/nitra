using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public enum RuleKind
  {
    | Regex  = 0
    | Token  = 1
    | Syntax = 2
  }
  
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class RuleParameterSymbol : RuleSymbol
  {
    public abstract Kind : RuleKind { get; }

    public override Description : string
    {
      get
      {
        match (Kind)
        {
          | Regex  => "Regexe rule parameter"
          | Syntax => "Syntax rule parameter"
          | Token  => "Token rule parameter"
        }
      }
    }
  }

  public sealed class ParsedRuleParameterSymbol : RuleParameterSymbol
  {
    _node : G.RuleParameter;

    public this(node : G.RuleParameter)
    {
      base(node.Name.Location);
      _node = node;
    }

    public override Kind : RuleKind
    {
      get
      {
        match (_node.GetText(_node.Kind))
        {
          | "regex"  => RuleKind.Regex
          | "syntax" => RuleKind.Syntax
          | "token"  => RuleKind.Token
          | _        => RuleKind.Regex
        }
      }
    }
    public override DeclarationSite : IRuleDeclarationSite {           get; }
  }
}
