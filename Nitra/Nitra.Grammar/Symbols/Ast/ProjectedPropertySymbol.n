using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class ProjectedPropertySymbol : PropertySymbol
  {
    public override Description    : string                         { get "projected property" }
    public abstract AstType        : AstType                        { get; }
    public abstract ProjectionType : option[PropertyProjectionType] { get; }
  }

  public sealed class ParsedProjectedPropertySymbol : ProjectedPropertySymbol
  {
    private _node : G.AstMember.Decompose.Nested.ProjectedProperty;

    public this(node : G.AstMember.Decompose.Nested.ProjectedProperty, propertyContainer : PropertyContainerSymbol)
    {
      base(node.Name, node.Name.Value());
      _node             = node;
      PropertyContainer = propertyContainer;
      OverrideProperty  = SymbolRef.None(_node.Name.Location, false);
    }

    public override PropertyContainer : PropertyContainerSymbol        { get; }
    public override OverrideProperty  : SymbolRef[PropertySymbol]      { get; }
    public override Type              : NType                          { get { _node.Type } }
    public override AstType           : AstType                        { get { _node.AstType } }
    public override ProjectionType    : option[PropertyProjectionType] { get { _node.ProjectionType } }
  }
}
