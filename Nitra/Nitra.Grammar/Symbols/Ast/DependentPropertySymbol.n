using Nitra.Model;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class DependentPropertySymbol : PropertySymbol
  {
    public abstract Direction      : DependentPropertyDirection         { get; }
    public abstract LinkedProperty : SymbolRef[DependentPropertySymbol] { get; }
    public abstract Stage          : int                                { get; }
    public override Description    : string
    {
      get { match (Direction) { In  => "input property" | Out => "output property" } }
    }
  }

  public sealed class ParsedDependentPropertySymbol : DependentPropertySymbol
  {
    private         _node           : G.DependentProperty;
    private mutable _linkedProperty : SymbolRef[DependentPropertySymbol];

    public this(node : G.DependentProperty, propertyContainer : PropertyContainerSymbol, direction : DependentPropertyDirection, isInOut : bool)
    {
      def makeName(text)
      {
        if (isInOut)
          text + match (direction) { In  => "In" | Out => "Out" }
        else
          text
      }

      base(node.Name, makeName(node.Name.Value()));
      _node             = node;
      PropertyContainer = propertyContainer;
      Direction         = direction;
      OverrideProperty  = SymbolRef.None(_node.Name.Location, false);
      unless (isInOut)
        _linkedProperty = SymbolRef.None(_node.Name.Location, false);
    }

    public override PropertyContainer : PropertyContainerSymbol            { get; }
    public override Direction         : DependentPropertyDirection         { get; }
    public override OverrideProperty  : SymbolRef[PropertySymbol]          { get; }
    public override Type              : NType                              { get { _node.Type } }
    public override Stage             : int                                { get { _node.Stage() } }
    public override LinkedProperty    : SymbolRef[DependentPropertySymbol]
    {
      get
      {
        when (_linkedProperty : object == null)
          _linkedProperty = SymbolRef.Some(_node.Name.Location, true, match (Direction) { In => _node.Symbol2 | Out => _node.Symbol1 });
        _linkedProperty
      }
    }
  }
}
