using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SimpleAstSymbol : AstSymbol, INamespaceMember
  {
    public override Description : string               { get { if (IsDeclaration) "declaration" else "ast" } }
    public override IsAbstract  : bool                 { get { false } }
    public abstract DefinedIn   : SymbolRef[AstSymbol] { get; }
  }

  public sealed class ParsedSimpleAstSymbol : SimpleAstSymbol, IDependentPropertyAssignmentContainer
  {
    private         _node                     : G.NamespaceMember.Ast;
    private         _assignments              : SCG.List[DependentPropertyAssignment];
    private mutable _initializedOutProperties : list[DependentPropertySymbol];

    public this(node : G.NamespaceMember.Ast, isDeclaration : bool, cardinality : AstCardinality)
    {
      base(node.Name, node.Name.Value());
      _node                     = node;
      _assignments              = SCG.List();
      _initializedOutProperties = [];
      DefinedIn                 = SymbolRef.None(this.FirstLocation, true);
      IsDeclaration             = isDeclaration;
      Cardinality               = cardinality;
    }

    private mutable _symbol : SymbolRef[SymbolSymbol];

    public override DefinedIn                : SymbolRef[AstSymbol]          { get; }
    public override Symbol                   : SymbolRef[SymbolSymbol]       { get { assert(_symbol : object != null); _symbol } }
    public override IsDeclaration            : bool                          { get; }
    public override Cardinality              : AstCardinality                { get; }
    public override BaseAsts                 : list[AstSymbol]               { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentPropertySymbol] { get { _initializedOutProperties } }
    public override HasEvaluations           : bool                          { get { _assignments.Count > 0 } }

    public AddAssignment(assignment : DependentPropertyAssignment) : void { AddAssignmentImpl(assignment, _assignments, ref _initializedOutProperties); }
    public GetAssignments() : Seq[DependentPropertyAssignment] { _assignments }

    protected override CreateSymbolSymbol() : SymbolRef[SymbolSymbol]
    {
      assert(_symbol : object == null);

      _symbol =
        CreateSymbolSymbolImpl(fun (baseSymbols)
        {
          def symbolSymbol = ParsedSimpleSymbolSymbol(this, baseSymbols);
          _ = Node.Parent.AddAndReport.[SymbolSymbol](symbolSymbol, FirstLocation);
          symbolSymbol
        });
      _node.Body.CollectSymbolMembers(this, _symbol);
      _symbol
    }
  }

  public sealed class ParsedChildAstSymbol : SimpleAstSymbol, IDependentPropertyAssignmentContainer
  {
    private         _node                     : G.AstMember.ChildAst;
    private         _assignments              : SCG.List[DependentPropertyAssignment];
    private mutable _initializedOutProperties : list[DependentPropertySymbol];

    public this(node : G.AstMember.ChildAst, owner : AstSymbol, cardinality : AstCardinality)
    {
      base(node.Name, node.Name.Value());
      _node                     = node;
      _assignments              = SCG.List();
      _initializedOutProperties = [];
      Owner                     = owner;
      DefinedIn                 = SymbolRef.Some(FirstLocation, true, owner);
      IsDeclaration             = owner.IsDeclaration;
      Cardinality               = cardinality;
    }

    private mutable _symbol : SymbolRef[SymbolSymbol];

    public          Owner                    : AstSymbol                     { get; }
    public override DefinedIn                : SymbolRef[AstSymbol]          { get; }
    public override Symbol                   : SymbolRef[SymbolSymbol]       { get { assert(_symbol : object != null); _symbol } }
    public override IsDeclaration            : bool                          { get; }
    public override Cardinality              : AstCardinality                { get; }
    public override BaseAsts                 : list[AstSymbol]               { get { _node.BaseAsts } }
    public override InitializedOutProperties : list[DependentPropertySymbol] { get { _initializedOutProperties } }
    public override HasEvaluations           : bool                          { get { _assignments.Count > 0 } }

    public AddAssignment(assignment : DependentPropertyAssignment) : void { AddAssignmentImpl(assignment, _assignments, ref _initializedOutProperties); }
    public GetAssignments() : Seq[DependentPropertyAssignment] { _assignments }

    protected override CreateSymbolSymbol() : SymbolRef[SymbolSymbol]
    {
      assert(_symbol : object == null);

      _symbol =
        CreateSymbolSymbolImpl(fun (baseSymbols)
        {
          def symbolSymbol = ParsedSimpleSymbolSymbol(this, baseSymbols);
          _ = Owner.Node.Parent.AddAndReport.[SymbolSymbol](symbolSymbol, FirstLocation);
          symbolSymbol
        });
      when (_node.Body.HasValue)
        _node.Body.Value.CollectSymbolMembers(this, _symbol);
      _symbol
    }
  }
}
