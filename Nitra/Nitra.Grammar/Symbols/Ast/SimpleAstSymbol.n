using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  [Record, ExportableSymbol, ChemicalSymbol]
  public abstract class SimpleAstSymbol : AstSymbol, INamespaceMember
  {
    public override Description : string               { get { if (IsDeclaration) "declaration" else "ast" } }
    public override IsAbstract  : bool                 { get { false } }
    public abstract DefinedIn   : SymbolRef[AstSymbol] { get; }
    public override PropertyDependency : PropertyDependencyData { get { PropertyDependencyData.Empty } }
  }

  public sealed class ParsedSimpleAstSymbol : SimpleAstSymbol, IDependentStatementContainer
  {
    private         _parentsLazy              : Func[list[AstSymbol]];
    private         _body                     : NitraSyntaxParseTree.AstBody;
    private         _statements               : SCG.List[DependentStatement];
    private mutable _initializedOutProperties : list[DependentPropertySymbol];

    public this(name : NitraSyntaxParseTree.Name, parentsLazy : Func[list[AstSymbol]], body : NitraSyntaxParseTree.AstBody, isDeclaration : bool, cardinality : AstCardinality, ignoreCase : bool)
    {
      base(name, name.Value());
      _parentsLazy              = parentsLazy;
      _body                     = body;
      _statements               = SCG.List();
      _initializedOutProperties = [];
      DefinedIn                 = SymbolRef.None(this.FirstLocation, true);
      IsDeclaration             = isDeclaration;
      Cardinality               = cardinality;
      IgnoreCase                = ignoreCase;
    }
    
    private mutable _symbol : SymbolRef[SymbolSymbol];

    public override DefinedIn                : SymbolRef[AstSymbol]          { get; }
    public override Symbol                   : SymbolRef[SymbolSymbol]       { get { assert(_symbol : object != null); _symbol } }
    public override IsDeclaration            : bool                          { get; }
    public override Cardinality              : AstCardinality                { get; }
    public override IgnoreCase               : bool                          { get; }
    public override Parents                  : list[AstSymbol]               { get { _parentsLazy() } }
    public override InitializedOutProperties : list[DependentPropertySymbol] { get { _initializedOutProperties } }

    public AddStatement(statement : DependentStatement) : void { AddStatementImpl(statement, _statements, ref _initializedOutProperties); }
    public GetStatements() : Seq[DependentStatement] { _statements }

    protected override CreateSymbolSymbol() : SymbolRef[SymbolSymbol]
    {
      assert(_symbol : object == null);

      _symbol =
        CreateSymbolSymbolImpl(fun (baseSymbols)
        {
          def symbolSymbol = ParsedSimpleSymbolSymbol(this, baseSymbols);
          _ = Node.Parent.AddAndReport.[SymbolSymbol](symbolSymbol, FirstLocation);
          symbolSymbol
        });
      _body.CollectSymbolMembers(this, _symbol);
      _symbol
    }
  }

  public sealed class ParsedChildAstSymbol : SimpleAstSymbol, IDependentStatementContainer
  {
    private         _parentsLazy              : Func[list[AstSymbol]];
    private         _bodyOpt                  : OptionParseTree[NitraSyntaxParseTree.AstBody];
    private         _statements               : SCG.List[DependentStatement];
    private mutable _initializedOutProperties : list[DependentPropertySymbol];

    public this(name : NitraSyntaxParseTree.Name, parentsLazy : Func[list[AstSymbol]], bodyOpt : OptionParseTree[NitraSyntaxParseTree.AstBody], owner : AstSymbol, cardinality : AstCardinality, ignoreCase : bool)
    {
      base(name, name.Value());
      _parentsLazy              = parentsLazy;
      _bodyOpt                  = bodyOpt;
      _statements               = SCG.List();
      _initializedOutProperties = [];
      Owner                     = owner;
      DefinedIn                 = SymbolRef.Some(FirstLocation, true, owner);
      IsDeclaration             = owner.IsDeclaration;
      Cardinality               = cardinality;
      IgnoreCase                = ignoreCase;
    }

    private mutable _symbol : SymbolRef[SymbolSymbol];

    public          Owner                    : AstSymbol                     { get; }
    public override DefinedIn                : SymbolRef[AstSymbol]          { get; }
    public override Symbol                   : SymbolRef[SymbolSymbol]       { get { assert(_symbol : object != null); _symbol } }
    public override IsDeclaration            : bool                          { get; }
    public override Cardinality              : AstCardinality                { get; }
    public override IgnoreCase               : bool                          { get; }
    public override Parents                  : list[AstSymbol]               { get { _parentsLazy() } }
    public override InitializedOutProperties : list[DependentPropertySymbol] { get { _initializedOutProperties } }

    public AddStatement(statement : DependentStatement) : void { AddStatementImpl(statement, _statements, ref _initializedOutProperties); }
    public GetStatements() : Seq[DependentStatement] { _statements }

    protected override CreateSymbolSymbol() : SymbolRef[SymbolSymbol]
    {
      assert(_symbol : object == null);

      _symbol =
        CreateSymbolSymbolImpl(fun (baseSymbols)
        {
          def symbolSymbol = ParsedSimpleSymbolSymbol(this, baseSymbols);
          _ = Owner.Node.AddAndReport.[SymbolSymbol](symbolSymbol, FirstLocation);
          symbolSymbol
        });
      when (_bodyOpt.HasValue)
        _bodyOpt.Value.CollectSymbolMembers(this, _symbol);
      _symbol
    }
  }
}
