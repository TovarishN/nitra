using Nitra.Model;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;

namespace Nitra.Typing
{
  [Record]
  public variant SyntaxMappingExpr : Located
  {
    | Error
    | Code          { Expr   : PExpr }
    | ParameterRef  { Ref    : SyntaxMappingParameterSymbol }
    | VariableRef   { Ref    : AstVariableSymbol; }
    | PropertyRef   { Expr   : SyntaxMappingExpr; Symbol : StructuralPropertySymbol; }
    | Match         { Path   : ParseTreePath; Cases : list[SyntaxMappingCase]; ReturnType : AstType; }
    | AstCtor       { Symbol : AstSymbol; Fields : list[SyntaxMappingField]  }
    | ListCtor      { Symbol : AstSymbol; Items  : list[SyntaxMappingExpr]   }
    | OptionCtor    { Symbol : AstSymbol; Value  : option[SyntaxMappingExpr] }
    | Call          { Path : ParseTreePath; Arguments : list[SyntaxMappingExpr]; ReturnType : AstType; }
    | ConvertList   { Path : ParseTreePath; Arguments : list[SyntaxMappingExpr]; Symbol : AstSymbol; ItemPath  : ParseTreePath }
    | ConvertOption { Path : ParseTreePath; Arguments : list[SyntaxMappingExpr]; Symbol : AstSymbol; ValuePath : ParseTreePath }
    | ConcatLists   { Path : ParseTreePath; Arguments : list[SyntaxMappingExpr]; Symbol : AstSymbol; ItemPath  : ParseTreePath }
    | ConcatOptions { Path : ParseTreePath; Arguments : list[SyntaxMappingExpr]; Symbol : AstSymbol; ItemPath  : ParseTreePath }
    | Fold          { ItemVariable : ParseTreePatternVariableSymbol; ListPath : ParseTreePath; AccumulatorVariable : AstVariableSymbol; InitExpr : SyntaxMappingExpr; EachExpr : SyntaxMappingExpr; ReturnType : AstType; }
    | DefineVariable { Symbol : AstVariableSymbol; Body : SyntaxMappingExpr }
    | ParsedValueOrSpan { Path : ParseTreePath; TargetType : NType }

    public override Location : Location { get; }

    public this([Nemerle.Internal.MappedMemberAttribute("Location")] loc : ILocated)
    {
      this(loc.Location)
    }
  }
}
