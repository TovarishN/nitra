using DotNet;

using Nitra.AstUtils;
using Nitra.Declarations;

using System.Collections.Generic;

using R  = Nitra.Ast.RuleExpressions;
using RX = Nitra.Ast.RegexExpressions;

namespace Nitra.Ast
{
  abstract declaration Rule : RuleType, Container, SyntaxElementContainer
  {
    symbol
    {
      SpanClass = NitraLang.RuleSpanClass;
      Kind      = "syntax";
      Scope     = MemberTable;
    }

    Members.LiteralsIn           = LiteralsIn;
    Members.ContainingTable      = Symbol.MemberTable;
    Members.Scope                = Scope.HideWith(Symbol.MemberTable);
    Members.Parent               = Symbol;

    Members    : RuleBodyMember*;
    Attributes : RuleAttribute*;

    //decompose Members
    //{
    //  ExtensionRules : ExtensionRule*;
    //  OtherMembers   : RuleBodyMember*;
    //}
  }

  abstract declaration RegexRule : RuleCharsType, Rule
  {
    symbol
    {
      Kind = "regex";
      SpanClass = NitraLang.RegexRuleSpanClass;
    }

    Expression.Scope = Members.Scope;

    Expression : RX.Expression;
  }

  abstract declaration SyntaxRule : Rule
  {
    symbol
    {
      Kind      = "syntax";
      SpanClass = NitraLang.RuleSpanClass;
      Scope     = MemberTable.UnionWith(FieldsTable);

      in Fields : IList[RuleFieldSymbol];
      table FieldsTable;
    }

    Fields.Literals        = LiteralsIn;
    Fields.Scope           = Members.Scope;
    Fields.ContainingTable = Symbol.FieldsTable;
    Fields.NameGenerator   = RuleFieldNameGenerator.Create(Fields.DesiredName);
    Symbol.Fields          = Fields.Symbol;

    Fields : RuleField*;
  }

  abstract declaration SimpleRuleBase : SyntaxRule { }
  abstract declaration SimpleRule : SimpleRuleBase { }
  abstract declaration VoidRule   : SimpleRuleBase, RuleVoidType
  {
    symbol
    {
      Kind      = "void rule";
      SpanClass = NitraLang.RuleSpanClass;
    }
  }
  abstract declaration TokenRule  : SimpleRuleBase
  {
    symbol
    {
      Kind      = "token";
      SpanClass = NitraLang.RuleSpanClass;
    }
  }

  abstract declaration ExtensionContainer
  {
    symbol
    {
      table ExtensionsContainingTable;
    }
  }

  abstract declaration ExtensibleRule : SyntaxRule, ExtensionContainer
  {
    symbol
    {
      Scope = MemberTable.UnionWith(FieldsTable).HideWith(ExtensionsContainingTable);
    }
  }
}
