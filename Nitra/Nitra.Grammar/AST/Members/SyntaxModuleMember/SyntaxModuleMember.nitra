using DotNet;
using Nemerle.Collections;

using Nitra.AstUtils;
using Nitra.Declarations;

using System.Collections.Generic;

using R  = Nitra.Ast.RuleExpressions;

namespace Nitra.Ast
{
  abstract ast SyntaxElementContainer : BindableAst, ScopedAst
  {
    inout Literals         : Map[string, string];
    inout ExportedLiterals : Map[string, string];
    inout Scope            : Scope;

    Scope = ScopeIn;
  }

  abstract ast SyntaxModuleMember : SyntaxElementContainer
  {
    in    Parent   : SyntaxModuleSymbol;

    ContainingTable = Parent.MemberTable;
  }

  abstract declaration SyntaxModuleMemberDeclaration : SyntaxModuleMember
  {
    symbol
    {
      in Parent : SyntaxModuleSymbol;
      FullName = this.Parent.FullName + "." + this.Name;
    }

    Symbol.Parent   = Parent;
  }

  abstract declaration ExtendRule : ExtensionContainer, Container, BindableAst
  {
    symbol
    {
      SpanClass = NitraLang.RuleSpanClass;
      Kind      = "extend syntax";
      Scope     = MemberTable;

      in ExtendedRule : ExtensibleRuleSymbol;
    }

    in ExtendedRuleRef : Ref[ExtensibleRuleSymbol];

    BaseName.Scope          = Scope;
    Members.ContainingTable = Symbol.MemberTable;
    Members.Scope           = Scope;
    ExtendedRuleRef         = BaseName.Ref.Resolve();
    Symbol.ExtendedRule     = ExtendedRuleRef.Symbol;

    BaseName : QualifiedReference;
    Members  : RuleBodyMember*;
  }

  declaration TopExtendRule : ExtendRule, SyntaxModuleMemberDeclaration
  {
    Symbol             = Parent.ExtendsTable.Define(this, context);
    Members.LiteralsIn = LiteralsIn;
    Members.Parent     = this.Symbol;
  }

  abstract declaration RuleAlias : Alias, BindableAst
  {
    symbol
    {
      SpanClass = NitraLang.AliasSpanClass;
      Kind      = "rule alias";
    }

    Expression.Scope    = Scope;
    Symbol.Replacement  = Ref.CreateBind(Expression.Location, Expression.Type);

    Expression : R.Expression;
  }

  declaration TopRuleAlias : RuleAlias, SyntaxModuleMemberDeclaration
  {
    ContainingTable = TableScope("alias");
    ScopeOut        = ScopeIn.HideWith(ContainingTable);
  }

  ast TokenLiteral : SyntaxModuleMember
  {
    LiteralsOut         = UpdateLiterals(LiteralsIn, Literals, Name.ValueOrDefault);
    ExportedLiteralsOut = UpdateLiterals(ExportedLiteralsIn, Literals, Name.ValueOrDefault);

    Name : string;
    Literals : StringLiteral*;
  }

  ast KeywordRegex : SyntaxModuleMember
  {
  }
}
