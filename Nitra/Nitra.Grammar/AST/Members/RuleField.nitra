using DotNet;

using Nemerle.Collections;

using Nitra.AstUtils;
using Nitra.Declarations;

using System.Collections.Generic;

using R  = Nitra.Ast.RuleExpressions;
using RX = Nitra.Ast.RegexExpressions;

namespace Nitra.Ast
{
  declaration RuleField : TypedDeclaration, BindableAst
  {
    symbol
    {
      in DeclaredIn : SyntaxRuleSymbol;

      Kind          = "rule field";
      SpanClass     = DotNetLang.FieldSpanClass;
      DeclaredInOpt = VSome(DeclaredIn);
      FullName      = AstUtils.MakeFullName(DeclaredIn.FullName, Name);
      MakeHint      = AstUtils.RuleFieldMakeHint(symbolCache, this);
    }

    in  NameGenerator : RuleFieldNameGenerator;
    in  Literals      : Map[string, string];
    in  DeclaredIn    : SyntaxRuleSymbol;
    out DesiredName   : ParsedValue[string * bool] = Expression.FieldName;

    Symbol.DeclaredIn   = DeclaredIn;
    Symbol              = ContainingTable.Define(this, context, NameGenerator.GetName(Location, DesiredName));
    Symbol.Type         = Expression.Type;
    Expression.Scope    = Scope;
    Expression.Literals = Literals;

    Expression : R.Expression;
  }
}
