using DotNet;

using Nitra.Typing;
using Nitra.AstUtils;
using Nitra.Declarations;

namespace Nitra.Ast
{
  using AM = Nitra.Ast.AstMembers;

  abstract declaration Decl : Nitra.Ast.Ast
  {
    symbol
    {
      in AssociatedSymbol : SymbolDeclarationSymbol;
    }

    Symbol.IsDeclaration                   = true;
    AssociatedSymbol.AssociatedDeclaration = Symbol;
    AssociatedSymbol.Scope                 = Scope;
    AssociatedSymbol.ContainingTable       = ContainingTable;

    AssociatedSymbol : SymbolDeclaration;
  }

  abstract declaration SymbolDeclaration : SupportsInheritanceType
  {
    sealed symbol
    {
      in AssociatedDeclaration : DeclSymbol;
      in DeclaredIn : DeclarationSymbol;

      FullName = AstUtils.MakeFullName(DeclaredInOpt, this.Name);
      MakeHint = AstUtils.SupportsInheritanceTypeMakeHint(symbolCache, this);
      DeclaredInOpt  = VSome(DeclaredIn);
    }

    in AssociatedDeclaration : DeclSymbol;

    Symbol.AssociatedDeclaration.AssociatedSymbol = Symbol;
    Symbol.BaseTypeSet |= AstUtils.SymbolDeclarationBaseTypeSet(Symbol.AssociatedDeclaration.BaseTypeSet.ParentTypes);
    Symbol.BaseTypeSet |= AstUtils.GetImplicitBaseTypeForDeclarationSymbol(context, Symbol, AssociatedDeclaration.Scope, Symbol.FullName);

    Symbol.AssociatedDeclaration = AssociatedDeclaration;
    //Symbol.DeclaredInOpt = AssociatedDeclaration.DeclaredInOpt;
  }

  abstract declaration Ast : BindableAst, AstType, SupportsInheritanceType
  {
    symbol
    {
      Kind      = (if (IsAbstract) "abstract " else null) + if (IsDeclaration) "declaration" else "ast";
      SpanClass = NitraLang.AstSpanClass;
      Scope     = BaseTypeSet.ParentFullScope.HideWith(MemberTable);

      in IsDeclaration : bool;
      in IsAbstract    : bool;
      in Cardinality   : AstCardinality;
      in IgnoreCase    : bool;
    }

    Symbol.IsDeclaration = false;
    Symbol.BaseTypeSet |= AstUtils.FilterResolvedAstType(TypeBase.Ref, Symbol);
    Symbol.BaseTypeSet |= AstUtils.GetImplicitBaseTypeForDeclaration(context, Symbol, TypeBase.Ref);
    TypeBase.Scope = Scope;
    Members.Scope  = Scope.HideWith(Symbol.Scope);

    Modifiers.IsAbstractIn = false;
    Symbol.IsAbstract = Modifiers.IsAbstractOut;

    Modifiers.CardinalityIn = AstCardinality.Single;
    Symbol.Cardinality = Modifiers.CardinalityOut;

    Modifiers.IsIgnoreCaseIn = false;
    Symbol.IgnoreCase = Modifiers.IsIgnoreCaseOut;

    Modifiers : AstModifier*;
    Members : AM.AstMember*;
  }

  abstract ast AstModifier
  {
    inout IsAbstract : bool;
    inout Cardinality : AstCardinality;
    inout IsIgnoreCase : bool;

    // TODO: validation of modifiers

    | Abstract { IsAbstractOut = true; }
    | Optional { CardinalityOut = AstCardinality.Optional; }
    | Multiple { CardinalityOut = AstCardinality.Multiple; }
    | IgnoreCase { IsIgnoreCaseOut = true; }
  }
}
