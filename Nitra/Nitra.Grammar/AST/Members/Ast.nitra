using DotNet;

using Nitra.Typing;
using Nitra.AstUtils;
using Nitra.Declarations;

namespace Nitra.Ast
{
  using AM = Nitra.Ast.AstMembers;

  abstract declaration Ast : BindableAst, AstType, SupportsInheritanceType
  {
    symbol
    {
      Kind      = (if (IsAbstract) "abstract " else null) + if (IsDeclaration) "declaration" else "ast";
      SpanClass = NitraLang.AstSpanClass;

      in IsDeclaration : bool;
      in IsAbstract    : bool;
      in Cardinality   : AstCardinality;
    }

    Symbol.Scope = Symbol.BaseTypeSet.ParentFullScope.HideWith(Symbol.MemberTable);
    Symbol.BaseTypeSet |= AstUtils.FilterResolvedAstType(TypeBase.Ref, Symbol);
    Symbol.BaseTypeSet |= AstUtils.GetImplicitBaseTypeForDeclaration(context, Symbol, TypeBase.Ref);
    TypeBase.Scope = Scope;
    Members.Scope  = Scope.HideWith(Symbol.Scope);

    Symbol.IsDeclaration = Header.IsDeclaration.Value;

    Header.Modifiers.IsAbstractIn = false;
    Symbol.IsAbstract = Header.Modifiers.IsAbstractOut;

    Header.Modifiers.CardinalityIn = AstCardinality.Single;
    Symbol.Cardinality = Header.Modifiers.CardinalityOut;

    Header  : AstHeader;
    Members : AM.AstMember*;
  }

  abstract ast AstModifier
  {
    inout IsAbstract : bool;
    inout Cardinality : AstCardinality;

    // TODO: validation of modifiers

    | Abstract { IsAbstractOut = true; }
    | Optional { CardinalityOut = AstCardinality.Optional; }
    | Multiple { CardinalityOut = AstCardinality.Multiple; }
  }

  ast AstHeader
  {
    IsDeclaration : bool;
    Modifiers     : AstModifier*;
  }
}
