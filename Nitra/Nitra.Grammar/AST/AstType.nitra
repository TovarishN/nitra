using DotNet;

using Nitra;
using Nitra.Declarations;

using Nemerle.Collections;
using System.Collections.Generic;

namespace Nitra.Ast
{
  abstract declaration AstType : Type
  {
    symbol
    {
      Kind = "ast type";
    }
  }

  declaration ListAstType : AstType
  {
    symbol
    {
      in ElemType  : AstTypeSymbol;

      ToString = ElemType + "*";
      MakeHint = AstUtils.ListAstTypeMakeHint(this);
      Kind     = "ast list";

      DecomposeType =
        if (IsElemTypeEvaluated)
          VSome(TypeStructure(WellKnownSymbols.ListAstType, ElemType))
        else
          VNone();
    }
  }

  ast ListAstReference : QualifiedReference
  {
    Elem.Arity  = 0;
    Elem.Scope  = Scope;
    Ref         = AstUtils.CreateListAstType(this, Elem.Ref, context);

    Elem : QualifiedReference;
  }

  declaration OptionAstType : AstType
  {
    symbol
    {
      in ValueType : AstTypeSymbol;

      ToString = ValueType + "?";
      MakeHint = AstUtils.OptionAstTypeMakeHint(this);
      Kind     = "ast option";

      DecomposeType =
        if (IsValueTypeEvaluated)
          VSome(TypeStructure(WellKnownSymbols.OptionAstType, ValueType))
        else
          VNone();
    }
  }

  ast OptionAstReference : QualifiedReference
  {
    Value.Arity = 0;
    Value.Scope = Scope;
    Ref         = AstUtils.CreateOptionAstType(this, Value.Ref, context);

    Value : QualifiedReference;
  }

  declaration ValueAstType : AstType
  {
    symbol
    {
      in ValueType : TypeSymbol;

      ToString = "ValueAst[" + ValueType + "]";
      MakeHint = AstUtils.ValueAstTypeMakeHint(this);
      Kind     = "ast value";
    }
  }

  declaration FunctionType : Type
  {
    symbol
    {
      in Parameters : IList[TypeSymbol];
      in ReturnType : TypeSymbol;

      ToString = $"..$(Parameters; \" * \") -> $ReturnType";
      MakeHint = AstUtils.FunctionTypeMakeHint(symbolCache, this);

      DecomposeType =
        if (IsParametersEvaluated && IsReturnTypeEvaluated)
        {
          mutable typeArguments = LightList();
          typeArguments.Add(ReturnType);
          typeArguments.AddRange(Parameters);
          VSome(TypeStructure(Nitra.Ast.WellKnownSymbols.FunctionType, typeArguments))
        }
        else
          VNone();
    }
  }
}
