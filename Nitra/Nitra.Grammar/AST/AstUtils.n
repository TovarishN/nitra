using DotNet;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Ast;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Internal;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Nitra
{
  public module AstUtils
  {
    public static GetAstId : int = StringIndex.GetId("GetAst");

    public Wait[V, R](value : V, result : R) : R
    {
      _ = value;
      result
    }

    public UpdateLiterals(inMap : Map[string, string], literals : StringLiteral.IAstList, name : string) : Map[string, string]
    {
      when (string.IsNullOrEmpty(name))
        return inMap;

      def xs = literals.Select(x => x.Value.ValueOrDefault).Where(x => !string.IsNullOrEmpty(x)).Select(x => (x, name));
      inMap.ReplaceRange(xs)
    }

    public MakeName(loc : Location, value : string, userDefined : bool) : ParsedValue[string * bool]
    {
      def text  = loc.GetText().TrimEnd();
      def start = loc.Span.StartPos;
      ParsedValue(NSpan(start, start + text.Length), (value, userDefined))
    }

    public MakeName(loc : Location, parsedValue : ParsedValue[string * bool]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return parsedValue;

      def (value, userDefined) = parsedValue.Value;
      MakeName(loc, value, userDefined)
    }

    public MakeOptionalName(loc : Location, parsedValue : ParsedValue[string * bool]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return parsedValue;

      MakeName(loc, parsedValue.Value[0] + "Opt", parsedValue.Value[1])
    }

    public MakePlural(loc : Location, parsedValue : ParsedValue[string * bool]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return parsedValue;

      MakeName(loc, JetBrains.Util.NounUtil.GetPlural(parsedValue.Value[0]), parsedValue.Value[1])
    }

    public NMakeLiteralName(parsedValue : ParsedValue[string], literals : Map[string, string]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return ParsedValue(parsedValue.Span.StartPos);

      def value = parsedValue.ValueOrDefault;

      if (literals.Find(value) is Some(name))
        ParsedValue(parsedValue.Span, (name, true))
      else if (Utils.IsIdentifier(value))
        ParsedValue(parsedValue.Span, (Utils.ToPascalCase(value, "Kw"), false))
      else
        ParsedValue(parsedValue.Span, ("Literal", false))
    }

    public MakeCallFieldName(parsedValue : ParsedValue[int]) : ParsedValue[string * bool]
    {
      if (parsedValue.HasValue)
        ParsedValue(parsedValue.Span, (StringIndex.GetText(parsedValue.ValueOrDefault), false))
      else
        ParsedValue(parsedValue.Span.StartPos)
    }

    public TryGetLiterals(reference : Ref[DeclarationSymbol], literals : Map[string, string]) : Map[string, string]
    {
      when (reference.IsSymbolEvaluated)
      when (reference.Symbol is SyntaxModuleSymbol/*(IsLiteralsEvaluated = true)*/ as m)
        return literals.ReplaceRange(m.Literals);

      literals
    }

    public static Init[T](this context : DependentPropertyEvalContext, symbol : T) : T
      where T: DeclarationSymbol
    {
      symbol.EvalProperties(context);
      symbol
    }

    public CanBeTupleElem(x : RuleTypeSymbol) : bool
    {
      !(x is RuleVoidTypeSymbol)
    }

    public InitTuple(context : DependentPropertyEvalContext, arg1 : RuleTypeSymbol, restArgs : ImmutableArray[RuleTypeSymbol]) : RuleTypeSymbol
    {
      when (restArgs.Length == 0)
      {
        if (CanBeTupleElem(arg1))
          return arg1;
        else
          return WellKnownSymbols.VoidRuleType;
      }

      def args = List();

      when (CanBeTupleElem(arg1))
        args.Add(arg1);

      foreach (arg when CanBeTupleElem(arg) in restArgs)
        args.Add(arg);

      match (args.Count)
      {
        | 0 => WellKnownSymbols.VoidRuleType
        | 1 => args[0]
        | _ => CreateTupleRuleType(args, context)
      }
    }

    public InitTuple(context : DependentPropertyEvalContext, arg1 : RuleTypeSymbol, arg2 : RuleTypeSymbol) : RuleTypeSymbol
    {
      match (CanBeTupleElem(arg1), CanBeTupleElem(arg2))
      {
        | (false,  true) => arg2
        | (true,  false) => arg1
        | (false, false) => WellKnownSymbols.VoidRuleType
        | (true,   true) => CreateTupleRuleType(array[arg1, arg2], context)
      }
    }

    public CreateTupleRuleType(args : IList[RuleTypeSymbol], context : DependentPropertyEvalContext) : RuleTypeSymbol
    {
      def symbol = RuleTupleTypeSymbol();
      symbol.ElemTypes = args;
      symbol.EvalProperties(context);
      symbol
    }

    public InitList(context : DependentPropertyEvalContext, elemType : RuleTypeSymbol) : RuleTypeSymbol
    {
      unless (CanBeTupleElem(elemType))
        return WellKnownSymbols.VoidRuleType;

      def symbol = RuleListTypeSymbol();
      symbol.ElemType = elemType;
      context.Init(symbol)
    }

    public InitOption(context : DependentPropertyEvalContext, valueType : RuleTypeSymbol) : RuleTypeSymbol
    {
      unless (CanBeTupleElem(valueType))
        return WellKnownSymbols.VoidRuleType;

      def symbol = RuleOptionTypeSymbol();
      symbol.ValueType = valueType;
      context.Init(symbol)
    }

    public CreateRuleTypeVar(context : DependentPropertyEvalContext) : RuleTypeVarSymbol
    {
      def symbol = RuleTypeVarSymbol();
      symbol.EvalProperties(context);
      symbol
    }

    public CreateAstTypeVar(context : DependentPropertyEvalContext) : AstTypeVarSymbol
    {
      def symbol = AstTypeVarSymbol();
      symbol.EvalProperties(context);
      symbol
    }

    public CreateListAstType(loc : ILocated, item : Ref[DeclarationSymbol], context : DependentPropertyEvalContext) : Ref[DeclarationSymbol]
    {
      // TODO: handle unresolved Ref
      item.Resolve(fun (_)
      {
        | symbol is AstSymbol => VSome(CreateListAstType(loc, symbol, context))
        | _ => VNone()
      })
    }

    public CreateListAstType(loc : ILocated, elemType : AstTypeSymbol, context : DependentPropertyEvalContext) : ListAstTypeSymbol
    {
      def name       = Name(loc.Location, "#List");
      def decl       = ListAstType(loc.Location, name);
      def listSymbol = ListAstTypeSymbol();
      listSymbol.AddDeclaration(decl);
      name.Symbol    = listSymbol;
      listSymbol.ElemType = elemType;
      listSymbol.EvalProperties(context);
      listSymbol
    }

    public CreateOptionAstType(loc : ILocated, item : Ref[DeclarationSymbol], context : DependentPropertyEvalContext) : Ref[DeclarationSymbol]
    {
      // TODO: handle unresolved Ref
      item.Resolve(fun (_)
      {
        | symbol is AstSymbol => VSome(CreateOptionAstType(loc, symbol, context))
        | _ => VNone()
      })
    }

    public CreateOptionAstType(loc : ILocated, valueType : AstTypeSymbol, context : DependentPropertyEvalContext) : OptionAstTypeSymbol
    {
      def name         = Name(loc.Location, "#Option");
      def decl         = OptionAstType(loc.Location, name);
      def optionSymbol = OptionAstTypeSymbol();
      optionSymbol.AddDeclaration(decl);
      name.Symbol      = optionSymbol;
      optionSymbol.ValueType = valueType;
      optionSymbol.EvalProperties(context);
      optionSymbol
    }

    public CreateFunctionType(loc : ILocated, thisType : TypeSymbol, parameters : IList[TypeSymbol], returnType : TypeSymbol, context : DependentPropertyEvalContext) : FunctionTypeSymbol
    {
      def parametersWithThis = List();
      parametersWithThis.Add(thisType);
      parametersWithThis.AddRange(parameters);
      CreateFunctionType(loc, parametersWithThis, returnType, context)
    }

    public CreateFunctionType(loc : ILocated, parameters : IList[TypeSymbol], returnType : TypeSymbol, context : DependentPropertyEvalContext) : FunctionTypeSymbol
    {
      def name = Name(loc.Location, "#Func");
      def decl = FunctionType(loc.Location, name);
      def funcSymbol = FunctionTypeSymbol();
      funcSymbol.AddDeclaration(decl);
      name.Symbol = funcSymbol;
      funcSymbol.Parameters = parameters;
      funcSymbol.ReturnType = returnType;
      funcSymbol.EvalProperties(context);
      funcSymbol
    }

    public BindAstExtension(name : Reference, scope : Scope, defaultReturnType : AstTypeSymbol) : Ref[AstTypeSymbol]
    {
      def bindRes = scope.Bind(name);

      if (bindRes.IsEmpty)
        Ref.CreateBind(name.Location, BindResult.Single(defaultReturnType))
      else
        Ref.CreateBind(name.Location, bindRes)
    }

    public CreateRuleField(parseTree : NitraSyntaxParseTree.RuleExpression) : RuleField
    {
      def name = Name(parseTree.Location.FromStart(), "<none>");
      def expr = parseTree.GetAst();
      RuleField(parseTree.Location, name, expr)
    }

    public CreateRuleFieldList(parseTree : NitraSyntaxParseTree.RuleExpression) : RuleField.IAstList
    {
      RuleField.AstList(parseTree, AstUtils.CreateRuleField(parseTree));
    }

    public CreateName(loc : Location, desiredName : ParsedValue[string * bool]) : Name
    {
      Name(loc.WithSpan(desiredName.Span), desiredName.ValueOrDefault[0] ?? "")
    }

    public IsLooksLikeVariableName(text : string) : bool
    {
      text.Length > 0 && (text[0] == '_' || char.IsLower(text[0]))
    }

    public CreateThisDeclaration(parseTree : ParseTree) : ThisDeclaration
    {
      def loc = parseTree.Location.FromStart();
      ThisDeclaration(loc, Name(loc, "this"))
    }

    public CreateSymbolName(astName : Name) : Name
    {
      Name(astName.Location, astName.Text + "Symbol")
    }

    public CreateMapSyntaxName(parseTree : ParseTree) : Name
    {
      Name(parseTree.Location.FromStart(), GetAstId)
    }

    public CreateMapSyntaxRef(loc : Location, scope : Scope, argumentTypes : ImmutableArray[TypeSymbol]) : Ref[MapSyntaxSymbol]
    {
      def getAstIdRef = Reference(loc, GetAstId);
      def len = argumentTypes.Length;
      def r = getAstIdRef.Bind(scope);
      def isMatch(symbol : MapSyntaxSymbol) : bool
      {
        def parms = symbol.Parameters;
        when (parms.Count != len)
          return false;

        for (mutable i = 0; i < argumentTypes.Length; ++i)
        {
          def p = parms[i];
          def t = argumentTypes[i];
          unless (p.IsTypeEvaluated)
            return false;
          unless (AstTypeUnifier.Instance.TryRequire(t, p.Type))
            return false;
        }
        true
      }
      r.Resolve(isMatch)
    }

    public TypeParseTreePatternTuple(loc : IAst, expectedType : TypeSymbol, members : Nitra.Ast.ParseTreePattern.IAstList, context : DependentPropertyEvalContext) : TypeSymbol
    {
      if (expectedType is SyntaxRuleSymbol(IsFieldsEvaluated = true, Fields = fields) as returnType)
      {
        def nonVoidTypes = List();
        foreach (field when field.IsTypeEvaluated in fields)
        {
          when (field.Type is RuleTypeSymbol as t)
          unless (t is RuleVoidTypeSymbol)
            nonVoidTypes.Add(t);
        }
        TypeParseTreePatternCtor(loc, members, nonVoidTypes, returnType, context)
      }
      else
      {
        def args = array(members.Count);
        foreach (m in members with index)
        {
          def typeVar = CreateRuleTypeVar(context);
          args[index] = typeVar;
          m.ExpectedType = typeVar;
        }
        CreateTupleRuleType(args, context)
      }
    }

    public TypeParseTreePatternCtor(loc : IAst, members : Nitra.Ast.ParseTreePattern.IAstList, expectedMemberTypes : IList[TypeSymbol], returnType : TypeSymbol, context : DependentPropertyEvalContext) : TypeSymbol
    {
      if (members.Count == expectedMemberTypes.Count)
      {
        foreach (type in expectedMemberTypes with index)
          members[index].ExpectedType = type;
      }
      else
        loc.Error(context, $"Expected pattern of $(expectedMemberTypes.Count), got pattern of $(members.Count).");

      returnType
    }

    public TypeOptionExpression(loc : ILocated, expectedType : TypeSymbol, context : DependentPropertyEvalContext) : TypeSymbol
    {
      def t = CreateOptionAstType(loc, CreateAstTypeVar(context), context);
      _ = AstTypeUnifier.Instance.Unify(t, expectedType);
      t
    }

    public UnifyAndReturn[T](t1 : TypeSymbol, t2 : TypeSymbol, r : T) : T
    {
      _ = AstTypeUnifier.Instance.Unify(t1, t2);
      r
    }

    public CreateImplicitRuleTypeCast(loc : ILocated, thisType : TypeSymbol, expectedType : TypeSymbol, context : DependentPropertyEvalContext) : Ref[FunctionTypeSymbol]
    {
      mutable validCasts = BindResult.Nil();

      when (expectedType : object != WellKnownSymbols.AnyType)
      {
        def castTemplate = CreateFunctionType(loc, array[thisType], AstTypeUnifier.Instance.CreateTypeVar(expectedType, null), context);
        def canBeImplicitCast(mapSyntax : MapSyntaxSymbol) : bool
        {
          mapSyntax.IsTypeEvaluated && AstTypeUnifier.Instance.TryUnify(mapSyntax.Type, castTemplate);
        }
        def scope = if (thisType.IsScopeEvaluated) thisType.Scope else EmptyScope.Instance;
        validCasts = scope.Bind.[MapSyntaxSymbol](canBeImplicitCast);
      }

      if (validCasts.IsEmpty)
        Ref.CreateBind(loc.Location, CreateFunctionType(loc, array[thisType], thisType, context))
      else
        Ref.CreateBind(loc.Location, "MapSyntaxCast", validCasts.Filter());
    }

    public FilterResolvedLanguage(refs : ImmutableArray[Ref[DeclarationSymbol]]) : Seq[LanguageSymbol]
    {
      def lst = List(refs.Length);

      foreach (r in refs)
      {
        def r2 = r.Resolve.[LanguageSymbol]();
        when (r2.IsSymbolEvaluated)
          lst.Add(r2.Symbol);
      }

      lst
    }

    public ResolveStructuralPropertyType(candidates : Ref[DeclarationSymbol], context : DependentPropertyEvalContext) : Ref[TypeSymbol]
    {
      mutable candidates2 = candidates.Result;

      def _x1 = candidates.Result.GetSymbols();
      def _x2 = candidates.GetSymbols();

      when (candidates.IsAmbiguous)
      {
        when (candidates.Contains.[AstTypeSymbol]() && (candidates.Contains.[ClassSymbol]() || candidates.Contains.[InterfaceSymbol]()))
          candidates2 = candidates.Result.Filter(s => !(s is ClassSymbol || s is InterfaceSymbol));
      }

      mutable parsedValueType;
      def resolve(candidate) : ValueOption[TypeSymbol]
      {
        | ast is AstTypeSymbol => VSome(ast)
        | typeSymbol is TypeSymbol =>
          when (parsedValueType == null)
            parsedValueType        = context.BindFullName(1, "Nitra", "ParsedValue");
          def constructedType = TopConstructedTypeSymbol(context, parsedValueType, ImmutableArray.Create(typeSymbol));
          VSome(constructedType)

        | _ => VNone()
      }
      def result = candidates2.Map(resolve);
      candidates.CreateRevole(result)
    }

    public GetImplicitBaseTypeForLanguage(context : DependentPropertyEvalContext, symbol : LanguageSymbol) : Seq[TypeSymbol] -> TypeSymbol
    {
      def isBaseLanguage(symbol)
      {
        symbol.Name == "Language" && symbol.FullName == "Nitra.Language"
      }

      when (isBaseLanguage(symbol))
        return null;

      fun (parentTypes)
      {
        foreach (parent in parentTypes)
          when (parent is LanguageSymbol)
            return null;

        context.GetLanguage()
      }
    }

    public FilterResolvedAstType(refs : ImmutableArray[Ref[DeclarationSymbol]], _for_dependency : AstSymbol) : Seq[AstTypeSymbol]
    {
      def lst = List(refs.Length);

      foreach (r in refs)
      {
        def r2 = r.Resolve.[AstTypeSymbol]();
        when (r2.IsSymbolEvaluated)
          lst.Add(r2.Symbol);
      }

      lst
    }

    public GetImplicitBaseTypeForDeclaration(context : DependentPropertyEvalContext, symbol : AstSymbol, _for_dependency : ImmutableArray[Ref[DeclarationSymbol]]) : Seq[TypeSymbol] -> TypeSymbol
    {
      def isBaseDeclaration(symbol)
      {
        symbol.Name == "Declaration" && symbol.FullName == "Nitra.Declarations.Declaration"
      }

      def isDeclaration(symbol : AstSymbol)
      {
        symbol.IsIsDeclarationEvaluated && symbol.IsDeclaration
      }

      when (isBaseDeclaration(symbol) || !isDeclaration(symbol))
        return null;

      fun (parentTypes : Seq[TypeSymbol]) : TypeSymbol
      {
        foreach (parent is AstSymbol in parentTypes)
          when (isDeclaration(parent))
            return null;

        context.GetDeclaration()
      }
    }
  } // module
} // namespace
