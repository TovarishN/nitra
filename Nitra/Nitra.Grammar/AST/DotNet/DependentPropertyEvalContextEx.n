using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Ast;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Globalization;
using System.Linq;

using System.Threading;
using NRB = Nitra.Declarations;

namespace DotNet
{
  public partial class CompilationUnit : AstBase, IProjectSupport, NamespaceBody
  {
    private class DependentPropertyEvalContextEx : DependentPropertyEvalContext
    {
      public this(symbolCache : ISymbolCache) { base(symbolCache) }

      public RootNamespace : NamespaceSymbol   { get; set; }
      public Language      : LanguageSymbol    { get; set; }
      public Declaration   : DeclarationSymbol { get; set; }
    }

    public static BindFullName[TSymbol](this context : DependentPropertyEvalContext, typeArgsCount : int, params names : array[string]) : GenericTypeSymbol
      where TSymbol : GenericTypeSymbol
    {
      def rootNamespace = (context :> DependentPropertyEvalContextEx).RootNamespace;

      def loop(ns : NamespaceSymbol, i : int) : GenericTypeSymbol
      {
        def name = names[i];
        def r = Reference(Location(), name);
        def res = ns.MemberTable.Bind.[DeclarationSymbol](r);
        def error() : string
        {
          def args = if (typeArgsCount == 0) "" else $"[$typeArgsCount]";
          $<#Can't find type '..$(names; ".")$args'#>
        }
        assert(!res.IsEmpty, error());
        match (res)
        {
          | Single(Symbol=NamespaceSymbol as nestedNs) => loop(nestedNs, i + 1)
          | Single(Symbol=GenericTypeSymbol as t) when t.IsTypeParametersCountEvaluated && t.TypeParametersCount == typeArgsCount => t
          | Multiple as m =>
            def hasNoParams(t : TSymbol) : bool
            {
              t.IsTypeParametersCountEvaluated && t.TypeParametersCount == typeArgsCount
            }

            if (m.Filter(hasNoParams) is BindResult.Single as s)
              s.Symbol
            else
              assert(false, error())

          | _ => assert2(false, error()); assert(false, error())
        }
      }

      loop(rootNamespace, 0)
    }

    public static GetRootNamespace(this context : DependentPropertyEvalContext) : NamespaceSymbol
    {
      (context :> DependentPropertyEvalContextEx).RootNamespace
    }

    public static GetLanguage(this context : DependentPropertyEvalContext) : LanguageSymbol
    {
      (context :> DependentPropertyEvalContextEx).Language
    }

    public static GetDeclaration(this context : DependentPropertyEvalContext) : AstSymbol
    {
      (context :> DependentPropertyEvalContextEx).Declaration :> AstSymbol
    }
  }
}
