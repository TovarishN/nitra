using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Nitra.Ast
{
  public sealed class ParseTreeTypeCtorScope : Scope
  {
    public static SupportedTypes : ImmutableArray[Reference];
    _context : DependentPropertyEvalContext;

    static this()
    {
      def loc = Location();
      SupportedTypes = ImmutableArray.Create(Reference(loc, "Some"), Reference(loc, "None"), Reference(loc, "Cons"), Reference(loc, "Nil"));
    }

    public this(context : DependentPropertyEvalContext)
    {
      _context = context;
    }

    // TODO: add type subst
    public override AllSymbols : Seq[DeclarationSymbol] { get { [] } }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      match (TryCreateTypeCtor(reference))
      {
        | s is TSymbol => BindResult.Single(s)
        | _ => BindResult.Nil()
      }
    }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      def res = LightList();

      foreach (type in SupportedTypes)
      {
        def sym = TryCreateTypeCtor(type);
        match (sym)
        {
          | null => assert(sym != null)
          | ctor is TSymbol when isMatch(ctor) => res.Add(ctor);
          | _ => ()
        }
      }

      res.ToBindResult()
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], _edges : List[string]) : void
    {
      def id            = nodeToIdMap.GetObjectId(this);

      nodes.Add($<#Obj_$id [label="ParseTreeTypeCtorScope"]#>);
    }

    private TryCreateTypeCtor(reference : Reference) : DeclarationSymbol
    {
      match (reference.Text)
      {
        | "Some" =>
          def typeVar = AstUtils.CreateRuleTypeVar(_context);
          AstUtils.CreateFunctionType(reference, array[typeVar], AstUtils.InitOption(_context, typeVar), _context)

        | "None" =>
          def typeVar = AstUtils.CreateRuleTypeVar(_context);
          AstUtils.CreateFunctionType(reference, array[], AstUtils.InitOption(_context, typeVar), _context)

        | "Cons" =>
          def typeVar = AstUtils.CreateRuleTypeVar(_context);
          def lst     = AstUtils.InitList(_context, typeVar);
          AstUtils.CreateFunctionType(reference, array[typeVar, lst], lst, _context)

        | "Nil"  =>
          def typeVar = AstUtils.CreateRuleTypeVar(_context);
          AstUtils.CreateFunctionType(reference, array[], AstUtils.InitList(_context, typeVar), _context)

        | _      => null
      }
    }

    public override ToString() : string
    {
      "pattern scope"
    }

    public override Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      IgnoreParams();
    }

    public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
    {
      IgnoreParams();
      ParseTreeTypeCtorScope(metadataReader.Project.Data)
    }
  }
}
