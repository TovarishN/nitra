using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public abstract class MappableRuleTypeScope : RuleTypeScope
  {
    protected _context : DependentPropertyEvalContext;

    public this(context : DependentPropertyEvalContext)
    {
      _context = context;
    }

    protected abstract GetElementType() : RuleTypeSymbol;
    protected abstract TryCreateMapSyntaxSymbol(prototype : MapSyntaxSymbol) : MapSyntaxSymbol;

    protected static CreateMapSyntaxDeclaration(prototype : MapSyntaxSymbol) : ExternalDeclaration[MapSyntaxSymbol]
    {
      match (prototype.FirstDeclarationOrDefault)
      {
        | null with (loc = Location.Default)
        | d    with (loc = d.Location) => ExternalDeclaration.[MapSyntaxSymbol](loc, prototype.Name);
      }
    }

    protected static CreateMapSyntaxSymbol(decl : ExternalDeclaration[MapSyntaxSymbol], prototype : MapSyntaxSymbol, thisType : RuleTypeSymbol, returnType : AstTypeSymbol, context : DependentPropertyEvalContext) : MapSyntaxSymbol
    {
      def symbol            = decl.DefineSymbol();
      symbol.Parameters     = prototype.Parameters;
      symbol.ReturnType     = returnType;
      symbol.ParameterTypes = prototype.ParameterTypes;
      symbol.ThisType       = thisType;
      symbol.Type           = AstUtils.CreateFunctionType(decl, thisType, symbol.ParameterTypes, returnType, context);
      symbol.EvalProperties(context);
      symbol
    }

    protected override CreateMembers() : BindResult[DeclarationSymbol]
    {
      def makeMembers(elemType : RuleTypeSymbol) : BindResult[DeclarationSymbol]
      {
        | t is RuleTupleTypeSymbol =>
          def elemTypes = t.ElemTypes.Filter(t : RuleTypeSymbol => !(t is RuleCharsTypeSymbol));
          if (elemTypes is [et])
            makeMembers(et)
          else
            BindResult.Nil()

        | RuleTypeVarSymbol(IsScopeEvaluated = true, Scope = scope)
        | SyntaxRuleSymbol(IsScopeEvaluated = true, Scope = scope) =>
          def bindResult = scope.Bind.[MapSyntaxSymbol](s => s.IsNameValid && s.IsReturnTypeEvaluated && s.IsParametersEvaluated);

          def toMem(candidate : MapSyntaxSymbol) : ValueOption[DeclarationSymbol]
          {
            def mapSyntaxSymbol = TryCreateMapSyntaxSymbol(candidate);
            if (mapSyntaxSymbol == null)
              VNone()
            else
              VSome(mapSyntaxSymbol)
          }
          bindResult.Map(toMem);

        | _ => BindResult.Nil()
      }

      makeMembers(GetElementType())
    }
  }
}
