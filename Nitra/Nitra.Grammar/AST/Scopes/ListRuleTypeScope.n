using Nitra;
using Nitra.Declarations;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Ast
{
  public sealed class ListRuleTypeScope : MappableRuleTypeScope
  {
    private _type : RuleListTypeSymbol;

    public this(type : RuleListTypeSymbol, context : DependentPropertyEvalContext)
    {
      base(context);
      _type = type;
    }

    protected override GetElementType() : RuleTypeSymbol
    {
      _type.ElemType
    }

    protected override TryCreateMapSyntaxSymbol(prototype : MapSyntaxSymbol) : MapSyntaxSymbol
    {
      match (prototype.ReturnType)
      {
        | ListAstTypeSymbol(IsElemTypeEvaluated = true, ElemType = AstSymbol as t)
        | OptionAstTypeSymbol(IsValueTypeEvaluated = true, ValueType = AstSymbol as t)
        | AstSymbol as t =>
          def decl = CreateMapSyntaxDeclaration(prototype);
          CreateMapSyntaxSymbol(decl, prototype, _type, AstUtils.CreateListAstType(decl, t, _context), _context)

        | _ => null
      }
    }

    public override Serialize(writer : IO.BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      metadataWriter.WriteObject(_type, writer);
    }

    public static Deserialize(reader : IO.BinaryReader, metadataReader : MetadataReader) : this
    {
      def type = metadataReader.ReadObject(reader);
      def context = metadataReader.Project.Data;
      ListRuleTypeScope(type, context)
    }
  }
}
