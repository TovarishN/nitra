using Nitra.Model;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace Nitra.Typing
{
  [StructuralEquality]
  public variant RuleType
  {
    | List
      {
        Type    : RuleType;

        [EqualsIgnore, RecordIgnore]
        private mutable chemicalType : ChemicalRuleType;

        public override ChemicalType : ChemicalRuleType
        {
          get
          {
            when (chemicalType : object == null)
            {
              chemicalType = match (this.Type.ChemicalType)
              {
                | Void             => ChemicalRuleType.Void()
                | StaticString     => ChemicalRuleType.Int()
                | any              => ChemicalRuleType.List(any)
              };
            }
            chemicalType
          }
        }
      }
    | Option
      {
        Type    : RuleType;

        [EqualsIgnore, RecordIgnore]
        private mutable chemicalType : ChemicalRuleType;

        public override ChemicalType : ChemicalRuleType
        {
          get
          {
            when (chemicalType : object == null)
            {
              chemicalType = match (this.Type.ChemicalType)
              {
                | Void             => ChemicalRuleType.Void()
                | StaticString     => ChemicalRuleType.Bool()
                | any              => ChemicalRuleType.Option(any)
              };
            }
            chemicalType
          }
        }
      }
    | Tuple
      {
        Types   : list[RuleType];

        [EqualsIgnore, RecordIgnore]
        private mutable chemicalType : ChemicalRuleType;

        public override ChemicalType : ChemicalRuleType
        {
          get
          {
            when (chemicalType : object == null)
            {
              def members = LightList();
              mutable hasStaticString;
              foreach (t in this.Types)
                match (t.ChemicalType)
                {
                  | Void          => ()
                  | StaticString  => hasStaticString = true;
                  | any           => members.Add(any);
                }

              chemicalType = match (members.Count)
              {
                | 0 =>
                  if (hasStaticString)
                    ChemicalRuleType.StaticString()
                  else
                    ChemicalRuleType.Void()

                | 1 => members.FirstItem
                | _ => ChemicalRuleType.Tuple(members.ToNList())
              }
            }
            chemicalType
          }
        }
      }
    | Ref
      {
        Symbol  : SyntaxRuleSymbol;
        Parameters : list[RuleSymbol];
        
        public this(symbol : SyntaxRuleSymbol) { Symbol = symbol; Parameters = []; }

        [EqualsIgnore, RecordIgnore]
        private mutable _chemicalType : ChemicalRuleType;

        public override ChemicalType : ChemicalRuleType
        {
          get
          {
            when (_chemicalType : object == null)
              _chemicalType = ChemicalRuleType.Root(this.Symbol); // TODO: add support of Parameters
            _chemicalType
          }
        }
      }
    | Chars
      {
        Keyword : option[string];

        public override ChemicalType : ChemicalRuleType
        {
          get { if (Keyword.IsSome) ChemicalRuleType.StaticString() else ChemicalRuleType.String() }
        }
      }
    | Void
      {
        public override ChemicalType : ChemicalRuleType
        {
          get { ChemicalRuleType.Void() }
        }
      }
    | RuleParameter
      {
        Symbol  : RuleParameterSymbol;
        
        public override ChemicalType : ChemicalRuleType
        {
          get { ChemicalRuleType.Void() }
        }
      }

    public abstract ChemicalType : ChemicalRuleType { get; }

    public override ToString() : string
    {
      match (this)
      {
        | List(ty)          => $<#List[$ty]#>
        | Option(ty)        => $<#$ty?#>
        | Tuple(types)      => $<#(..$types)#>
        | Ref(symbol, [])   => symbol.FullName
        | Ref(symbol, args) => $<#$(symbol.FullName)<..$args>#>
        | Chars(None)       => "Token"
        | Chars(Some)       => "Keyword"
        | Void              => "Void"
        | RuleParameter(s)  => s.FullName
      }
    }
  }
}
