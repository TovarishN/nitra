//using Nitra.Macros;
using Nitra;
using Nitra.ProjectSystem;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

[assembly: DefineSurround("newOptions", false, def newOptions = RuleDefinitionOptions(this), newOptions)]

namespace Nitra.Model
{
  [Record]
  public sealed class RuleDefinitionOptions
  {
    public static Empty : RuleDefinitionOptions = RuleDefinitionOptions();

    public IsStart                       : bool            { get; private set; }
    public IsExplicitSpaces              : bool            { get; private set; }
    public IsSuppressTrailingSpaces      : bool            { get; private set; }
    public SpanClassSymbol               : SpanClassSymbol { get; private set; }
    public IsTokenRule                   : bool            { get; private set; }
    public IsNoParseTree                 : bool            { get; private set; }
    /// This token is important in a error recovery.
    public IsKeyToken                    : bool            { get; private set; }
    /// This token can be parsed by the rule used to parse an identifier. All keywords IsKeyToken.
    public IsKeyword                     : bool            { get; private set; }
    public Prefix                        : bool            { get { this.OperatorInfo %&& OperatorInfo.Prefix } }
    public Postfix                       : bool            { get { this.OperatorInfo %&& OperatorInfo.Postfix } }
    public Infix                         : bool            { get { this.OperatorInfo %&& OperatorInfo.Infix } }
    public OperatorInfo                  : OperatorInfo    { get; private set; }
    public Arity                         : int             { get; private set; }
    public IsDynamicSyntaxExtender       : bool            { get; private set; }
    public IsDynamicSyntaxExtentionPoint : bool            { get; private set; }
    public IsSplitAtCompletionPosition   : bool            { get; private set; }
    public PreferIfConflictWithList      : list[ExtensionRuleSymbol] { get; private set; default []; }

    public AddPreferIfConflictWith(_loc : Located, symbol : ExtensionRuleSymbol) : RuleDefinitionOptions
    {
      surroundwith(newOptions)
        newOptions.PreferIfConflictWithList = symbol :: newOptions.PreferIfConflictWithList;
    }

    public SetDynamicSyntaxExtentionPoint(_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsDynamicSyntaxExtentionPoint  = value }
    public SetArity                      (_loc : Located, value : int)             : RuleDefinitionOptions { surroundwith(newOptions) newOptions.Arity                          = value }
    public SetDynamicSyntaxExtender      (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsDynamicSyntaxExtender        = value }
    public SetOperatorInfo               (_loc : Located, value : OperatorInfo)    : RuleDefinitionOptions { surroundwith(newOptions) newOptions.OperatorInfo                   = value }
    public SetStart                      (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsStart                        = value }
    public SetExplicitSpaces             (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsExplicitSpaces               = value }
    public SetSuppressTrailingSpaces     (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsSuppressTrailingSpaces       = value }
    public SetSpanClass                  (_loc : Located, value : SpanClassSymbol) : RuleDefinitionOptions { surroundwith(newOptions) newOptions.SpanClassSymbol                = value }
    public SetNoParseTree                (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsNoParseTree                  = value }
    public SetTokenRule                                  (value : bool)            : RuleDefinitionOptions
    {
      surroundwith(newOptions)
      {
        newOptions.IsTokenRule      = value;
        newOptions.IsExplicitSpaces = value;
      }
    }
    public SetKeyToken               (_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsKeyToken               = value }
    public SetKeyword                (_loc : Located, value : bool)            : RuleDefinitionOptions
    {
      surroundwith(newOptions)
      {
        when (value)
          newOptions.IsKeyToken = true;
        newOptions.IsKeyword  = value;
      }
    }
    public SplitAtCompletionPosition(_loc : Located, value : bool)            : RuleDefinitionOptions { surroundwith(newOptions) newOptions.IsSplitAtCompletionPosition = value }

    public this() { }

    public this(original : RuleDefinitionOptions)
    {
      this( isStart                        = original.IsStart
          , isExplicitSpaces               = original.IsExplicitSpaces
          , isSuppressTrailingSpaces       = original.IsSuppressTrailingSpaces
          , spanClassSymbol                = original.SpanClassSymbol
          , isTokenRule                    = original.IsTokenRule
          , isNoParseTree                  = original.IsNoParseTree
          , isKeyToken                     = original.IsKeyToken
          , isKeyword                      = original.IsKeyword
          , operatorInfo                   = original.OperatorInfo
          , arity                          = original.Arity
          , isDynamicSyntaxExtender        = original.IsDynamicSyntaxExtender
          , isDynamicSyntaxExtentionPoint  = original.IsDynamicSyntaxExtentionPoint
          , isSplitAtCompletionPosition    = original.IsSplitAtCompletionPosition
          , preferIfConflictWithList       = original.PreferIfConflictWithList
          );
    }

    public static CreateTokenRule()          : RuleDefinitionOptions
    {
      RuleDefinitionOptions
          ( isStart                       = false
          , isExplicitSpaces              = true
          , isSuppressTrailingSpaces      = false
          , spanClassSymbol               = null
          , isTokenRule                   = true
          , isNoParseTree                 = false
          , isKeyToken                    = false
          , isKeyword                     = false
          , operatorInfo                  = OperatorInfo.None
          , arity                         = 0
          , isDynamicSyntaxExtender       = false
          , isDynamicSyntaxExtentionPoint = false
          , isSplitAtCompletionPosition   = false
          , preferIfConflictWithList      = []
          );
      }


    public InheritedCopy() : RuleDefinitionOptions
    {
      if (IsStart)
        surroundwith(newOptions) newOptions.IsStart = false
      else
        this
    }

    public override ToString() : string
    {
      def values = List();
      when (this.IsStart)                           values.Add("StartRule");
      when (this.IsExplicitSpaces && !IsTokenRule)  values.Add("ExplicitSpaces");
      when (this.IsSuppressTrailingSpaces)          values.Add("SuppressTrailingSpaces");
      when (this.SpanClassSymbol != null)           values.Add($"SpanClass($(SpanClassSymbol.Node.FullName))");
      when (this.IsTokenRule)                       values.Add("TokenRule");
      when (this.OperatorInfo != OperatorInfo.None) values.Add(this.OperatorInfo.ToString());
      when (this.Arity > 0)                         values.Add("Arity(" + this.Arity + ")");

      $"[..$(values; \", \")]"
    }
  }
}
