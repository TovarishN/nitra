using Nitra.Typing;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Model
{
  [Record]
  public variant SubruleCompileInfo
  {
                   public         SrcRule             : Nitra.Model.Rule;
                   public         HeadPredicates      : array[SequenceCompileInfo.Predicate];
    [RecordIgnore] public mutable Owner               : SequenceCompileInfo;
    [RecordIgnore] public mutable State               : int;
    [RecordIgnore] public mutable EndState            : int;
    [RecordIgnore] public mutable SequenceLevel       : int;
    [RecordIgnore] public mutable Size                : int;
    [RecordIgnore] public mutable Offset              : int;
    [RecordIgnore] public mutable NextSibling         : SubruleCompileInfo;
    [RecordIgnore] public mutable PrevSibling         : SubruleCompileInfo;
    [RecordIgnore] public mutable AllocateRawTree     : bool;
    [RecordIgnore] public mutable IsPredicate         : bool;

    | Empty
    | TokenString       { String : string; }
    | RegularCall       { Symbol : RegularRuleSymbol; Aruments : list[RuleRef]; }
    | ExtensibleCall    { Symbol : ExtensibleRuleSymbol; Aruments : list[RuleRef]; BindingPower : BindingPowerInfo; }
    | SimpleCall        { Symbol : SimpleRuleSymbol; Aruments : list[RuleRef]; }
    | Option            { Rule   : SequenceCompileInfo.Option; }
    | List              {
                          Item   : SequenceCompileInfo.ListItem; MinCount : int; MaxCount : option[int];
                          public UseCounter : bool { get MinCount > 0 || MaxCount is Some(_) }
                          public IsSkipAnyPattern : bool { get { this.SrcRule.Type is RuleType.Chars } }
                          public IsDynamicSyntaxExtentionPoint : bool { get { this.SrcRule is Rule.Repeat(IsDynamicSyntaxExtentionPoint = true) } }
                        }
    | ListWithSeparator { Item   : SequenceCompileInfo.ListWithSeparatorItem; Separator : SequenceCompileInfo.ListWithSeparatorSeparator; MinCount : int; MaxCount : option[int]; HangingSeparator : bool; public UseCounter : bool { get MinCount > 0 || MaxCount is Some(_) } }
    | Marker            { Symbol : MarkerSymbol; }

    public SequenceIndex : int
    {
      [Memoize] get { Array.IndexOf(Owner.NonMarkerSubrules, this) }
    }

    public IsLoopSeparator : bool { get { Owner is SequenceCompileInfo.ListWithSeparatorSeparator } }
    public IsLoopBody      : bool { get { Owner is SequenceCompileInfo.ListWithSeparatorItem } }
    public IsStart         : bool { get { Owner.NonMarkerSubrules[0] : object == this } }

    public override ToString() : string
    {
      match (this)
      {
        | Empty                                                   => "<empty>"
        | TokenString                                             => SrcRule.ToString()
        | RegularCall                                             => SrcRule.ToString()
        | ExtensibleCall                                          => SrcRule.ToString()
        | SimpleCall                                              => SrcRule.ToString()
        | Option           (rule)                                 => $"($rule)?"
        | List             (rule, lower, upper)                   => $"($rule)$(FormatQuantifier(lower, upper))"
        | ListWithSeparator(rule, separator, lower, upper, false) => $"($rule; $separator)$(FormatQuantifier(lower, upper))"
        | ListWithSeparator(rule, separator, lower, upper, true)  => $"($rule; $separator; ?)$(FormatQuantifier(lower, upper))"
        | Marker as m                                             => m.Symbol.Name
      }
    }

    public ToStringWithIndex(sequenceLevel : int) : string
    {
      // Show index only for sequenceLevel!
      def prefix = if (sequenceLevel == SequenceLevel) SequenceIndex + ":" else null;
      match (this)
      {
        | Empty                                                   => $"$prefix<empty>"
        | TokenString                                             => $"$prefix$SrcRule"
        | RegularCall                                             => $"$prefix$SrcRule"
        | ExtensibleCall                                          => $"$prefix$SrcRule"
        | SimpleCall                                              => $"$prefix$SrcRule"
        | Option           (rule)                                 => $"$prefix($(rule.ToStringWithIndex(sequenceLevel)))?"
        | List             (rule, lower, upper)                   => $"$prefix($(rule.ToStringWithIndex(sequenceLevel)))$(FormatQuantifier(lower, upper))"
        | ListWithSeparator(rule, separator, lower, upper, false) => $"$prefix($(rule.ToStringWithIndex(sequenceLevel)); $(separator.ToStringWithIndex(sequenceLevel)))$(FormatQuantifier(lower, upper))"
        | ListWithSeparator(rule, separator, lower, upper, true)  => $"$prefix($(rule.ToStringWithIndex(sequenceLevel)); $(separator.ToStringWithIndex(sequenceLevel)); ?)$(FormatQuantifier(lower, upper))"
        | Marker                                                  => ""
      }
    }

    public ToStringWithState() : string
    {
      match (this)
      {
        | Empty                                                   => $"$State:<empty>"
        | TokenString                                             => $"$State:$SrcRule"
        | RegularCall                                             => $"$State:$SrcRule"
        | ExtensibleCall                                          => $"$State:$SrcRule"
        | SimpleCall                                              => $"$State:$SrcRule"
        | Option           (rule)                                 => $"$State:($(rule.ToStringWithState()))?"
        | List             (rule, lower, upper)                   => $"$State:($(rule.ToStringWithState()))$(FormatQuantifier(lower, upper))"
        | ListWithSeparator(rule, separator, lower, upper, false) => $"$State:($(rule.ToStringWithState()); $(separator.ToStringWithState()))$(FormatQuantifier(lower, upper))"
        | ListWithSeparator(rule, separator, lower, upper, true)  => $"$State:($(rule.ToStringWithState()); $(separator.ToStringWithState()); ?)$(FormatQuantifier(lower, upper))"
        | Marker                                                  => ""
      }
    }

    private static FormatQuantifier(lower : int, upper : option[int]) : string
    {
      | (0, None)    => "*"
      | (1, None)    => "+"
      | (x, None)    => $"{$x,}"
      | (0, Some(x)) => $"{,$x}"
      | (x, Some(y)) => if (x == y) $"{$x}" else $"{$x, $y}"
    }
  }
}
