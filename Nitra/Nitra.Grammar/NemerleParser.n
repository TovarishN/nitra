using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;
using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using G = NitraSyntaxParseTree;

namespace Nitra
{
  public module NemerleParser
  {
    public Parse(body : G.RuleMethodBody, context : Context) : PExpr
    {
      match (body)
      {
        | G.RuleMethodBody.Block      as b => ParseImpl(b.Block, context)
        | G.RuleMethodBody.Expression as b => ParseImpl(b.Expression, context)
        | G.RuleMethodBody.Empty           => <[ () ]>
        | _                                => <[ () ]>
      }
    }

    public Parse(body : G.Expression, context : Context) : PExpr
    {
      ParseImpl(body, context)
    }

    public Parse(body : G.DependentProperty.Nested.PropertyValue, context : Context) : PExpr
    {
      match (body)
      {
        | G.DependentProperty.Nested.PropertyValue.Expression as b => ParseImpl(b.Expression, context)
        | G.DependentProperty.Nested.PropertyValue.Empty           => <[ () ]>
        | _                                                        => <[ () ]>
      }
    }

    public Parse(body : G.MapSyntaxCode, context : Context) : PExpr
    {
      match (body)
      {
        | G.MapSyntaxCode.Block      as b => ParseImpl(b.Block, context)
        | G.MapSyntaxCode.Expression as b => ParseImpl(b.Expression, context)
        | _                                     => <[ () ]>
      }
    }

    ParseImpl(parseTree : Nitra.ParseTree, context : Context) : PExpr
    {
      def env = context.GetNemerleEnvironment();
      def simpleParse(parseTree : Nitra.ParseTree) : PExpr
      {
        def text = parseTree.Location.GetText();
        MainParser.ParseExpr(env, text, parseTree.NLocation())
      }
      def parseAndAddIt(parseTree : Nitra.ParseTree) : PExpr
      {
        def e = simpleParse(parseTree);

        def addIt(e)
        {
          | <[ value ]> => e
          | <[ $(n : name) ]> => <[ it.$(n : name)]>
          | <[ $x = $y ]> => <[ $(addIt(x)) = $(addIt(y)) ]>
          | _ => e
        }

        addIt(e)
      }

      match (parseTree)
      {
        | G.Expression(BodyData=[G.Expression.Nested.ContentOrText.Content(Content=G.Expression.Nested.Content.Fold as fold)]) =>
          def collection = simpleParse(fold.Identifier);
          def expr1 = simpleParse(fold.Expression);
          def exprs = fold.Expressions.Item1.Map(parseAndAddIt);
          //exprs.Fold()
          <[ $collection.Fold($expr1, fun((it, value)) { ..$exprs }) ]>

        | _ => simpleParse(parseTree)
      }
    }
  }
}
