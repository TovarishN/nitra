using System.Text;
using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace DotNet
{
  public module AstUtils
  {
    public Append(this lst : QualifiedReference.IAstList, item : QualifiedReference) : QualifiedReference.IAstList
    {
      def newItems = array(lst.Count + 1);
      lst.CopyTo(newItems, 0);
      newItems[lst.Count] = item;
      QualifiedReference.AstList(lst, newItems)
    }

    public MakeMembersScope(currentScope : Scope, opening : Scope, aliases : TableScope) : Scope
    {
      def makeCurrentScope(scope : Scope) : Scope
      {
        def withAliases =
          if (aliases.Symbols.Count == 0)
            scope
          else
            scope.UnionWith(aliases);

        opening.HideWith(withAliases)
      }

      if (currentScope is HidingScope as h)
        h.Hidden.HideWith(makeCurrentScope(h.Scope))
      else
        makeCurrentScope(currentScope)
    }

    public MakeEnteredScope(parentScope : Scope, parentNs : NamespaceSymbol, enteredNs : NamespaceSymbol) : Scope
    {
      def buildEnterNsScope(ns : NamespaceSymbol) : Scope
      {
        def declaredIn = ns.DeclaredIn;
        def scope      = ns.Scope;

        if (declaredIn : object == parentNs)
          parentScope.HideWith(scope)
        else
          buildEnterNsScope(declaredIn).HideWith(scope)
      }

      buildEnterNsScope(enteredNs)
    }

    [Memoize]
    public TypeOverloadResolution(argumentsCount : int) : ResolutionAlgorithm[DeclarationSymbol, DeclarationSymbol]
    {
      fun (candidate : DeclarationSymbol) : ValueOption[DeclarationSymbol]
      {
        | symbol is GenericEntitySymbol when argumentsCount == symbol.TypeParametersCount => VSome(symbol)
        | _                             when argumentsCount == 0                          => VSome(candidate)
        | _ => VNone()
      }
    }

    public CreateMissingQualifiedReference(loc : Location) : QualifiedReference
    {
      QualifiedReference.Simple(loc, Name = Reference.AmbiguousOrMissing(loc))
    }

    public CreateSimpleName(loc : Location, name : string) : QualifiedReference
    {
      QualifiedReference.Simple(loc, Reference(loc, name))
    }

    public CreateTupleQualifiedReference(loc : Location, items : QualifiedReference.IAstList) : QualifiedReference
    {
      QualifiedReference.Generic(loc,
        CreateSimpleName(loc.FromStart(), "#Tuple"),
        items)
    }

    public CreateFuncQualifiedReference(loc : Location, qualifiedReference1 : QualifiedReference, qualifiedReference2 : QualifiedReference) : QualifiedReference
    {
      def arguments =
        match (qualifiedReference1)
        {
          | QualifiedReference.Generic(QualifiedName = QualifiedReference.Simple(Name = Reference(Text = "#Tuple")), Arguments = tupleArguments) => tupleArguments.Append(qualifiedReference2)
          | _ => QualifiedReference.AstList(qualifiedReference1.Location, qualifiedReference1, qualifiedReference2)
        };

      QualifiedReference.Generic(loc,
        CreateSimpleName(loc.FromStart(), "#Func"),
        arguments)
    }

    public MakeFullName(parentFullName : string, name : string) : string
    {
      MakeFullName(parentFullName, name, default(ImmutableArray[TypeSymbol]))
    }

    public MakeFullName[TTypeSymbol](declaredInOpt : ValueOption[DeclarationSymbol], name : string) : string
      where TTypeSymbol: TypeSymbol
    {
      MakeFullName(declaredInOpt, name, default(ImmutableArray[TypeSymbol]))
    }

    public MakeFullName[TTypeSymbol](declaredInOpt : ValueOption[DeclarationSymbol], name : string, args : ImmutableArray[TTypeSymbol]) : string
      where TTypeSymbol: TypeSymbol
    {
      when (declaredInOpt is VSome(declaredIn))
        when (declaredIn.IsFullNameEvaluated)
          return MakeFullName(declaredIn.FullName, name, args);

      MakeFullName(null, name, args);
    }

    public MakeFullName[TTypeSymbol](parentFullName : string, name : string, args : ImmutableArray[TTypeSymbol]) : string
      where TTypeSymbol: TypeSymbol
    {
      def result =
        if (string.IsNullOrEmpty(parentFullName))
          name
        else
          parentFullName + "." + name;

      if (args.IsDefaultOrEmpty)
        result
      else
        $<#$result<..$(args; ", "; _.Name)>#>
    }

    public MakeFullName[TTypeSymbol](parentFullName : string, name : string) : string
      where TTypeSymbol: TypeSymbol
    {
      MakeFullName(parentFullName, name, default(ImmutableArray[TypeSymbol]))
    }

    public IsSameIdentity(typeParametersCount : int, candidate : Declaration) : bool
    {
      match (candidate)
      {
        | DotNet.GenericType as t => t.TypeParameterAliases.Count == typeParametersCount
        | Namespace
        | _ is ExternalDeclaration[NamespaceSymbol]
        | Nitra.Declarations.Type => typeParametersCount == 0
        | _                       => false
      }
    }

    public CanMerge[T](typeParametersCount : int, candidate : Declaration) : bool
      where T : GenericType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == typeParametersCount
        | _ => false
      }
    }

     public CanMerge[T](symbol : GenericEntitySymbol, candidate : Declaration) : bool
      where T : GenericEntity
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == symbol.TypeParametersCount
        | _ => false
      }
    }

    public CanMerge[T](symbol : GenericContainerTypeSymbol, candidate : Declaration) : bool
      where T : GenericContainerType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == symbol.TypeParametersCount && symbol.IsPartial && genericType.IsPartial.ValueOrDefault
        | _ => false
      }
    }

    public FilterResolved(refs : ImmutableArray[Ref[DeclarationSymbol]]) : Seq[TypeSymbol]
    {
      def lst = List(refs.Length);

      foreach (r in refs)
      {
        def r2 = r.Resolve.[TypeSymbol]();
        when (r2.IsSymbolEvaluated)
          lst.Add(r2.Symbol);
      }

      lst
    }

    public CreateNestedConstructedTypeSymbol(t : NestedGenericTypeSymbol, parentTypeSubst : TypeSymbol, context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def resultSymbol      = NestedConstructedTypeSymbol();
      resultSymbol.Parent   = parentTypeSubst;
      resultSymbol.TypeSubst = resultSymbol;
      foreach (decl in t.Declarations)
        resultSymbol.AddDeclaration(decl);
      resultSymbol.TypeInfo = t;
      resultSymbol.Args     = t.TypeParameters.CastArray();
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public CreateNestedConstructedTypeSymbol(loc : Location, parentTypeSubst : TypeSymbol, typeInfo : GenericTypeSymbol, arguments : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def name              = Name(loc, "#ConstructedType");
      def decl              = NestedConstructedType(loc, name);
      def resultSymbol      = NestedConstructedTypeSymbol();
      resultSymbol.Parent   = parentTypeSubst;
      resultSymbol.TypeSubst = resultSymbol;
      name.Symbol = resultSymbol;
      resultSymbol.AddDeclaration(decl);
      resultSymbol.TypeInfo = typeInfo;
      resultSymbol.Args     = arguments;
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public CreateConstructedTypeSymbol(loc : Location, typeInfo : GenericTypeSymbol, arguments : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def name              = Name(loc, "#ConstructedType");
      def decl              = TopConstructedType(loc, name);
      def resultSymbol      = TopConstructedTypeSymbol();
      name.Symbol = resultSymbol;
      resultSymbol.AddDeclaration(decl);
      resultSymbol.TypeInfo = typeInfo;
      resultSymbol.Args     = arguments;
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public MakeConstructedType(ast : ILocated, args : ImmutableArray[Ref[DeclarationSymbol]], context : DependentPropertyEvalContext) : ResolutionAlgorithm[DeclarationSymbol, DeclarationSymbol]
    {
      def loc = ast.Location;
      mutable resolvedArgs;
      def allArgumentsResolved = ResolveAll.[TypeSymbol, _](args, out resolvedArgs);
      fun (symbol)
      {
        def makeArguments(symbol : GenericTypeSymbol) : ImmutableArray[TypeSymbol]
        {
          unless (allArgumentsResolved)
          {
            def typeParameters = symbol.TypeParameters;
            foreach (arg when arg == null in resolvedArgs with index)
              resolvedArgs[index] = typeParameters[index];
          }
          resolvedArgs.MoveToImmutable()
        }

        match (symbol)
        {
          | symbol is NestedGenericTypeSymbol => VSome(CreateNestedConstructedTypeSymbol(loc, symbol.DeclaredIn.TypeSubst, symbol, makeArguments(symbol), context))
          | symbol is TopGenericTypeSymbol    => VSome(CreateConstructedTypeSymbol(loc, symbol, makeArguments(symbol), context))
          | _ => VNone()
        }
      }
    }

    public static ResolveAll[TSymbol, TRef](refs : ImmutableArray[TRef], result : out ImmutableArray[TSymbol].Builder) : bool
      where TSymbol : DeclarationSymbol
      where TRef    : IRef
    {
      mutable isResolvedAll = true;
      def symbols = ImmutableArray.CreateBuilder(refs.Length);
      foreach (r in refs with index)
      {
        def resolvedArg = r.Resolve.[TSymbol]();
        if (resolvedArg.IsSymbolEvaluated)
          symbols.Add(resolvedArg.Symbol)
        else
        {
          isResolvedAll  = false;
          symbols.Add(default(TSymbol));
        }
      }
      result = symbols;
      isResolvedAll
    }

    public GetTypeParametersCount(declaration : Declaration) : int
    {
      (declaration :> GenericEntity).TypeParameterAliases?.Count
    }

    public GetTypeParameter(alias : TypeParameterAlias, typeParameterSymbols : IList[TypeParameterSymbol], IndexIn : int) : TypeParameterSymbol
    {
      def typeParameterSymbol = typeParameterSymbols[IndexIn];
      typeParameterSymbol.AddAliasSymbol(alias);
      typeParameterSymbol
    }

    public NoTypeParameters : array[TypeParameterSymbol] = array(0);

    public CreateTypeParameters(count : int) : ImmutableArray[TypeParameterSymbol]
    {
      if (count == 0)
        ImmutableArray.Empty
      else
      {
        def result = ImmutableArray.CreateBuilder(count);
        for (mutable i = 0; i < count; ++i)
          result.Add(TypeParameterSymbol());
        result.MoveToImmutable()
      }
    }

    public IsPartial(declarations : Seq[GenericContainerType]) : bool
    {
      declarations.FirstOrDefault()?.IsPartial.ValueOrDefault
    }

    public FilterDeclaredTypeSymbol(memberTable : TableScope) : IList[NestedTypeSymbol]
    {
      def symbols = memberTable.Symbols;
      symbols.SelectMany(s => s.OfType.[NestedTypeSymbol]()).ToArray()
    }

    public IsSubtypeOf(this symbol1 : TypeSymbol, symbol2 : TypeSymbol) : bool
    {
      AstTypeUnifier.Instance.Require(symbol1, symbol2)
    }

    public IsNumeric(this symbol : TypeSymbol) : bool
    {
      match (symbol)
      {
        | x when x.FullName == PlatformTypes.Byte.FullName
        | x when x.FullName == PlatformTypes.SByte.FullName
        | x when x.FullName == PlatformTypes.Int16.FullName
        | x when x.FullName == PlatformTypes.UInt16.FullName
        | x when x.FullName == PlatformTypes.Int32.FullName
        | x when x.FullName == PlatformTypes.UInt32.FullName
        | x when x.FullName == PlatformTypes.Int64.FullName
        | x when x.FullName == PlatformTypes.UInt64.FullName
        | x when x.FullName == PlatformTypes.Single.FullName
        | x when x.FullName == PlatformTypes.Double.FullName
        | x when x.FullName == PlatformTypes.Decimal.FullName => true
        | _ => false
      }
    }

    public HasImplicitConversion(this from : TypeSymbol, to : TypeSymbol) : bool
    {
      def char = PlatformTypes.Char.FullName;
      def byte = PlatformTypes.Byte.FullName;
      def sbyte = PlatformTypes.SByte.FullName;
      def short = PlatformTypes.Int16.FullName;
      def ushort = PlatformTypes.UInt16.FullName;
      def int = PlatformTypes.Int32.FullName;
      def uint = PlatformTypes.UInt32.FullName;
      def long = PlatformTypes.Int64.FullName;
      def ulong = PlatformTypes.UInt64.FullName;
      def float = PlatformTypes.Single.FullName;
      def double = PlatformTypes.Double.FullName;
      def decimal = PlatformTypes.Decimal.FullName;

      match(from) {
        | x when x.FullName == sbyte => [short, int, long, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == byte => [short, ushort, int, uint, long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == short => [int, long, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == ushort => [int, uint, long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == int => [long, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == uint => [long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == long => [float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == ulong => [float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == char => [ushort, int, uint, long, ulong, float, double, decimal].Any(s => s == to.FullName)
        | x when x.FullName == float => [double].Any(s => s == to.FullName)
        | _ => false
      }
    }

    public GetMemberReturnType(this member : DeclarationSymbol) : TypeSymbol
    {
      match (member)
      {
        | x is Member.PropertySymbol => x.Type
        | x is Member.MethodSymbol => x.ReturnType
        | x is Member.FieldSymbol => x.Type
        | x is Member.ConstantSymbol => x.Type
        | x is LambdaParameterSymbol => x.Type
        | x is EnumMemberSymbol => x.DeclaredIn
        | TypeSymbol => PlatformTypes.Type
        | _ => PlatformTypes.GetFreeVar()
      }
    }
  }
}
