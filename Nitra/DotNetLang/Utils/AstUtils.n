using System.Text;
using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace DotNet
{
  public module AstUtils
  {
    public static mutable MakeDefault : ExprBase -> ValueOption[DefaultValue];

    public CreateFreeTypeVar() : TypeVarSymbol { TypeUnifier.Instance.CreateFreeTypeVar() }

    public Append(this lst : QualifiedReference.IAstList, item : QualifiedReference) : QualifiedReference.IAstList
    {
      def newItems = array(lst.Count + 1);
      lst.CopyTo(newItems, 0);
      newItems[lst.Count] = item;
      QualifiedReference.AstList(lst, newItems)
    }

    public MakeMembersScope(currentScope : Scope, opening : Scope, aliases : TableScope) : Scope
    {
      def makeCurrentScope(scope : Scope) : Scope
      {
        def withAliases =
          if (aliases.IsEmpty)
            scope
          else
            scope.UnionWith(aliases);

        opening.HideWith(withAliases)
      }

      if (currentScope is HidingScope as h)
        h.Hidden.HideWith(makeCurrentScope(h.Scope))
      else
        makeCurrentScope(currentScope)
    }

    public MakeEnteredScope(parentScope : Scope, parentNs : NamespaceSymbol, enteredNs : NamespaceSymbol) : Scope
    {
      def buildEnterNsScope(ns : NamespaceSymbol) : Scope
      {
        def declaredIn = ns.DeclaredIn;
        def scope      = ns.Scope;

        if (declaredIn : object == parentNs)
          parentScope.HideWith(scope)
        else
          buildEnterNsScope(declaredIn).HideWith(scope)
      }

      buildEnterNsScope(enteredNs)
    }

    [Memoize]
    public TypeOverloadResolution(argumentsCount : int) : ResolutionAlgorithm[DeclarationSymbol, DeclarationSymbol]
    {
      fun (candidate : DeclarationSymbol) : ValueOption[DeclarationSymbol]
      {
        | symbol is GenericEntitySymbol when argumentsCount == symbol.TypeParametersCount => VSome(symbol)
        | _                             when argumentsCount == 0                          => VSome(candidate)
        | _ => VNone()
      }
    }

    public CreateMissingQualifiedReference(loc : Location) : QualifiedReference
    {
      QualifiedReference.Simple(loc, Name = Reference.AmbiguousOrMissing(loc))
    }

    public CreateSimpleName(loc : Location, name : string) : QualifiedReference
    {
      QualifiedReference.Simple(loc, Reference(loc, name))
    }

    public CreateTupleQualifiedReference(loc : Location, items : QualifiedReference.IAstList) : QualifiedReference
    {
      QualifiedReference.Generic(loc,
        CreateSimpleName(loc.FromStart(), "#Tuple"),
        items)
    }

    public CreateFuncQualifiedReference(loc : Location, qualifiedReference1 : QualifiedReference, qualifiedReference2 : QualifiedReference) : QualifiedReference
    {
      def arguments =
        match (qualifiedReference1)
        {
          | QualifiedReference.Generic(QualifiedName = QualifiedReference.Simple(Name = Reference(Text = "#Tuple")), Arguments = tupleArguments) => tupleArguments.Append(qualifiedReference2)
          | _ => QualifiedReference.AstList(qualifiedReference1.Location, qualifiedReference1, qualifiedReference2)
        };

      QualifiedReference.Generic(loc,
        CreateSimpleName(loc.FromStart(), "#Func"),
        arguments)
    }

    public MakeFullName(parentFullName : string, name : string) : string
    {
      MakeFullName(parentFullName, name, default(ImmutableArray[TypeSymbol]))
    }

    public MakeFullName[TTypeSymbol](declaredInOpt : ValueOption[DeclarationSymbol], name : string) : string
      where TTypeSymbol: TypeSymbol
    {
      MakeFullName(declaredInOpt, name, default(ImmutableArray[TypeSymbol]))
    }

    public MakeFullName[TTypeSymbol](declaredInOpt : ValueOption[DeclarationSymbol], name : string, args : ImmutableArray[TTypeSymbol]) : string
      where TTypeSymbol: TypeSymbol
    {
      when (declaredInOpt is VSome(declaredIn))
        when (declaredIn.IsFullNameEvaluated)
          return MakeFullName(declaredIn.FullName, name, args);

      MakeFullName(null, name, args);
    }

    public MakeFullName[TTypeSymbol](parentFullName : string, name : string, args : ImmutableArray[TTypeSymbol]) : string
      where TTypeSymbol: TypeSymbol
    {
      def result =
        if (string.IsNullOrEmpty(parentFullName))
          name
        else
          parentFullName + "." + name;

      if (args.IsDefaultOrEmpty)
        result
      else
        $<#$result<..$(args; ", "; MakeFullName)>#>
    }

    public MakeFullName[TTypeSymbol](parentFullName : string, name : string) : string
      where TTypeSymbol: TypeSymbol
    {
      MakeFullName(parentFullName, name, default(ImmutableArray[TypeSymbol]))
    }

    public IsSameIdentity(typeParametersCount : int, candidate : Declaration) : bool
    {
      match (candidate)
      {
        | DotNet.GenericType as t => t.TypeParameterAliases.Count == typeParametersCount
        | Namespace
        | _ is ExternalDeclaration[NamespaceSymbol]
        | Nitra.Declarations.Type => typeParametersCount == 0
        | _                       => false
      }
    }

    public CanMerge[T](typeParametersCount : int, candidate : Declaration) : bool
      where T : GenericType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == typeParametersCount
        | _ => false
      }
    }

     public CanMerge[T](symbol : GenericEntitySymbol, candidate : Declaration) : bool
      where T : GenericEntity
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == symbol.TypeParametersCount
        | _ => false
      }
    }

    public CanMerge[T](symbol : GenericContainerTypeSymbol, candidate : Declaration) : bool
      where T : GenericContainerType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == symbol.TypeParametersCount && symbol.IsPartial && genericType.IsPartial.ValueOrDefault
        | _ => false
      }
    }

    public FilterResolved(refs : ImmutableArray[Ref[DeclarationSymbol]]) : Seq[TypeSymbol]
    {
      def lst = List(refs.Length);

      foreach (r in refs)
      {
        def r2 = r.Resolve.[TypeSymbol]();
        when (r2.IsSymbolEvaluated)
          lst.Add(r2.Symbol);
      }

      lst
    }

    public CreateNestedConstructedTypeSymbol(t : NestedGenericTypeSymbol, parentTypeSubst : TypeSymbol, context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def resultSymbol       = NestedConstructedTypeSymbol();
      resultSymbol.Parent    = parentTypeSubst;
      resultSymbol.TypeSubst = resultSymbol;
      resultSymbol.TypeInfo  = t;
      resultSymbol.Args      = t.TypeParameters.CastArray();
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public CreateNestedConstructedTypeSymbol(_loc : Location, parentTypeSubst : TypeSymbol, typeInfo : GenericTypeSymbol, arguments : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      CreateNestedConstructedTypeSymbol(parentTypeSubst, typeInfo, arguments, context)
    }

    public CreateNestedConstructedTypeSymbol(parentTypeSubst : TypeSymbol, typeInfo : GenericTypeSymbol, arguments : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def resultSymbol       = NestedConstructedTypeSymbol();
      resultSymbol.Parent    = parentTypeSubst;
      resultSymbol.TypeSubst = resultSymbol;
      resultSymbol.TypeInfo  = typeInfo;
      resultSymbol.Args      = arguments;
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public CreateConstructedTypeSymbol(typeInfo : GenericTypeSymbol, arguments : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def resultSymbol      = TopConstructedTypeSymbol();
      resultSymbol.TypeInfo = typeInfo;
      resultSymbol.Args     = arguments;
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public CreateConstructedTypeSymbol(_loc : Location, typeInfo : GenericTypeSymbol, arguments : ImmutableArray[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      CreateConstructedTypeSymbol(typeInfo, arguments, context)
    }

    public MakeConstructedType(ast : ILocated, args : ImmutableArray[Ref[DeclarationSymbol]], context : DependentPropertyEvalContext) : ResolutionAlgorithm[DeclarationSymbol, DeclarationSymbol]
    {
      def loc = ast.Location;
      mutable resolvedArgs;
      def allArgumentsResolved = ResolveAll.[TypeSymbol, _](args, out resolvedArgs);
      fun (symbol)
      {
        def makeArguments(symbol : GenericTypeSymbol) : ImmutableArray[TypeSymbol]
        {
          def typeParameters = symbol.TypeParameters;
          unless (allArgumentsResolved)
          {
            foreach (arg when arg == null in resolvedArgs with index)
              resolvedArgs[index] = typeParameters[index];
          }

          foreach (tp is TypeParameterSymbol when tp.IsVarianceEvaluated in typeParameters with i)
          {
            if (tp.Variance == Variance.Covariant)
              resolvedArgs[i] = TypeUnifier.Instance.CreateTypeVar(resolvedArgs[i], null)
            else when (tp.Variance == Variance.Contravariant)
              resolvedArgs[i] = TypeUnifier.Instance.CreateTypeVar(null, resolvedArgs[i]);
          }
          resolvedArgs.MoveToImmutable()
        }

        match (symbol)
        {
          | symbol is NestedGenericTypeSymbol => VSome(CreateNestedConstructedTypeSymbol(loc, symbol.DeclaredIn.TypeSubst, symbol, makeArguments(symbol), context))
          | symbol is TopGenericTypeSymbol    => VSome(CreateConstructedTypeSymbol(loc, symbol, makeArguments(symbol), context))
          | _ => VNone()
        }
      }
    }

    public static ResolveAll[TSymbol, TRef](refs : ImmutableArray[TRef], result : out ImmutableArray[TSymbol].Builder) : bool
      where TSymbol : DeclarationSymbol
      where TRef    : IRef
    {
      mutable isResolvedAll = true;
      def symbols = ImmutableArray.CreateBuilder(refs.Length);
      foreach (r in refs with index)
      {
        def resolvedArg = r.Resolve.[TSymbol]();
        if (resolvedArg.IsSymbolEvaluated)
          symbols.Add(resolvedArg.Symbol)
        else
        {
          isResolvedAll  = false;
          symbols.Add(default(TSymbol));
        }
      }
      result = symbols;
      isResolvedAll
    }

    public GetTypeParametersCount(declaration : Declaration) : int
    {
      (declaration :> GenericEntity).TypeParameterAliases?.Count
    }

    public GetTypeParameter(alias : TypeParameterAlias, typeParameterSymbols : IList[TypeSymbol], IndexIn : int) : TypeParameterSymbol
    {
      def typeParameterSymbol = typeParameterSymbols[IndexIn] :> TypeParameterSymbol;
      typeParameterSymbol.AddAliasSymbol(alias);
      typeParameterSymbol
    }

    public NoTypeParameters : array[TypeParameterSymbol] = array(0);

    public CreateTypeParameters(context : DependentPropertyEvalContext, table : TableScope, aliases : DotNet.TypeParameterAlias.IAstList) : ImmutableArray[TypeSymbol]
    {
      def count : int = aliases.Count;
      if (count == 0)
        ImmutableArray.Empty
      else
      {
        def result = ImmutableArray.CreateBuilder(count);
        for (mutable i = 0; i < count; ++i)
        {
          def alias  = aliases[i];
          def name   = Name(alias.Name.Location);
          // TODO: Подумать не надо ли собрать все атрибуты, со всех частей вместо использования первого попавшегося alias.Attributes
          def decl   = TypeParameter(alias.Location, name, alias.Attributes, false);
          def symbol = table.Define.[TypeParameterSymbol](decl, context);
          symbol.Index = i;
          result.Add(symbol);
        }
        result.MoveToImmutable()
      }
    }

    public IsPartial(declarations : Seq[GenericContainerType]) : bool
    {
      declarations.FirstOrDefault()?.IsPartial.ValueOrDefault
    }

    public FilterDeclaredTypeSymbol(memberTable : TableScope) : IList[NestedTypeSymbol]
    {
      def symbols = memberTable.Symbols;
      symbols.SelectMany(s => s.OfType.[NestedTypeSymbol]()).ToArray()
    }

    public IsSubtypeOf[T1, T2](this symbol1 : T1, symbol2 : T2) : bool
      where T1: class, TypeSymbol
      where T2: class, TypeSymbol
    {
      assert2(symbol1 != null, "Symbol of type " + typeof(T1).Name + " is null!");
      assert2(symbol2 != null, "Symbol of type " + typeof(T2).Name + " is null!");
      TypeUnifier.Instance.TryRequire(symbol1, symbol2)
    }

    public Unify[T1, T2](this symbol1 : T1, symbol2 : T2) : bool
      where T1: class, TypeSymbol
      where T2: class, TypeSymbol
    {
      assert2(symbol1 != null, "Symbol of type " + typeof(T1).Name + " is null!");
      assert2(symbol2 != null, "Symbol of type " + typeof(T2).Name + " is null!");
      TypeUnifier.Instance.Unify(symbol1, symbol2)
    }

    public TryUnify[T1, T2](this symbol1 : T1, symbol2 : T2) : bool
      where T1: class, TypeSymbol
      where T2: class, TypeSymbol
    {
      assert2(symbol1 != null, "Symbol of type " + typeof(T1).Name + " is null!");
      assert2(symbol2 != null, "Symbol of type " + typeof(T2).Name + " is null!");
      TypeUnifier.Instance.TryUnify(symbol1, symbol2)
    }

    public MapParametersToTypes(parameters : ImmutableArray[FormalParameterSymbol], _dependence : TypeSymbol) : ImmutableArray[TypeSymbol]
    {
        def builder = ImmutableArray.CreateBuilder(parameters.Length);
        foreach (parameter in parameters)
        {
          if (parameter.IsTypeEvaluated)
            builder.Add(parameter.Type);
          else
            builder.Add(CreateFreeTypeVar());
        }

        builder.MoveToImmutable()
    }

    public IsExtensionMethod(parameters : ImmutableArray[FormalParameterSymbol]) : bool
    {
      when (parameters.IsEmpty)
        return false;
      if (parameters[0].IsModifierEvaluated)
        parameters[0].Modifier == ParameterModifier.This
      else
        false
    }

    public MakeFullName(symbol : DeclarationSymbol) : string
    {
      def declaredIn = if (symbol.IsDeclaredInOptEvaluated) symbol.DeclaredInOpt else VNone();
      match (symbol)
      {
        | GenericEntitySymbol as g when g.IsTypeParametersEvaluated => MakeFullName(declaredIn, symbol.InitialName, g.TypeParameters)
        | GenericEntitySymbol                                       => MakeFullName(declaredIn, symbol.InitialName) + "<not evaluated>"
        | _ => MakeFullName(declaredIn, if (symbol.IsNameValid) symbol.Name else symbol.ToString())
      }
    }
    
    public FunctionalToString(symbol : FunctionalSymbol) : string
    {
      $<#$(symbol.FullName)(..$(symbol.Parameters)) : $(symbol.ReturnType)#>
    }

    public FormalParameterToString(symbol : FormalParameterSymbol) : string
    {
      $<#$(symbol.InitialName) : $(symbol.Type)#>
    }
  } // module
} // namespace
