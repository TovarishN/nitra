using Nitra.Declarations;

using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace DotNet
{
  [Record]
  public class TypeUnifier : Nitra.Declarations.TypeUnifier[DotNetDependentPropertyEvalContext]
  {
    protected override IsSubtypeUnwraped(subtype : TypeSymbol, supertype : TypeSymbol) : bool
    {
      when (supertype : object == PlatformTypes.Object)
        return true;

      when (subtype is SupportsInheritanceTypeSymbol(IsBaseTypeSetEvaluated=true, BaseTypeSet=baseTypeSet))
        return baseTypeSet.AncestorTypes.Contains(supertype);

      false
    }
  }
}
