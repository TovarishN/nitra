using Nitra;
using Nitra.Declarations;
using System.Linq;

namespace DotNet
{
  abstract ast QualifiedReference : BindableAst
  {
  stage 1:
    in  Arity   : int = 0;
    in  NameScopeFactory : ScopeFactory = ScopeFactories.Default;
    out Ref     : Ref[DeclarationSymbol];

    | Simple
      {
        Name.Scope  = NameScopeFactory(Scope);
        Ref         = Name.Ref.Resolve(AstUtils.TypeOverloadResolution(Arity));

        Name : Reference;
      }

    | Aliased
      {
        // TODO: https://gist.github.com/VladD2/8eee961759409ebdd2e71f613b7696ab
        //Alias.Scope         = // TODO: set global aliases scope
        QualifiedName.Arity = 0;
        QualifiedName.Scope = Scope; // TODO: get scope from Alias
        Ref                 = QualifiedName.Ref;

        Alias         : Reference;
        QualifiedName : QualifiedReference;
      }

    | Qualified
      {
        Qualifier.Arity = 0;
        Qualifier.Scope = Scope;
        Name.Scope      = NameScopeFactory(Qualifier.Ref.Scope);
        Ref             = Name.Ref.Resolve(AstUtils.TypeOverloadResolution(Arity));

        Qualifier : QualifiedReference;
        Name      : Reference;
      }

    | Generic
      {
        QualifiedName.NameScopeFactory = NameScopeFactory;
        Arguments.Arity                = 0;
        QualifiedName.Arity            = Arguments.Count;
        QualifiedName.Scope            = Scope;
        Arguments.Scope                = Scope;
        Ref                            = QualifiedName.Ref.Resolve(AstUtils.MakeConstructedType(this, Arguments.Ref, context));

        QualifiedName : QualifiedReference;
        Arguments     : QualifiedReference*; // TODO: change to  QualifiedReference+
      }

    | Open
      {
        QualifiedName.NameScopeFactory = NameScopeFactory;
        QualifiedName.Arity            = Rank.Value;
        QualifiedName.Scope            = Scope;
        Ref                            = QualifiedName.Ref;

        QualifiedName : QualifiedReference;
        Rank          : int;
      }
  }
}
