using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

using System.Linq;
using System.Collections.Immutable;
using SCG = System.Collections.Generic;

namespace DotNet
{

  abstract declaration GenericEntity : BindableAst, Container
  {
    symbol
    {
      in TypeParametersCount : int;
      in TypeParameters      : ImmutableArray[TypeSymbol];
    }


    // Local scope. Type parameters can have different names. We should use alias to reflect it.
    out TypeParameterAliasesScope : TableScope = TableScope("type parameters");

    Symbol.TypeParametersCount                      = TypeParameterAliases.Count;
    Symbol.TypeParameters                           = AstUtils.CreateTypeParameters(context, Symbol.MemberTable, TypeParameterAliases);
    TypeParameterAliases.TypeParameterSymbols       = Symbol.TypeParameters;
    TypeParameterAliases.IndexIn                    = 0;
    TypeParameterAliases.ContainingTable            = TypeParameterAliasesScope;
    TypeParameterAliases.Scope                      = Scope;
    TypeParameterConstraints.Scope                  = Scope.HideWith(TypeParameterAliasesScope);
    TypeParameterConstraints.ConstraintedParameters = SCG.HashSet();
    TypeParameterAliases.DeclaringMember            = Symbol;

    TypeParameterAliases     : TypeParameterAlias*;
    TypeParameterConstraints : TypeParameterConstraintsClause*;
  }

  // delegate, class, struct or interface
  abstract declaration GenericType : DeclaredType, GenericEntity
  {
    symbol
    {
    }
  }
}
