using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

namespace DotNet
{
  declaration FormalParameter : CustomAttributeHostDeclaration
  {
    symbol
    {
      // TODO: add support of optional, custom modifiers, index and default value
      Kind      = "parameter";
      SpanClass = DotNetLang.ParameterSpanClass;

      Scope     = Type.Scope;

      in Type     : TypeSymbol;
      in Modifier : ParameterModifier;
      in Index    : uint;
      in Default  : DefaultValue;
    }

    inout Index      : uint;
    in    TypeRef    : Ref[TypeSymbol];
    inout Parameters : list[FormalParameterSymbol];
    inout Types      : list[TypeSymbol];

    IndexOut        = IndexIn + 1u;
    Type.Scope      = Scope;
    TypeRef         = Type.Ref.Resolve();
    Symbol.Type     = TypeRef.Symbol;
    Symbol.Modifier = Modifier.ValueOrDefault;
    Symbol.Index    = IndexIn;
    ParametersOut   = Symbol :: ParametersIn;
    TypesOut        = Symbol.Type :: TypesIn;
    Symbol.Default  = AstUtils.MakeDefault(Default);

    Type     : QualifiedReference;
    Modifier : ParameterModifier;
    Default  : ExprBase;  }
}
