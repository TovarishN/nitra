using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

namespace DotNet
{
  declaration FormalParameter : TypedDeclaration, CustomAttributeHostDeclaration
  {
    symbol
    {
      // TODO: add support of optional, custom modifiers, index and default value
      Kind      = "parameter";
      SpanClass = DotNetLang.ParameterSpanClass;

      in Modifier : ParameterModifier;
      in Index    : uint;
      in Default  : DefaultValue;
    }

    inout Index      : uint;
    inout Parameters : list[FormalParameterSymbol];
  stage 1:
    inout Types      : list[TypeSymbol];

    IndexOut             = IndexIn + 1u;
    Type.Scope           = Scope;
    TypeRef              = Type.Ref.Resolve();
    Symbol.Type          = TypeRef.Symbol;
    Symbol.Modifier      = Modifier.ValueOrDefault;
    Symbol.Index         = IndexIn;
    ParametersOut        = Symbol :: ParametersIn;
    TypesOut             = Symbol.Type :: TypesIn;
    Symbol.Default       = AstUtils.MakeDefault(Default);
    Default.ExpectedType = TypeRef.Symbol;
    Default.ScopeIn      = Scope;

    Type     : QualifiedReference;
    Modifier : ParameterModifier;
    Default  : ExprBase;
  }
}
