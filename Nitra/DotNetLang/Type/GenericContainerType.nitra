using DotNet;

using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

using System.Linq;
using SCG = System.Collections.Generic;

namespace DotNet
{
  // class, struct or interface
  abstract declaration GenericContainerType : GenericType, DeclaredType, SupportsInheritanceType
  {
    symbol
    {
      SpanClass = DotNetLang.TypeSpanClass;

      out IsPartial          : bool             = AstUtils.IsPartial(this.Declarations);
      in  HasExtensionMethod : bool;
    stage 1:
      in NestedTypes : SCG.IList[NestedTypeSymbol];
    }

    Symbol.BaseTypeSet           |= AstUtils.FilterResolved(TypeBase.Ref);
    TypeBase.Scope               = TypeParameterConstraints.Scope;
    Members.DeclaredIn           = Symbol;
    Members.HasExtensionMethodIn = false;
    Symbol.HasExtensionMethod    = Members.HasExtensionMethodOut;
    Symbol.NestedTypes           = AstUtils.FilterDeclaredTypeSymbol(Symbol.MemberTable);


    Members                  : TypeMember*;
    IsPartial                : bool;
  }

  abstract declaration TopType : DeclaredType, NamespaceMemberDeclaration
  {
  }

  abstract declaration TopGenericType : GenericType, TopType
  {
    symbol
    {
      FullName  = AstUtils.MakeFullName(DeclaredIn.FullName, this.Name, TypeParameters);
    }
  }

  abstract declaration NestedType : DeclaredType, TypeMember
  {
  }

  abstract declaration NestedGenericType : GenericType, NestedType
  {
    symbol
    {
      FullName  = AstUtils.MakeFullName(DeclaredIn.FullName, this.Name, TypeParameters);
      TypeSubst = AstUtils.CreateNestedConstructedTypeSymbol(this, this.DeclaredIn.TypeSubst, context);
    }
  }

  abstract declaration Class     : GenericContainerType
  {
    symbol
    {
      Kind  = "class";
      Scope = BaseTypeSet.ParentClassScope.HideWith(MemberTable);
    }

    Members.Scope = Scope.HideWith(Symbol.BaseTypeSet.ParentClassScope)
                         .HideWith(TypeParameterAliasesScope)
                         .HideWith(Symbol.MemberTable);
  }

  abstract declaration Struct    : GenericContainerType
  {
    symbol
    {
      Kind  = "struct";
      Scope = BaseTypeSet.ParentStructScope.HideWith(MemberTable);
    }

    Members.Scope = Scope.HideWith(Symbol.BaseTypeSet.ParentStructScope)
                         .HideWith(TypeParameterAliasesScope)
                         .HideWith(Symbol.MemberTable);
  }

  abstract declaration Interface : GenericContainerType
  {
    symbol
    {
      Kind  = "interface";
      Scope = BaseTypeSet.ParentInterfaceScope.HideWith(MemberTable);
    }

    Members.Scope = Scope.HideWith(Symbol.BaseTypeSet.ParentInterfaceScope)
                         .HideWith(TypeParameterAliasesScope)
                         .HideWith(Symbol.MemberTable);
  }

  abstract declaration TopGenericContainerType : GenericContainerType, TopGenericType, TopType
  {
  }

  declaration TopClass             : Class,     TopGenericContainerType
  {
    symbol
    {
      IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate);
      CanMerge       = AstUtils.CanMerge.[TopClass       ](this, candidate);
      //MakeHint       = "<keyword>class</keyword> " + AstUtils.Combine(DeclaredIn, this);
    }
  }
  declaration NestedClass          : Class,     NestedGenericType       { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[NestedClass    ](this, candidate); } }
  declaration TopStruct            : Struct,    TopGenericContainerType { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[TopStruct      ](this, candidate); } }
  declaration NestedStruct         : Struct,    NestedGenericType       { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[NestedStruct   ](this, candidate); } }
  declaration TopInterface         : Interface, TopGenericContainerType { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[TopInterface   ](this, candidate); } }
  declaration NestedInterface      : Interface, NestedGenericType       { symbol { IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate); CanMerge = AstUtils.CanMerge.[NestedInterface](this, candidate); } }

  abstract declaration Array : TopGenericType, SupportsInheritanceType
  {
    symbol
    {
      in Rank : uint;

      Kind  = "array";
      Scope = EmptyScope.Instance; // TODO: make pseudo scope
    }

    // TODO: make real inheritors list for array
    Symbol.BaseTypeSet |= AstUtils.FilterResolved(TypeBase.Ref);
  }
  declaration SingleDimensionArray : Array
  {
    symbol
    {
      Rank = 1u;
      IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate);
      CanMerge = false;
    }
  }
  declaration MultiDimensionArray  : Array
  {
    symbol
    {
      //in LowerBounds : SCG.IList[int]   = array(0);
      //in Sizes       : SCG.IList[ulong] = array(0);

      IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate);
      CanMerge = false;
    }
  }
}
