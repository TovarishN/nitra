using Nitra;
using Nitra.Declarations;

using Nemerle.Collections;

using SCG = System.Collections.Generic;

namespace DotNet
{
  ast TypeParameterConstraintsClause : BindableAst
  {
  stage 1:
    out Ref   : Ref[TypeParameterAliasSymbol];

    in  ConstraintedParameters : SCG.HashSet[TypeParameterAliasSymbol];
    out IsSingleClause         : bool = ConstraintedParameters.Add(Ref.Symbol);

    ParameterName.Scope                    = Scope;
    Constraints.Scope                      = Scope;
    Constraints.TypeConstraints            = TypeConstraintSet(context);
    Constraints.ConstraintIndexIn          = 0;
    Constraints.ConstraintCount            = Constraints.Count;

    Ref                         = ParameterName.Ref.Resolve.[TypeParameterAliasSymbol]();
    Ref.Symbol.TypeParameter.TypeConstraints |= Constraints.TypeConstraints;

    ParameterName : Reference;
    Constraints   : TypeParameterConstraint*; // TODO: make TypeParameterConstraint+

    decompose Constraints
    {
      Class  : TypeParameterConstraint.Class?;
      Struct : TypeParameterConstraint.Struct?;
      Ctor   : TypeParameterConstraint.Ctor?;
      Bases  : TypeParameterConstraint.Base*;
    }

    unless (Constraints.TypeConstraints.IsEmpty || Constraints.TypeConstraints.Equals(Ref.Symbol.TypeParameter.TypeConstraints))
      Error(context, "Partial declarations of type have conflicting type parameter constraints.");

    unless (IsSingleClause)
      Error(context, $"A constraint clause has already been specified for type parameter '$(Ref.Name)'. All of the constraints for a type parameter must be specified in a single where clause.");

    // constraint  Class && !Struct || Struct && !Class || !Struct && !Class
    // constraint  Ctor && !Struct
  }
}
