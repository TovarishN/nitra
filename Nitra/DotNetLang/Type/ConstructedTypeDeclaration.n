using Nitra.ProjectSystem;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  public class ConstructedTypeDeclaration[TSymbol] : DeclarationBase, Declaration
    where TSymbol: DeclarationSymbol
  {
    public this(location : Location, name : string)
    {
      this(Name(location, name))
    }

    public this(name : Name)
    {
      Source     = name.Source;
      Span       = name.Span;
      __NameImpl = name;
    }

    public Name                       : Name              { get { __NameImpl } }
    public IsSymbolEvaluated          : bool              { get { __NameImpl.IsSymbolEvaluated } }
    public Symbol                     : TSymbol
    {
      get { __NameImpl.Symbol :> TSymbol }
      set { __NameImpl.Symbol = value }
    }
    public ResetSymbol() : void { }

    set_Symbol(value : DeclarationSymbol) : void implements Declaration.set_Symbol
    {
      Symbol = value :> TSymbol
    }

    public IsContainingTableEvaluated : bool { get { false } }
    public ContainingTable : TableScope
    {
      get { throw NotImplementedException() }
      set { IgnoreParams(); throw NotImplementedException() }
    }
    public ResetContainingTable() : void { }
    public ContainingTable_Location : string * int * int { get; set; }
    public Symbol_Location : string * int * int { get; set; }

    public override IsParsed : bool { get { true } } // ???

    public override CreateSymbol() : DeclarationSymbol
    {
      throw NotImplementedException()
    }

    public override Accept(visitor : IAstVisitor) : void
    {
      visitor.Visit(Name);
    }

    public override ToXaml() : string
    {
      Name.ToXaml()
    }

    public DefineSymbol(_containingScope : TableScope = null) : TSymbol
    {
      throw NotImplementedException();
    }
  }
}
