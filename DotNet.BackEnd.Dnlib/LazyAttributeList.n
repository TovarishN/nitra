using DotNet;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.BackEnd.Dnlib;
using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

using dnlib.DotNet;

namespace Nitra.BackEnd.Dnlib
{
  [Record]
  public sealed class LazyAttributeList : LazyList[DeclarationSymbol]
  {
    _attributeHost : IHasCustomAttribute;
    _backEnd       : DnlibBackEnd;

    protected override OnLoad() : void
    {
      def count   = _attributeHost.CustomAttributes.Count;
      def builder = ImmutableArray.CreateBuilder.[DeclarationSymbol](count);
      def context = DependentPropertyEvalContext(null);

      foreach (attr in _attributeHost.CustomAttributes)
        builder.Add(_backEnd.LoadCustomAttribute(attr, context));

      _list = builder.MoveToImmutable();
    }
  }
}
