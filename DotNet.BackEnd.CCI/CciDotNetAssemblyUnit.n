using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Microsoft.Cci;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.BackEnd.Cci
{
  class CciDotNetAssemblyUnit : DotNetUnit
  {
    public Assembly : IAssembly { get; }
    public NeedLoadSymbols : bool { get; set; }
    public InDependencyGraph : bool { get; set; }

    public this(assembly : IAssembly, needLoadSymbols : bool)
    {
      this.Assembly        = assembly;
      this.NeedLoadSymbols = needLoadSymbols;
    }

    public IsSymbolsLoaded : bool { get { RootNamespace != null } }

    public SetRootNamespace(rootNamespace : NamespaceSymbol) : void
    {
      this.RootNamespace = rootNamespace;
    }

    public override Equals(obj : object) : bool
    {
      | _ when this : object == obj => true
      | other is CciDotNetAssemblyUnit => this.Assembly.Equals(other.Assembly)
      | _ => false
    }

    public override GetHashCode() : int
    {
      this.Assembly.GetHashCode()
    }

    public override ToString() : string
    {
      this.Assembly.Name.Value
    }
  }
}
