using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;
using Nitra.ProjectSystem;

using Microsoft.Cci;

using System;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Collections.Immutable;
using System.Linq;

using System.Threading;
using NRB = Nitra.Declarations;

namespace Nitra.BackEnd.Cci
{
  class CciHost : PeReader.DefaultHost
  {
    public this()
    {
      base(NameTable());
    }

    public override OpenBinaryDocument(sourceDocument : IBinaryDocument) : IBinaryDocumentMemoryBlock
    {
      def binDocMemoryBlock = UnmanagedBinaryMemoryBlock.CreateUnmanagedBinaryMemoryBlock(sourceDocument.Location, sourceDocument);
      this.disposableObjectAllocatedByThisHost.Add(binDocMemoryBlock);
      binDocMemoryBlock
    }

    public override OpenBinaryDocument(parentSourceDocument : IBinaryDocument, childDocumentName : string) : IBinaryDocumentMemoryBlock
    {
      def directory         = Path.GetDirectoryName(parentSourceDocument.Location) ?? "";
      def fullPath          = Path.Combine(directory, childDocumentName);
      def newBinaryDocument = BinaryDocument.GetBinaryDocumentForFile(fullPath, this) : IBinaryDocument;
      def binDocMemoryBlock = UnmanagedBinaryMemoryBlock.CreateUnmanagedBinaryMemoryBlock(newBinaryDocument.Location, newBinaryDocument);
      this.disposableObjectAllocatedByThisHost.Add(binDocMemoryBlock);
      binDocMemoryBlock
    }
  }
}
