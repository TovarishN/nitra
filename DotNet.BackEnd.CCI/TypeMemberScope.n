using DotNet;

using Microsoft.Cci;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;
using Nitra.Serialization2;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.BackEnd.Cci
{
  public class TypeMemberScope : TableScope
  {
    _cciBackEnd : CciBackEnd;
    mutable _isLoaded : bool;

    public this(owner : ContainerSymbol, name : string, cciBackEnd : CciBackEnd)
    {
      base(owner, name);
      _cciBackEnd = cciBackEnd;
    }

    Load() : void
    {
      _isLoaded = true;
      def context = DependentPropertyEvalContext(null);
      def owner = Owner :> ContainerSymbol;
      def type = (owner.FirstDeclarationOrDefault :> IExternalTypeDeclaration).Type;
      def props = List();
      def methods = Dictionary();

      def getTypeScope(type : TypeSymbol) {
        | x is TopConstructedTypeSymbol => x.TypeInfo.Scope
        | _ => type.Scope
      }

      foreach (m in type.Members)
      {
        | _ is ITypeDefinition => ()
        | member =>
          def symbol = _cciBackEnd.LoadTypeMembers(member, owner, context);

          match (member, symbol)
          {
            | (member is IPropertyDefinition, propSymbol is Member.PropertySymbol) =>
              // Remember property for getter/setter resolution
              props.Add((member, propSymbol));

              // Link Type scope to property Scope
              propSymbol.Scope = getTypeScope(propSymbol.Type);
            | (_ is IFieldDefinition, fieldSymbol is Member.FieldSymbol) =>
              // Link Type scope to field Scope
              fieldSymbol.Scope = getTypeScope(fieldSymbol.Type);
            | (_, symbol is Member.MethodSymbol) =>
              // Save methods for getter/setter resolution
              // don't care about overloads, since this is for properties
              methods[member.Name.UniqueKey] = symbol;
              symbol.Scope = getTypeScope(symbol.ReturnType);
            | _ => ()
          }
      }

      foreach((propDef, propSym) in props) {
        propSym.Getter = if (propDef.Getter != null) Some(methods[propDef.Getter.Name.UniqueKey]) else None();
        propSym.Setter = if (propDef.Setter != null) Some(methods[propDef.Setter.Name.UniqueKey]) else None();
      }
    }

    public override AllSymbols : Seq[DeclarationSymbol]
    {
      get
      {
        unless (_isLoaded) Load();
        base.AllSymbols
      }
    }

    public override Symbols : Hashtable[int, list[DeclarationSymbol]].ValueCollection
    {
      get
      {
        unless (_isLoaded) Load();
        base.Symbols
      }
    }

    public override Define[TSymbol](declaration : Declaration, context : DependentPropertyEvalContext, name : Name = null) : TSymbol
    {
      unless (_isLoaded) Load();
      base.Define(declaration, context, name)
    }

    public override Bind[TSymbol](isMatch : Predicate[TSymbol]) : BindResult[TSymbol]
    {
      unless (_isLoaded) Load();
      base.Bind(isMatch)
    }

    public override Bind[TSymbol](reference : Reference) : BindResult[TSymbol]
    {
      unless (_isLoaded) Load();
      base.Bind(reference)
    }

    public override ToDot(nodeToIdMap : Dictionary[object, int], nodes : List[string], _edges : List[string]) : void
    {
      unless (_isLoaded) Load();
      base.ToDot(nodeToIdMap, nodes, _edges)
    }

    public override Serialize(writer : BinaryWriter, metadataWriter : MetadataWriter) : void
    {
      assert(false)
    }

    public static Deserialize(_reader : BinaryReader, _metadataReader : MetadataReader) : this
    {
      assert(false, "TypeMemberScope must be used only in backend")
    }
  }
}
