using DotNet;

using Microsoft.Cci;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.BackEnd.Cci
{
  public class TypeMemberScope : TableScope
  {
    _cciBackEnd : CciBackEnd;
    mutable _isLoaded : bool;
    
    public this(title : string, owner : ContainerSymbol, cciBackEnd : CciBackEnd)
    {
      base(title, owner);
      _cciBackEnd = cciBackEnd;
    }
    
    public override Symbols : Hashtable[int, list[DeclarationSymbol]].ValueCollection
    {
      get
      {
        unless (_isLoaded)
          Load();
        base.Symbols
      }
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      unless (_isLoaded)
        Load();
      base.BindMany(reference, ref results);
    }
    
    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      unless (_isLoaded)
        Load();
      base.FindMany(predicate, ref results)
    }
    
    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      unless (_isLoaded)
        Load();
        
      base.MakeCompletionList(prefix)
          .Where(s => !(s is Member.ConstructorSymbol))
    }

    Load() : void
    {
      _isLoaded = true;
      def context = DependentPropertyEvalContext();
      def owner = Owner :> ContainerSymbol;
      def type = (owner.FirstDeclarationOrDefault :> IExternalTypeDeclaration).Type;
      def props = List();
      def methods = Dictionary();
      
      def getTypeScope(type : TypeSymbol) {
        | x is TopConstructedTypeSymbol => x.TypeInfo.Scope
        | _ => type.Scope
      }
      
      foreach (m in type.Members)
      {
        | _ is ITypeDefinition => ()
        | member => 
          def symbol = _cciBackEnd.LoadTypeMembers(member, owner, context);
          
          match (member, symbol) 
          {
            | (member is IPropertyDefinition, propSymbol is Member.PropertySymbol) => 
              // Remember property for getter/setter resolution
              props.Add((member, propSymbol)); 
              
              // Link Type scope to property Scope
              propSymbol.Scope = getTypeScope(propSymbol.Type);
            | (_ is IFieldDefinition, fieldSymbol is Member.FieldSymbol) =>
              // Link Type scope to field Scope
              fieldSymbol.Scope = getTypeScope(fieldSymbol.Type);
            | (_, symbol is Member.MethodSymbol) => 
              // Save methods for getter/setter resolution
              // don't care about overloads, since this is for properties
              methods[member.Name.UniqueKey] = symbol; 
              symbol.Scope = getTypeScope(symbol.ReturnType);
            | _ => ()
          }
      }
      
      foreach((propDef, propSym) in props) {
        propSym.Getter = if (propDef.Getter != null) Some(methods[propDef.Getter.Name.UniqueKey]) else None();
        propSym.Setter = if (propDef.Setter != null) Some(methods[propDef.Setter.Name.UniqueKey]) else None();
      }
    }
  }
}
