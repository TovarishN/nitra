using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.BackEnd.Cci
{
  public partial class CciBackEnd : IBackEnd
  {
    private class PlatformTypeImpl : IPlatformType
    {
      public this(cciBackEnd : CciBackEnd)
      {
        def types = cciBackEnd.CciHost.PlatformType;
        Object = cciBackEnd._objectSymbol;
        def symbolMap = cciBackEnd._cciInternedKeyToSymbolMap;
        def getType(cciType)
        {
          mutable typeSymbol;
          def res = symbolMap.TryGetValue(cciType.InternedKey, out typeSymbol);
          assert2(res);
          typeSymbol
        }

        Void    = getType(types.SystemVoid.ResolvedType);
        Type    = getType(types.SystemType.ResolvedType);
        String  = getType(types.SystemString.ResolvedType);
        Char    = getType(types.SystemChar.ResolvedType);
        Byte    = getType(types.SystemUInt8.ResolvedType);
        SByte   = getType(types.SystemInt8.ResolvedType);
        Int16   = getType(types.SystemInt16.ResolvedType);
        Int32   = getType(types.SystemInt32.ResolvedType);
        Int64   = getType(types.SystemInt64.ResolvedType);
        UInt16  = getType(types.SystemUInt16.ResolvedType);
        UInt32  = getType(types.SystemUInt32.ResolvedType);
        UInt64  = getType(types.SystemUInt64.ResolvedType);
        Single  = getType(types.SystemFloat32.ResolvedType);
        Double  = getType(types.SystemFloat64.ResolvedType);
        Decimal = getType(types.SystemDecimal.ResolvedType);
        Boolean = getType(types.SystemBoolean.ResolvedType);
      }

      public CreateFreeTypeVar() : TypeSymbol { TypeUnifier.Instance.CreateFreeTypeVar() }

      public Void    : TypeSymbol { get; }
      public Object  : TypeSymbol { get; }
      public Type    : TypeSymbol { get; }
      public String  : TypeSymbol { get; }
      public Char    : TypeSymbol { get; }
      public Byte    : TypeSymbol { get; }
      public SByte   : TypeSymbol { get; }
      public Int16   : TypeSymbol { get; }
      public Int32   : TypeSymbol { get; }
      public Int64   : TypeSymbol { get; }
      public UInt16  : TypeSymbol { get; }
      public UInt32  : TypeSymbol { get; }
      public UInt64  : TypeSymbol { get; }
      public Single  : TypeSymbol { get; }
      public Double  : TypeSymbol { get; }
      public Decimal : TypeSymbol { get; }
      public Boolean : TypeSymbol { get; }
    } // class PlatformType
  } // class CciBackEnd
} // namespace
