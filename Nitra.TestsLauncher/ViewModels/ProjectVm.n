using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.ClientServer.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.ObjectModel;
using System.IO;

namespace Nitra.ViewModels
{
  public class ProjectVm : FolderVm[FileVm], IClientHost, IDisposable
  {
    mutable         _client     : NitraClient;

    public          Solution    : SolutionVm { get; private set }
    public override Hint        : string { get { "Project" }}

    public Remove(): void {}
    public Update(_code: string, _gold: string): void {}

    public this(suite: SuiteVm, solution: SolutionVm, folder: string)
    {
      base(suite, folder);
      Solution = solution;
      LoadTests()
    }
    
    public IsSingleFileTest : bool { get { Children.Count == 1 } }

    public override Name : string { get { Path.GetFileName(FullPath) + "  (Project)" }}
    
    LoadTests() : void
    {
      foreach (filePath in Directory.GetFiles(FullPath).Where(f => !Path.GetExtension(f).Equals(".gold", StringComparison.InvariantCultureIgnoreCase)).OrderBy(x => x))
        Children.Add(FileVm(Suite, this, filePath));
    }
    
    // IClientHost
    public Activate([NotNull] client : NitraClient) : void
    {
      _client = client;
      // TODO: send messages to server
    }

    // IClientHost
    public Deactivate() : void
    {
      // TODO: send messages to server
      _client = null;
    }
 
    public override GetAllTests() : Seq[FileVm]
    {
      Children
    }
    
    public Dispose() : void 
    {
      foreach(test in Children)
        test.Dispose();
      Children.Clear();
      _client = null;
    }
  }
}