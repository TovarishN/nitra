using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Client;
using Nitra.ClientServer.Messages;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

namespace Nitra.ViewModels
{
  public class SolutionVm : FolderVm[ProjectVm], IClientHost, IDisposable
  {
    public          Id             : SolutionId     { get; protected set; }
    mutable         _client        : NitraClient;
    //mutable         _nextProjectId : int;
    //mutable         _nextTestId    : int;
    public override Hint           : string
    {
      get { if (IsSingleFileTest) Children[0].Children[0].Hint else "Multifile Solution" }
    }

    public this(suite : SuiteVm, fullPath : string)
    {
      base(suite, fullPath);
      when (suite != null)
        Id = SolutionId(suite.Workspace.StringManager[fullPath]);
      LoadProjects();
      when (IsSingleFileTest)
        IsExpanded = false;
    }

    public IsSingleFileTest : bool { get { Children.Count == 1 && Children[0].Children.Count == 1 } }

    public override Name : string { get { Path.GetFileName(FullPath) + "  (Solution)" }}

    LoadProjects() : void
    {
      foreach (dir in Directory.GetDirectories(FullPath).OrderBy(x => x))
        Children.Add(ProjectVm(Suite, this, dir));
    }

    public GetFile(fileId : int) : FileVm
    {
      // TODO: use Haschtable
      foreach (test when test.Id == fileId in GetAllTests())
        return test;

      assert2(false);
      assert(false);
    }

    // IClientHost
    public Activate(client : NitraClient) : void
    {
      _client = client;
      def config = this.Suite.GetConfigWithFullPaths();
      def references = config.References;
      unless (File.Exists(config.ProjectSupport.Path))
        return;
      client.Send(ClientMessage.SolutionStartLoading(Id, FullPath));
      foreach(project in Children)
      {
        def projectId = project.Id;
        client.Send(ClientMessage.ProjectStartLoading(projectId, project.FullPath, config));

        when (references != null)
          foreach (reference in references)
            client.Send(ClientMessage.ReferenceLoaded(projectId, reference));

        foreach(test in project.Children)
          client.Send(ClientMessage.FileLoaded(project.Id, test.FullPath, test.Id, test.Version));

        client.Send(ClientMessage.ProjectLoaded(project.Id));
      }
      client.Send(ClientMessage.SolutionLoaded(Id));
      client.Flush();
    }

    // IClientHost
    public Deactivate() : void
    {
      Suite.Client.Send(ClientMessage.SolutionUnloaded(Id));
      _client = null;
    }

    public override GetAllTests() : Seq[FileVm]
    {
      foreach (p in Children)
        foreach (t in p.Children)
          yield t;
    }

    public Dispose() : void
    {
      foreach (project in Children)
        project.Dispose();
      Children.Clear();
      _client = null;
    }
  }
}
