using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ClientServer.Client;
using Nitra.ClientServer.Messages;
using System;

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Console;
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading;

using System.Windows;
using IOFile = System.IO.File;

namespace Nitra.ViewModels
{
  public class FileVm : BaseVm, IClientHost, IDisposable
  {
    public        Id                       : FileId { get; protected set; }
    mutable       _client                  : NitraClient;
    public static TypingMsg                : Guid = Guid.NewGuid();
    public        Project                  : ProjectVm { get; private set }
    mutable       _isBatchCodeUpdate       : bool;
                  _batchFileChanges        : List[FileChange] = List();
    public        ParsingMessages          : array[CompilerMessage] { get; set; default array(0); }
    public        SemanticAnalysisMessages : array[CompilerMessage] { get; set; default array(0); }
    public        Version                  : FileVersion { get; private set; }
    public        IsDirty                  : bool { get; private set; }
    mutable       _code                    : string;
    mutable       _completeWordPosOpt      : int = -1;

    public this(suite: SuiteVm, project : ProjectVm, fullPath : string)
    {
      base(suite, fullPath);
      when (suite != null)
        Id = FileId(suite.Workspace.StringManager[fullPath]);
      Project = project;
      Statistics = Statistics();
    }

    public Code              : string
    {
      get
      {
        when (_code == null)
          _code = File.ReadAllText(FullPath, Encoding.UTF8);
        _code
      }
      set { _code = value; IsDirty = true; Version = FileVersion(); }
    }

    public Gold              : string
    {
      get { File.ReadAllText(GoldFullPath, Encoding.UTF8) }
      set { File.WriteAllText(GoldFullPath, value, Encoding.UTF8) }
    }

    public GoldFullPath      : string { [Memoize] get { Path.ChangeExtension(FullPath, ".gold") } }
    public PrettyPrintResult : string { get; private set }
    public Exception         : Exception { get; private set }
    public TestTime          : TimeSpan { get; private set }
    public Statistics        : Statistics { get; private set }
    public override Name     : string
    {
      get { Path.GetFileName(FullPath) }
      set
      {
        def dir         = Path.GetDirectoryName(FullPath);
        def newFullPath = Path.Combine(dir, value);
        File.Move(FullPath, newFullPath);
        def client = Suite.Client;
        def sm     = Suite.Workspace.StringManager;
        def newId  = FileId(sm.GetId(newFullPath));
        client.Send(ClientMessage.FileRenamed(Id, newId, newFullPath));
        Id = newId;
      }
    }
    public override Hint   : string { get { "Id=" + Id + " Path='" + FullPath + "'" + Environment.NewLine + Code } }
    public IsEditing       : bool
    {
      mutable _isEditing : bool;
      get { _isEditing }
      set
      {
        _isEditing = value;
        OnPropertyChanged("IsEditing");
        OnPropertyChanged("LabelVisibility");
        OnPropertyChanged("TextVisibility"); }
    }
    public LabelVisibility : Visibility { get { if (IsEditing) Visibility.Visible else Visibility.Hidden  } }
    public TextVisibility  : Visibility { get { if (IsEditing) Visibility.Hidden  else Visibility.Visible } }

    public SetRecoveryAlgorithm(_recoveryAlgorithm: RecoveryAlgorithm = RecoveryAlgorithm.Smart) : void
    {
      throw NotImplementedException()
    }

    // IClientHost
    public Activate([NotNull] client : NitraClient) : void
    {
      _client = client;
      client.Send(ClientMessage.FileActivated(Project.Id, Id, this.Version))
    }

    // IClientHost
    public Deactivate() : void
    {
      Save();
      when (_client == null)
        return;

      _client.Send(ClientMessage.FileDeactivated(Project.Id, Id));
      Dispose();
    }

    public Save() : void
    {
      when (IsDirty)
      {
        File.WriteAllText(FullPath, Code, Encoding.UTF8);
        IsDirty = false;
        _client.Send(ClientMessage.FileSaved(Id, Version));
      }
    }

    public StartBatchCodeUpdate() : void
    {
      _isBatchCodeUpdate = true;
    }

    public FinishBatchCodeUpdate(caretPos : int) : void
    {
      _isBatchCodeUpdate = false;
      when (_batchFileChanges.Count > 0)
      {
        _client.Send(ClientMessage.FileChangedBatch(Id, Version, _batchFileChanges.ToImmutableArray(), VersionedPos(caretPos, Version)));
        _batchFileChanges.Clear();
      }
    }

    public OnTextChanged(version : FileVersion, inserted : string, insertionLength : int, offset : int, removalLength : int, newTextOpt : string, caretPos : int) : void
    {
      Debug.WriteLine($"version=$version, offset=$offset, isBatch=$_isBatchCodeUpdate, inserted='$inserted' ($insertionLength) ($removalLength)");
      when (newTextOpt != null)
        _code = newTextOpt;
      Version = version;
      IsDirty = true;
      def change =
        if (insertionLength == 0 && removalLength > 0)
          FileChange.Delete(NSpan(offset, offset + removalLength))
        else if (insertionLength > 0 && removalLength == 0)
          FileChange.Insert(offset, inserted)
        else if (insertionLength > 0 && removalLength > 0)
          FileChange.Replace(NSpan(offset, offset + removalLength), inserted)
        else
          assert(false);

      if (_isBatchCodeUpdate)
        _batchFileChanges.Add(change);
      else
        _client.Send(ClientMessage.FileChanged(Id, version, change, VersionedPos(caretPos, version)));
    }

    public Run() : bool
    {
      // TODO: Send massages to server: Close(old_prj), Open(new_prj), Open(file)*, Reference()*, ProjectRedy().
      // get result...
      // compare result with gold...
      // show ststistics.
      true
    }

    public CheckGold(_recoveryAlgorithm: RecoveryAlgorithm): void
    {
      unless (Suite.TestState == TestState.Ignored)
      {
        //def gold = Gold;
        // TODO: For each twst file send massages to server: RetrivePrettyprint()
        // Check pretty print with gold.

        //def parseTree = _file.GetParseTree() : ParseTree;
        //def prettyPrintResult = parseTree.ToString(PrettyPrintOptions.DebugIndent | PrettyPrintOptions.MissingNodes);
        //PrettyPrintResult = prettyPrintResult;
        //TestState = if (gold == prettyPrintResult) TestState.Success else TestState.Failure
      }
    }

    public Update(code: string, gold: string): void
    {
      IOFile.WriteAllText(FullPath, code);
      IOFile.WriteAllText(Path.ChangeExtension(FullPath, ".gold"), gold);
      IsDirty = false;
      _client.Send(ClientMessage.FileSaved(Id, Version));
    }

    public Remove(): void
    {
      def fullPath = Path.GetFullPath(FullPath);
      IOFile.Delete(fullPath);
      def goldFullPath = Path.ChangeExtension(fullPath, ".gold");
      when (IOFile.Exists(goldFullPath))
        IOFile.Delete(goldFullPath);
      def tests = Project.Children;
      def index = tests.IndexOf(this);
      _ = tests.Remove(this);
      when (tests.Count > 0)
        tests[index].IsSelected = true;
    }

    public StartCompleteWord(pos : int) : void
    {
      def client = _client;
      Debug.Assert(client != null);
      client.Send(ClientMessage.CompleteWord(this.Project.Id, this.Id, this.Version, pos));
    }

    public override GetAllTests() : Seq[FileVm] { [this] }

    public override ToString(): string { Name }

    public Dispose() : void
    {
      _client = null;
    }
  }
}
