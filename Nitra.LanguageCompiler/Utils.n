using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.ProjectSystem;

using System;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Windows.Media;
using System.Reflection;

namespace Nitra.LanguageCompiler
{
  module Utils
  {
    public ExtensionToName(ext : string) : string
    {
      assert3(ext != null && ext.Length > 1);

      def ext2 = if (ext[0] == '.') ext.Substring(1) else ext;
      ToCamel(ext2.ToLowerInvariant())
    }

    public ToCamel(str : string) : string
    {
      assert3(str != null && str.Length > 0);

      match (str.Length)
      {
        | 1 => str.ToUpperInvariant()
        | _ => char.ToUpperInvariant(str[0]) + str.Substring(1)
      }
    }

    public NameToColor : Dictionary[string, Color];
    public ColorToName : Dictionary[Color, string];

    this()
    {
      NameToColor  = Dictionary();
      ColorToName  = Dictionary();

      foreach (property when property.PropertyType == typeof(Color) in typeof(Colors).GetProperties(BindingFlags.Public %| BindingFlags.Static))
      {
        def color = property.GetValue(null, null) :> Color;
        NameToColor[property.Name] = color;
        ColorToName[color]         = property.Name;
      }
    }

    public ColorToString(color : Color, namePrefix : string = null) : string
    {
      mutable name;

      when (ColorToName.TryGetValue(color, out name))
      {
        if (namePrefix == null)
          return name;
        else
          return namePrefix + name;
      }

      color.ToString()
    }


    public IsBinary(path : string) : bool
    {
      !(IsUtf8File(path) || IsAscii(path))
    }

    public IsAscii(path : string) : bool
    {
      def content = File.ReadAllBytes(path);

      when (content.Length == 0)
        return false;

      foreach (ch :> int in content)
        when (ch < 1 || ch > 127)
          return false;

      true
    }

    public IsUtf8File(path : string) : bool
    {
      using (file = IO.File.OpenRead(path))
      {
        file.ReadByte() == 0xEF
        && file.ReadByte() == 0xBB
        && file.ReadByte() == 0xBF
      }
    }

    public CreateSnk(path : string) : void
    {
      def parms = CspParameters();
      parms.KeyNumber = 2;

      def provider = RSACryptoServiceProvider(parms);
      def ary = provider.ExportCspBlob(!provider.PublicOnly);
      IO.File.WriteAllBytes(path, ary);
    }

    public GetAssemblyPath(assembly : Assembly) : string
    {
      def codeBase = assembly.CodeBase;
      def uri = UriBuilder(codeBase);
      def path = Uri.UnescapeDataString(uri.Path);
      path
    }

    public GetExePath() : string
    {
      Path.GetDirectoryName(GetAssemblyPath(Assembly.GetExecutingAssembly()));
    }

    public TemplatePath(relativePath : string) : string
    {
      if (Path.IsPathRooted(relativePath))
        relativePath
      else
        Path.Combine(GetExePath(), relativePath)
    }

    public ColorFromArgb(argb : int) : Color
    {
      unchecked Color.FromArgb((argb >> 24) :> byte, (argb >> 16) :> byte, (argb >> 8) :> byte, argb :> byte)
    }
  } // module
} // namespace
