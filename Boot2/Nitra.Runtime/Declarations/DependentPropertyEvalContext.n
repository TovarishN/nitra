using Nemerle.Assertions;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading;

namespace Nitra.Declarations
{
  public class DependentPropertyEvalContext
  {
    public Stage                  : int               { get; internal set; }
    public CalculatedCount        : int               { get; private  set; }
    public DeferredCount          : int               { get; internal set; }
    public Pass                   : int               { get { _pass } }
    public CollectorsCreatedCount : int               { get { _collectorsCreated } }
    public CancellationToken      : CancellationToken { get; set; }
    public SymbolCache            : ISymbolCache      { get; }
    mutable _files                : ImmutableArray[FileEvalPropertiesData];
            _fileMap              : Dictionary[int, FileEvalPropertiesData] = Dictionary();

    public this(symbolCache : ISymbolCache)
    {
      SymbolCache = symbolCache;
    }

    public GetFileData(fileId : int) : FileEvalPropertiesData
    {
      _fileMap[fileId]
    }

    public Files : ImmutableArray[FileEvalPropertiesData]
    {
      get { _files }
      set
      {
        _files = value;
        _fileMap.Clear();
        foreach (file in value)
          _fileMap.Add(file.FileId, file);
      }
    }
    public CalculatedCountInc() : void
    {
      CalculatedCount += 1
    }

    public DeferredCountInc() : void
    {
      DeferredCount += 1
    }

    public NextPass() : void
    {
      ++_pass;
      _collectorsCreated = 0;
    }

    private mutable _pass              : int;
    private mutable _collectorsCreated : int;

    public NotifyCollectorCreated(createdOnStage : out int, createdOnPass : out int) : void
    {
      createdOnStage = Stage;
      createdOnPass  = _pass;
      ++_collectorsCreated;
    }

    public EmitSymbol([NotNull] symbol : DeclarationSymbol) : void
    {
      OnEmitSymbol?.Invoke(symbol, this);
    }

    public event OnEmitSymbol : Action[DeclarationSymbol, DependentPropertyEvalContext];
  }
}
