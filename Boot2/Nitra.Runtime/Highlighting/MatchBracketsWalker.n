using Nemerle;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Extensions;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Runtime.Highlighting
{
  public sealed class MatchBracketsWalker : WalkerBase[Context]
  {
    _stacks : Stack[Stack[NSpan]] = Stack();

    [Record, StructuralEquality]
    public struct MatchBrackets
    {
      public OpenBracket  : NSpan;
      public CloseBracket : NSpan;
    }

    [Record]
    public class Context
    {
      public Position : int;

      [RecordIgnore]
      public  Brackets : List[MatchBrackets] = List(128);
      [RecordIgnore]
      private _brackets : HashSet[MatchBrackets] = HashSet();

      public Add(openBraceSpan : NSpan, closeBraceSpan : NSpan) : void
      {
        def matchBrackets = MatchBrackets(openBraceSpan, closeBraceSpan);
        when (_brackets.Add(matchBrackets))
          this.Brackets.Add(MatchBrackets(openBraceSpan, closeBraceSpan));
      }
    }

    public this()
    {
    }

    public override StartWalkSequence(_sequenceInfo : SequenceInfo) : void
    {
      _stacks.Push(Stack());
    }

    public override FinishWalkSequence(_sequenceInfo : SequenceInfo) : void
    {
      def braceStack = _stacks.Pop();
      assert2(braceStack.Count == 0, "Found the unpaired brackets");
    }

    public OnToken(spanClass : SpanClass, startPos : int, endPos : int, parseResult : IParseResult, context : Context) : void
    {
      _ = parseResult;
      when (endPos >= 0)
      {
        when (spanClass != null)
        {
          if (spanClass.Name == "OpenBrace")
            _stacks.Peek().Push(NSpan(startPos, endPos));
          else when (spanClass.Name == "CloseBrace")
          {
            def braceStack = _stacks.Peek();
            def pos = context.Position;

            when (braceStack.Count > 0)
            {
              def openBraceSpan = braceStack.Pop();
              when (openBraceSpan.IntersectsWith(pos) || pos >= startPos && pos <= endPos)
                context.Add(openBraceSpan, NSpan(startPos, endPos));
            }
          }
        }
      }
    }

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : IParseResult, context : Context) : void
    {
      OnToken(ruleInfo.SpanClass, startPos, endPos, parseResult, context);
    }

    public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : IParseResult, context : Context) : void
    {
      OnToken(ruleInfo.SpanClass, startPos, endPos, parseResult, context);
    }

    public override OnAmbiguous(parseResult : IParseResult, parseWays : array[array[SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, context : Context) : void
    {
      _ = startPos; _ = endPos;

      when (parseWays.Length > 0)
        Walk(parseResult, parseWays[0], sequenceInfo, context);
    }

    public override OnAmbiguousPrefix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PrefixRuleParser]], startPos : int, endPos : int, context : Context) : void
    {
      _ = extensibleRuleParser;
      when (ambiguousPrefixs.Count > 0)
      {
        def parser = ambiguousPrefixs[0];
        _ = WalkPrefix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
      }
    }

    public override OnAmbiguousPostfix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PostfixRuleParser]], startPos : int, endPos : int, context : Context) : void
    {
      _ = extensibleRuleParser;
      when (ambiguousPrefixs.Count > 0)
      {
        def parser = ambiguousPrefixs[0];
        _ = WalkPostfix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser, parseResult, context);
      }
    }
  }
}
