using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using SCG = System.Collections.Generic;

namespace Nitra.ProjectSystem
{
  public sealed class CompilerMessageList : IRootCompilerMessages, Seq[CompilerMessage], SCG.ICollection[CompilerMessage]
  {
    private static _empty : List[CompilerMessage] = List();

    public Kind : Guid { get; private set; }
    private         _messages   : List[CompilerMessage];
    private mutable _isDisposed : bool;

    public this()
    {
      this(List())
    }

    private this(messages : List[CompilerMessage])
    {
      _messages = messages;
    }

    public GetMessages() : ReadOnlyCollection[CompilerMessage]
    {
      ReadOnlyCollection(_messages)
    }

    public ReportMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      _messages.Add(CompilerMessage(messageType, this.Kind, loc, msg, num, null))
    }

    public ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages
      requires !_isDisposed otherwise throw InvalidOperationException("Object disposed")
    {
      def m = CompilerMessage(messageType, this.Kind, loc, msg, num, List());
      _messages.Add(m);
      CompilerMessageList(m._nestedMessages)
    }

    public SetFutureMessagesKind(kind : Guid) : void { Kind = kind; }

    public IsEmpty : bool { get { _messages.Count == 0 } }

    public Remove(predicate : Func[Guid, Location, bool]) : void
    {
      IgnoreParams();
      throw NotImplementedException();
    }

    public Clear() : void
    {
      _messages.Clear();
    }

    public Add(item : Nitra.ProjectSystem.CompilerMessage) : void
    {
      IgnoreParams();
      throw NotImplementedException();
    }

    public Contains(item : Nitra.ProjectSystem.CompilerMessage) : bool
    {
      IgnoreParams();
      throw NotImplementedException();
    }

    public CopyTo(ary : array[Nitra.ProjectSystem.CompilerMessage], arrayIndex : int) : void
    {
      _messages.CopyTo(ary, arrayIndex)
    }

    public Count : int
    {
      get{ _messages.Count }
    }

    public IsReadOnly : bool { get { true } }

    public Remove(item : Nitra.ProjectSystem.CompilerMessage) : bool
    {
      _ = item;
      throw NotImplementedException()
    }


    public Dispose() : void
    {
      _isDisposed = true;
    }

    public GetEnumerator() : List[CompilerMessage].Enumerator
    {
      if (_messages == null)
        _empty.GetEnumerator();
      else
        _messages.GetEnumerator();
    }

    private GetEnumerator2() : IEnumerator[CompilerMessage] implements Seq[CompilerMessage].GetEnumerator
    {
      if (_messages == null)
        Enumerable.Empty().GetEnumerator()
      else
        (_messages : Seq[CompilerMessage]).GetEnumerator()
    }
  }
}
