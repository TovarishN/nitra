using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;

namespace Nitra.ProjectSystem
{
  public abstract class CompilerMessages : ICompilerMessages
  {
    public NumberPrefix : string { get; }

    protected this(numberPrefix : string = null)
    {
      NumberPrefix = if (string.IsNullOrEmpty(numberPrefix)) "MSG" else numberPrefix;
    }

    public ErrorCount : int { get; private set; }

    public ReportMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : void
    {
      match(messageType)
      {
        | FatalError | Error => ErrorCount++
        | _ => ()
      }
      ReportMessageImpl(loc, msg, num, messageType);
    }

    public ReportRootMessage(messageType : CompilerMessageType, loc : Location, msg : string, num : int) : IRootCompilerMessages
    {
      match(messageType)
      {
        | FatalError | Error => ErrorCount++
        | _ => ()
      }
      ReportMessageImpl(loc, msg, num, messageType);
      FakeRootCompilerMessages(this)
    }

    public abstract SetFutureMessagesKind(kind : Guid) : void;
    public abstract Remove(predicate : Func[Guid, Location, bool]) : void;

    protected abstract ReportMessageImpl(loc : Location, msg : string, num : int, messageType : CompilerMessageType) : void;

    protected FormatMessage(loc : Location, msg : string, num : int, messageType : CompilerMessageType) : string
    {
      def text = StringBuilder().Append(loc.ToMessageString()).Append(GetMessagePrefix(messageType));

      when (num != -1)
        _ = text.Append(NumberPrefix).Append(num).Append(": ");

      text.Append(msg).ToString()
    }

    protected static GetMessagePrefix(messageType : CompilerMessageType) : string
    {
      | FatalError | Error => "error: "
      | Warning            => "warning: "
      | Hint               => "hint: "
    }
  }
}
