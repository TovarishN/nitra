using Nitra.Runtime;

using System;
using System.Runtime;
using System.Runtime.ConstrainedExecution;

using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nitra
{
  [StructuralEquality]
  public struct Location : IEquatable[string], IComparable[Location]
  {
    public static NoLocation : Location = Location(SourceSnapshot.Default.File, NSpan(0));

    public Source   : SourceSnapshot { get; }
    public StartPos : int            { get; }
    public EndPos   : int            { get; }
    public Span     : NSpan          { get { NSpan(StartPos, EndPos) } }
    public Length   : int
    {
      [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get { EndPos - StartPos }
    }

    public this(sourceProvider : ISourceSnapshotProvider, pos : int)
    {
      this(sourceProvider, pos, pos)
    }

    public this(sourceProvider : ISourceSnapshotProvider, span : NSpan)
    {
      this(sourceProvider, span.StartPos, span.EndPos)
    }

    public this(sourceProvider : ISourceSnapshotProvider, startPos : int, endPos : int)
    {
      assert(startPos <= endPos);
      Source   = sourceProvider.GetSource();
      StartPos = startPos;
      EndPos   = endPos;
    }

    public this(source : SourceSnapshot, pos : int)
    {
      this(source, pos, pos)
    }

    public this(source : SourceSnapshot, startPos : int, endPos : int)
    {
      assert(startPos <= endPos);
      Source   = source;
      StartPos = startPos;
      EndPos   = endPos;
    }

    public this(source : SourceSnapshot, tok : NSpan)
    {
      this(source, tok.StartPos, tok.EndPos)
    }

    public this(source : SourceSnapshot, a : NSpan, b : NSpan)
    {
      this(source, Math.Min(a.StartPos, b.StartPos), Math.Max(a.EndPos, b.EndPos))
    }

    public static Default : Location { get; default Location(SourceSnapshot.Default, -1, -1) }

    public static MakeFake(text : string) : Location { Location(SourceSnapshot(text), NSpan(0, text.Length)) }

    public IsEmpty         : bool { get { StartPos == EndPos } }
    public IsTextAvailable : bool
    {
      get
      {
        def len = Source?.Text?.Length;
        StartPos >= 0 && EndPos >= 0 && StartPos < len && EndPos <= len
      }
    }

    public GetText() : string { assert2(StartPos >= 0); Source.Text.Substring(StartPos, EndPos - StartPos) }

    public StartLineColumn : LineColumn { get { Source.PositionToLineColumn(StartPos) } }
    public EndLineColumn   : LineColumn { get { Source.PositionToLineColumn(EndPos) } }

    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(start : int, end : int) : bool { start <= EndPos && end >= StartPos }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(other : Location)       : bool { assert(other.Source.Equals(Source)); IntersectsWith(other.StartPos, other.EndPos) }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(other : NSpan)         : bool { IntersectsWith(other.StartPos, other.EndPos) }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Intersection(start : int, end : int)   : ValueOption[Location]
    {
      def start = Math.Max(StartPos, start);
      def end   = Math.Min(EndPos, end);

      if (start <= end)
        VSome(Location(Source, start, end))
      else
        VNone()
    }

    public override ToString() : string
    {
      $<#Start: $StartPos Len: $(EndPos - StartPos) ($(if (IsTextAvailable) GetText() else "<not available>"))#>
    }

    public ToMessageString() : string
    {
      if (this == Default)
        ""
      else
      {
        def sourceFileName       = Source.File.FullName;
        def file                 = if (string.IsNullOrEmpty(sourceFileName)) "<unknown source>" else sourceFileName;
        def (line, column)       = StartLineColumn;
        def (endLine, endColumn) = EndLineColumn;
        if (line != 0)
          $"$file($line,$column,$endLine,$endColumn): "
        else
          file + ": "
      }
    }

    public Equals(str : string) : bool
      implements IEquatable[string].Equals
    {
      if (str : object != null && IsTextAvailable && EndPos - StartPos == str.Length)
        string.CompareOrdinal(Source.Text, StartPos, str, 0, str.Length) == 0
      else
        false
    }

    public Combine(other : Location) : Location
    {
      assert(object.ReferenceEquals(this.Source, other.Source));
      Location(
        this.Source,
        Math.Min(this.StartPos, other.StartPos),
        Math.Max(this.EndPos, other.EndPos))
    }

    public static @+(a : Location, b : Location) : Location
    {
      a.Combine(b)
    }

    public static @==(a : Location, b : string) : bool
    {
      a.Equals(b)
    }

    public static @==(a : string, b : Location) : bool
    {
      b.Equals(a)
    }

    public static @!=(a : Location, b : string) : bool
    {
      !a.Equals(b)
    }

    public static @!=(a : string, b : Location) : bool
    {
      !b.Equals(a)
    }

    public FromEnd() : Location
    {
      Location(Source, EndPos, EndPos)
    }

    public FromStart() : Location
    {
      Location(Source, StartPos, StartPos)
    }

    public WithSpan(newSpan : NSpan) : Location
    {
      Location(Source, newSpan)
    }

    public CompareTo(other : Nitra.Location) : int
    {
      when (other == null)
        return 1;

      def result = other.Source.File.FullName.CompareTo(Source.File.FullName);
      when (result != 0)
        return result;

      Span.CompareTo(other.Span)
    }
  }
}
