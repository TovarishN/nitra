using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Internal
{
  public abstract class ExtensionRuleParser : RuleParser, IRuleParserReflection
  {
    public RuleId       : int;

    public LowerBound   : char { get; internal set; default char.MinValue; }
    public UpperBound   : char { get; internal set; default char.MaxValue; }

    public override SequenceInfo : SequenceInfo    { get { Reflection(RuleId) } }
    public ParserData   : ExtensibleRuleParserData;

    public override ParsingSequence : ParsingSequence { get; internal set; }

    public this(grammar : CompositeGrammar, ruleIdBuilder : RuleIdBuilder, parserData : ExtensibleRuleParserData, descriptor : RuleDescriptor)
    {
      base(grammar, descriptor);
      RuleId     = ruleIdBuilder.NewRuleId(this);
      ParserData = parserData;
    }

    public SubrulesCount : int { get { SequenceInfo.Subrules.Length } }

    public abstract Init(ruleIdBuilder : RuleIdBuilder) : void;
    public abstract Reflection(ruleId : int) : SequenceInfo;

    public abstract Parse(pos : int, text : string, resultRef : ref int, parseResult : ParseResult) : int;

    public virtual GrammarChangeHandler(rawTreePtr : int, startPos : int, endPos : int, parseResult : IParseResult, grammar : CompositeGrammar) : CompositeGrammar
    {
      IgnoreParams();
      grammar
    }
  }

  [Record]
  public abstract class PrefixRuleParser : ExtensionRuleParser
  {
    [RecordIgnore]
    internal HiddenBy : HashSet[PrefixRuleParser] = HashSet();
  }

  [Record]
  public abstract class PostfixRuleParser : ExtensionRuleParser
  {
    [RecordIgnore]
    public BindingPower : int { get; internal set; }
  }
}
