using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Extensions;

using Nitra.Runtime;
using Nitra.Runtime.Reflection;

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;

using SCG = System.Collections.Generic;

namespace Nitra.Internal.Recovery
{
  public partial class RecoveryParser
  {
    private SequencesToRecover : SCG.Queue[ParsedSequence * int] = SCG.Queue();

    private SaveRecoveredRawTreePart() : void
    {
      MakeRecoveredSequence(StartSequence, this.ParseResult.Text.Length);
      while (SequencesToRecover.Count > 0)
        MakeRecoveredSequence(SequencesToRecover.Dequeue());
    }

    private AddRecoveredSequence(key : int * int * ParsingSequence, subrules : array[ParsedSubrule * TokenChanges], tokenChanges : TokenChanges) : void
    {//TODO: Optimize
      when (this.ParseResult.RecoveredSequences.ContainsKey(key))
        return;

      def (_startPos, endPos, parsingSequence) = key;
      def isDynamicExtensible = parsingSequence is ParsingSequence.DynamicExtensible;
      def host = ParseResult.ParserHost;

      when (parsingSequence.IsToken)
      {
        assert2(true);
      }

      def allFlattenSubrules = SCG.List();
      def flattenSubrules    = SCG.List();
      def walk(index)
      {
        when (allFlattenSubrules.Count > 10)//TODO: Hack!!! terminate if too many ambiguities
          return;
        mutable walkCalled = false;
        def (subrule, _) = subrules[index];
        def state = host.ParsingStates[subrule.State];
        flattenSubrules.Add(subrule);

        if (isDynamicExtensible)
        {
          def nextSubrules = LightList();
          foreach ((nextSubrule, _) in subrules with nextIndex)
            when (subrule.End == nextSubrule.Begin)
              nextSubrules.Add(nextSubrule, nextIndex);
          if (nextSubrules.Count == 1)
          {
            walk(nextSubrules[0][1]);
            walkCalled = true;
          }
          else when (nextSubrules.Count > 1)
          {
            mutable bestStateId = nextSubrules[0][0].State;
            for (mutable i = 0; i < nextSubrules.Count; ++i)
            {
              def (subrule, _) = nextSubrules[i];
              def bestState = host.ParsingStates[bestStateId];
              def curState  = host.ParsingStates[subrule.State];
              when (bestState.Owner.Grammar.IsExtendedGrammar(curState.Owner.Grammar))
                bestStateId = curState.Id;
            }
            for (mutable i = 0; i < nextSubrules.Count; ++i)
            {
              def (subrule, index) = nextSubrules[i];
              when (subrule.State == bestStateId)
              {
                walk(index);
                walkCalled = true;
              }
            }
          }
        }
        else
          foreach ((nextSubrule, _) in subrules with nextIndex)
            when (subrule.End == nextSubrule.Begin && state.Next.Contains(nextSubrule.State) && index != nextIndex)
            {
              walk(nextIndex);
              walkCalled = true;
            }

        unless (walkCalled)
        {
          def positions = array(flattenSubrules.Count + 1);
          foreach (subrule in flattenSubrules with i)
            positions[i] = SubruleStart(subrule.Begin, subrule.State);
          positions[flattenSubrules.Count] = SubruleStart(endPos, -1);
          allFlattenSubrules.Add(positions);
        }

        flattenSubrules.RemoveAt(flattenSubrules.Count - 1);
      }

      def recoveredSequence =
        if (subrules.Length == 0)
        {
          def index = ParseResult.AddRecoveredSubrule(array[SubruleStart(endPos, -1)], parsingSequence);
          ParseResult.RecoveredSequence.Unambiguous(subrules, tokenChanges, index);
        }
        else
        {
          walk(0);
          if (allFlattenSubrules.Count == 1)
          {
            def index = ParseResult.AddRecoveredSubrule(allFlattenSubrules[0], parsingSequence);
            ParseResult.RecoveredSequence.Unambiguous(subrules, tokenChanges, index);
          }
          else
          {
            def indexes = array(allFlattenSubrules.Count);
            foreach (subrules in allFlattenSubrules with i)
              indexes[i] = ParseResult.AddRecoveredSubrule(subrules, parsingSequence);
            ParseResult.RecoveredSequence.Ambiguous(subrules, tokenChanges, indexes);
          };
      }

      this.ParseResult.RecoveredSequences.Add(key, recoveredSequence);
    }

    private IsDeletedSubrule(subrule : ParsedSubrule) : bool
    {
      ParseResult.ParserHost.ParsingStates[subrule.State].CanConsumeErrorTokens &&
      Deleted.Contains(subrule.Begin) &&
      Deleted[subrule.Begin].Contains(subrule.End)
    }

    public MakeRecoveredSequence(seq : ParsedSequence, end : int) : void
    {
      def makeSequence(seq : ParsedSequence, mutable end : int) : void
      {
        def key = (seq.StartPos, end, seq.ParsingSequence);
        unless (this.ParseResult.RecoveredSequences.Contains(key))
        {
          def subrules = GetSubrulesAndChanges(seq, end);
          foreach ((subrule, changes) in subrules)
          {
            def sequences = seq.GetSequencesForSubrule(subrule).ToArray();
            if (sequences.Length > 0)
            {
              assert(sequences.Length == 1);
              def sequence = sequences[0];
              assert(sequence.Ends[subrule.End] == changes);
              def subruleInfo = ParseResult.ParserHost.ParsingStates[subrule.State].SubruleInfo;
              //TODO:hardcase
              //failed test-0014 in C# and test-0002 in extensible C#
              //remove || subruleInfo is SubruleInfo.Option || subruleInfo is SubruleInfo.List || subruleInfo is SubruleInfo.ListWithSeparator
              //implement throw NotImplementedException("Fallback to standard parse tree reading");
              when ((CompletionPos >= 0 && subrule.Begin <= CompletionPos && CompletionPos < subrule.End)
                || changes.HasChanges
                || subruleInfo is SubruleInfo.ListItem
                || subruleInfo is SubruleInfo.Option
                || subruleInfo is SubruleInfo.List
                || subruleInfo is SubruleInfo.ListWithSeparator
                || subruleInfo.Parse(subrule.Begin, ParseResult.Text, ParseResult) != subrule.End
                )
                SequencesToRecover.Enqueue(sequence, subrule.End);
            }
            else when (IsDeletedSubrule(subrule))
            {
              def sequence = match (seq.ParsingSequence.States[0])
              {
                | ParsingState.Subsequence as state => state.Sequence
                | ParsingState.List        as state => state.Sequence
                | _                                 => assert(false);
              }
              def key = (subrule.Begin, subrule.End, sequence);
              AddRecoveredSequence(key, array[], changes);
            }
          }
          AddRecoveredSequence(key, subrules, seq.Ends[end]);
        }
      }

      match (seq.ParsingSequence)
      {
        | Sequence =>
          makeSequence(seq, end);

        | DynamicExtensible =>
          def key = (seq.StartPos, end, seq.ParsingSequence);
          when (this.ParseResult.RecoveredSequences.Contains(key))
            return;
          def subrules = GetSubrulesAndChanges(seq, end);
          foreach ((subrule, _changes) in subrules)
          {
            def state = ParseResult.ParserHost.ParsingStates[subrule.State] :> ParsingState.DynamicExtensibleItem;
            mutable parsedSequence;
            when (Sequences.TryGetValue((subrule.Begin, state.RuleParser.ParsingSequence), out parsedSequence))
              SequencesToRecover.Enqueue(parsedSequence, subrule.End);
          }
          AddRecoveredSequence(key, subrules, seq.Ends[end]);

        | Extensible =>
          def key = (seq.StartPos, end, seq.ParsingSequence);
          when (this.ParseResult.RecoveredSequences.Contains(key))
            return;
          def filteredSubrules = SCG.List();
          foreach ((subrule, changes) in GetSubrulesAndChanges(seq, end) with i)
          {
            when (i > 0 && subrule.Begin == subrule.End)
              continue;

            filteredSubrules.Add((subrule, changes));

            foreach (sequence in seq.GetSequencesForSubrule(subrule))
            {
              mutable seqChanges;
              when (sequence.Ends.TryGetValue(subrule.End, out seqChanges))
              when (seqChanges == changes)
                makeSequence(sequence, subrule.End);
            }
          }
          AddRecoveredSequence(key, filteredSubrules.ToArray(), seq.Ends[end]);
      }
    }

    private static SubrulesComparison : Comparison[ParsedSubrule * TokenChanges] = ((l, _), (r, _)) =>
    {
      res:
        {
          mutable c;
          // Группируем по хвостам.
          c = l.End.CompareTo(r.End); when (c != 0) res(c);
          // Двигаем пустылки назад.
          c = l.Begin.CompareTo(r.Begin); when (c != 0) res(c);
          // Сдвигаем большие состояния в конец.
          // При текущей форме графа это позволяет произвести рассчёт за одн проход.
          // Если граф состояний парсинга изменится для пустышек может понадоится итерировать до фиксированной точки.
          l.State.CompareTo(r.State);
        }
    };

    private GetSubrulesAndChanges(seq : ParsedSequence, mutable end : int) : array[ParsedSubrule * TokenChanges]
    {
      def dynamicExtensibleStates = if (seq.ParsingSequence is ParsingSequence.DynamicExtensible)
      {
        def states = SCG.HashSet();
        foreach (subrule in seq.ParsedSubrules.Keys)
          _ = states.Add(subrule.State);
        states;
      }
      else
        null;
      def subrules = SCG.List();
      mutable changes = seq.Ends[end];
      def stateEndChanges = Hashtable();
      if (dynamicExtensibleStates == null)
        foreach (endState in seq.ParsingSequence.EndStates)
          stateEndChanges[endState, end] = changes;
      else
        foreach (state in dynamicExtensibleStates)
          stateEndChanges[state, end] = changes;

      def allSubrules = seq.ParsedSubrules.KeyValuePairs.ToArray().SortInplace(SubrulesComparison);
      def host = ParseResult.ParserHost;

      for (mutable i = allSubrules.Length - 1; i >= 0; --i)
      {
        def (subrule, subruleChanges) = allSubrules[i];
        mutable endChanges;
        mutable startChanges;
        def record = ParseRecord(seq, subrule.State, subrule.Begin);
        when (stateEndChanges.TryGetValue((subrule.State, subrule.End), out endChanges))
        when (Records[subrule.Begin].TryGetValue(record, out startChanges))
        {
          when (startChanges + subruleChanges == endChanges)
          {
            def state = host.ParsingStates[subrule.State];
            when (!subrule.IsEmpty || record.ParsingState.MandatoryTokenCount > 0 || record.ParsingState is ParsingState.Predicate)
              subrules.Add(subrule, subruleChanges);
            if (dynamicExtensibleStates == null)
              foreach (prevState in state.Prev)
                stateEndChanges[prevState, subrule.Begin] = startChanges;
            else
              foreach (state in dynamicExtensibleStates)
                stateEndChanges[state, subrule.Begin] = startChanges;
          }
        }
      }

      subrules.ToArray().SortInplace(ParsingOrderSubrulesComparison);
    }
  }
}
