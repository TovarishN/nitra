using Nitra;
using Nitra.ProjectSystem;
using Nitra.Internal;
using Nitra.Serialization2;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

namespace Nitra.Declarations
{
  public interface IRef : ILocated, ISerializable
  {
    Name              : string                 { get; }
    IsNameValid       : bool                   { get; }
    IsUnresolved      : bool                   { get; }
    IsAmbiguous       : bool                   { get; }
    Ambiguities       : Seq[DeclarationSymbol] { get; }
    IgnoreAmbiguities : bool                   { get; }

    [DependentProperty("IsFullNameEvaluated")]
    FullName            : string { get; }
    IsFullNameEvaluated : bool   { get; }

    [DependentProperty("IsKindEvaluated")]
    Kind            : string { get; }
    IsKindEvaluated : bool   { get; }

    [DependentProperty("IsSpanClassEvaluated")]
    SpanClass            : SpanClass { get; }
    IsSpanClassEvaluated : bool      { get; }

    [DependentProperty("IsSymbolEvaluated")]
    Symbol            : DeclarationSymbol { get; }
    IsSymbolEvaluated : bool              { get; }

    [DependentProperty("IsScopeEvaluated")]
    Scope             : Scope    { get; }
    IsScopeEvaluated  : bool     { get; }

    [DependentProperty("IsResolvedToEvaluated")]
    ResolvedTo            : IRef { get; }
    IsResolvedToEvaluated : bool { get; }

    Resolve[TConcreteSymbol](algorithm : Predicate[TConcreteSymbol]) : Ref[TConcreteSymbol]
      where TConcreteSymbol : class, DeclarationSymbol;

    Resolve[TConcreteSymbol](algorithm : ResolutionAlgorithm[DeclarationSymbol, TConcreteSymbol] = null) : Ref[TConcreteSymbol]
      where TConcreteSymbol : DeclarationSymbol;

    GetSymbols() : Seq[DeclarationSymbol];
  }
}
