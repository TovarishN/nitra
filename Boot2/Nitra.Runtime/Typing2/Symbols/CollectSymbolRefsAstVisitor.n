using System.Threading;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Declarations
{
  [Record]
  public class CollectSymbolRefsAstVisitor : IAstVisitor
  {
    _cancellationToken    : CancellationToken;
    public Symbol         : DeclarationSymbol { get; }
    public ProjectSupport : IProjectSupport { get; }
    
    [RecordIgnore] public FoundSymbols : List[IRef] { get; default List(); }

    public Visit(parseTree : IAst) : void
    {
      when (_cancellationToken.IsCancellationRequested)
        return;
        
      parseTree.Accept(this);
    }

    public Visit(reference : Reference) : void implements IAstVisitor.Visit
    {
      unless (reference.IsRefEvaluated)
        return;

      mutable r = reference.Ref : IRef;
      while (r.IsResolvedToEvaluated)
        r = r.ResolvedTo;

      when (r.IsSymbolEvaluated)
        if (r.Symbol.Equals(Symbol))
          FoundSymbols.Add(r);
        else
        {
          //ProjectSupport.
        }
    }

    public Visit(r : IRef) : void
    {
      _ = r;
    }
  }
}
