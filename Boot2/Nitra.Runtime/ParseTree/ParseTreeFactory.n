using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using SCG = System.Collections.Generic;

using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

namespace Nitra.Internal
{
  public module ParseTreeFactory
  {
    public CreateOption[TLoader, TItem](
      parseResult    : ParseResult,
      itemLoader     : ISequenceParseTreeLoader[TLoader],
      itemSequenceId : int,
      itemConverter  : ParseTreeCastHelper[TLoader, TItem],
      rawTreePtr     : int,
      offset         : int,
      pos            : ref int
    ) : OptionParseTree[TItem]
      where TLoader : IParseTree
      where TItem   : TLoader
    {
      if (parseResult.GetSize(rawTreePtr + offset) > 0)
      {
        def optionStartPos = pos;
        def item           = itemLoader.ReadSequence(itemSequenceId, ref pos) |> itemConverter.Cast;
        OptionParseTree.Some(Location(parseResult, optionStartPos, pos), item)
      }
      else
        OptionParseTree.None(Location(parseResult, pos))
    }

    public CreateList[TLoader, TItem](
      parseResult    : ParseResult,
      itemLoader     : ISequenceParseTreeLoader[TLoader],
      itemSequenceId : int,
      itemConverter  : ParseTreeCastHelper[TLoader, TItem],
      rawTreePtr     : int,
      offset         : int,
      pos            : ref int
    ) : ListParseTree[TItem]
      where TLoader : IParseTree
      where TItem   : TLoader
    {
      def listEnd = pos + parseResult.GetSize(rawTreePtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer = SCG.List(16);
        def listStartPos = pos;
        do
          itemLoader.ReadSequence(itemSequenceId, ref pos) |> itemConverter.Cast |> itemBuffer.Add;
        while (pos < listEnd);
        assert(pos == listEnd);

        ConcreteListParseTree(Location(parseResult, listStartPos, listEnd), itemBuffer)
      }
      else
        EmptyListParseTree(Location(parseResult, pos))
    }

    public CreateDynamicExtensionPointList[TItem](
      parseResult      : ParseResult,
      rawTreePtr       : int,
      offset           : int,
      pos              : ref int,
      descriptor       : ExtensibleRuleDescriptor,
      bindingPower     : string
    ) : ListParseTree[TItem]
      where TItem   : ParseTree
    {
      def listEnd = pos + parseResult.GetSize(rawTreePtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer = SCG.List(16);
        def listStartPos = pos;
        mutable grammar    = parseResult.GetRuleParser(rawTreePtr).Grammar;
        mutable ruleParser = grammar.GetExtensibleRuleParser(descriptor, "0");
        do
        {
          def itemStart = pos;
          mutable prefixRawTreePtr = parseResult.GetRawTree(itemStart, ruleParser.PrefixId);
          def bestRawTree          = ruleParser.BestPrefix(parseResult.GetPrefix(prefixRawTreePtr), parseResult);
          def extensionRuleParser  = ruleParser.PrefixRuleParser(bestRawTree, parseResult);

          def item = ExtensibleRuleParseTreeConstructor.Create(ref pos, 1, parseResult, bindingPower, descriptor, grammar);
          itemBuffer.Add(item);

          def newGrammar = extensionRuleParser.GrammarChangeHandler(bestRawTree, itemStart, pos, parseResult, grammar);
          when (grammar : object != newGrammar)
          {
            grammar    = newGrammar;
            ruleParser = grammar.GetExtensibleRuleParser(descriptor, "0");
          }
        }
        while (pos < listEnd);
        assert(pos == listEnd);

        ConcreteListParseTree(Location(parseResult, listStartPos, listEnd), itemBuffer)
      }
      else
        EmptyListParseTree(Location(parseResult, pos))
    }

    public CreateListWithSeparator[TItemLoader, TItem, TSeparatorLoader, TSeparator](
      parseResult         : ParseResult,
      itemLoader          : ISequenceParseTreeLoader[TItemLoader],
      itemSequenceId      : int,
      itemConverter       : ParseTreeCastHelper[TItemLoader, TItem],
      separatorLoader     : ISequenceParseTreeLoader[TSeparatorLoader],
      separatorSequenceId : int,
      separatorConverter  : ParseTreeCastHelper[TSeparatorLoader, TSeparator],
      rawTreePtr          : int,
      offset              : int,
      pos                 : ref int
    ) : SequenceParseTree[ListParseTree[TItem], ListParseTree[TSeparator]]
      where TItemLoader      : IParseTree
      where TItem            : TItemLoader
      where TSeparatorLoader : IParseTree
      where TSeparator       : TSeparatorLoader
    {
      def listEnd = pos + parseResult.GetSize(rawTreePtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer      = SCG.List(16);
        def separatorBuffer = SCG.List(16);
        def listStartPos    = pos;
        def loop()
        {
          itemLoader.ReadSequence(itemSequenceId, ref pos) |> itemConverter.Cast |> itemBuffer.Add;

          if (pos < listEnd)
          {
            separatorLoader.ReadSequence(separatorSequenceId, ref pos) |> separatorConverter.Cast |> separatorBuffer.Add;

            if (pos < listEnd)
              loop();
            else
              assert(pos == listEnd);
          }
          else
            assert(pos == listEnd);
        }
        loop();

        def loc = Location(parseResult, listStartPos, listEnd);
        ConcreteSequenceParseTree(loc, ConcreteListParseTree(loc, itemBuffer), ConcreteListParseTree(loc, separatorBuffer))
      }
      else
      {
        def loc = Location(parseResult, pos);
        ConcreteSequenceParseTree(loc, EmptyListParseTree(loc), EmptyListParseTree(loc))
      }
    }

    public CreateListWithSeparatorOnlyItems[TItemLoader, TItem, TSeparatorLoader](
      parseResult         : ParseResult,
      itemLoader          : ISequenceParseTreeLoader[TItemLoader],
      itemSequenceId      : int,
      itemConverter       : ParseTreeCastHelper[TItemLoader, TItem],
      separatorLoader     : ISequenceParseTreeLoader[TSeparatorLoader],
      separatorSequenceId : int,
      rawTreePtr          : int,
      offset              : int,
      pos                 : ref int
    ) : ListParseTree[TItem]
      where TItemLoader      : IParseTree
      where TItem            : TItemLoader
      where TSeparatorLoader : IParseTree
    {
      def listEnd = pos + parseResult.GetSize(rawTreePtr + offset);
      if (listEnd > pos)
      {
        def itemBuffer      = SCG.List(16);
        def listStartPos    = pos;
        def loop()
        {
          itemLoader.ReadSequence(itemSequenceId, ref pos) |> itemConverter.Cast |> itemBuffer.Add;

          if (pos < listEnd)
          {
            _ = separatorLoader.ReadSequence(separatorSequenceId, ref pos);

            if (pos < listEnd)
              loop();
            else
              assert(pos == listEnd);
          }
          else
            assert(pos == listEnd);
        }
        loop();

        ConcreteListParseTree(Location(parseResult, listStartPos, listEnd), itemBuffer)
      }
      else
        EmptyListParseTree(Location(parseResult, pos))
    }

    public CreateListWithSeparatorOnlySeparators[TItemLoader, TSeparatorLoader, TSeparator](
      parseResult         : ParseResult,
      itemLoader          : ISequenceParseTreeLoader[TItemLoader],
      itemSequenceId      : int,
      separatorLoader     : ISequenceParseTreeLoader[TSeparatorLoader],
      separatorSequenceId : int,
      separatorConverter  : ParseTreeCastHelper[TSeparatorLoader, TSeparator],
      rawTreePtr          : int,
      offset              : int,
      pos                 : ref int
    ) : ListParseTree[TSeparator]
      where TItemLoader      : IParseTree
      where TSeparatorLoader : IParseTree
      where TSeparator       : TSeparatorLoader
    {
      def listEnd = pos + parseResult.GetSize(rawTreePtr + offset);
      if (listEnd > pos)
      {
        def separatorBuffer = SCG.List(16);
        def listStartPos    = pos;
        def loop()
        {
          _ = itemLoader.ReadSequence(itemSequenceId, ref pos);

          if (pos < listEnd)
          {
            separatorLoader.ReadSequence(separatorSequenceId, ref pos) |> separatorConverter.Cast |> separatorBuffer.Add;

            if (pos < listEnd)
              loop();
            else
              assert(pos == listEnd);
          }
          else
            assert(pos == listEnd);
        }
        loop();

        ConcreteListParseTree(Location(parseResult, listStartPos, listEnd), separatorBuffer)
      }
      else
        EmptyListParseTree(Location(parseResult, pos))
    }

    public CreateOption[TLoader, TItem](
      parseResult           : ParseResult,
      itemLoader            : ISequenceParseTreeLoader[TLoader],
      itemSequenceId        : int,
      itemConverter         : ParseTreeCastHelper[TLoader, TItem],
      state                 : int,
      startPos              : int,
      endPos                : int
    ) : OptionParseTree[TItem]
      where TLoader : IParseTree
      where TItem   : TLoader
    {
      def parsingSequence = (parseResult.ParserHost.ParsingStates[state].SubruleInfo :> SubruleInfo.Option).Rule.ParsingSequence;
      RecoveryModeOptionParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeParseTreeReaderContext(itemLoader, itemSequenceId, itemConverter));
    }

    public CreateList[TLoader, TItem](
      parseResult           : ParseResult,
      itemLoader            : ISequenceParseTreeLoader[TLoader],
      itemSequenceId        : int,
      itemConverter         : ParseTreeCastHelper[TLoader, TItem],
      state                 : int,
      startPos              : int,
      endPos                : int
    ) : ListParseTree[TItem]
      where TLoader : IParseTree
      where TItem   : TLoader
    {
      def parsingSequence = (parseResult.ParserHost.ParsingStates[state].SubruleInfo :> SubruleInfo.List).ParsingSequence;
      RecoveryModeListParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeParseTreeReaderContext(itemLoader, itemSequenceId, itemConverter))
    }

    public CreateDynamicExtensionPointList[TItem](
      parseResult      : ParseResult,
      state            : int,
      startPos         : int,
      endPos           : int,
      descriptor       : ExtensibleRuleDescriptor,
      bindingPower     : string
    ) : ListParseTree[TItem]
      where TItem : ParseTree
    {
      def parsingSequence = ((parseResult.ParserHost.ParsingStates[state].SubruleInfo :> SubruleInfo.List).Item.Subrules[0] :> SubruleInfo.ExtensibleCall).RuleParser.DynamicExtensibleParsingSequence;
      def context         = RecoveryModeDynamicExtensionListParseTreeReaderContext(descriptor, bindingPower);
      RecoveryModeDynamicExtensionListParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, context);
    }

    public CreateListWithSeparator[TItemLoader, TItem, TSeparatorLoader, TSeparator](
      parseResult           : ParseResult,
      itemLoader            : ISequenceParseTreeLoader[TItemLoader],
      itemSequenceId        : int,
      itemConverter         : ParseTreeCastHelper[TItemLoader, TItem],
      separatorLoader       : ISequenceParseTreeLoader[TSeparatorLoader],
      separatorSequenceId   : int,
      separatorConverter    : ParseTreeCastHelper[TSeparatorLoader, TSeparator],
      state                 : int,
      startPos              : int,
      endPos                : int
    ) : SequenceParseTree[ListParseTree[TItem], ListParseTree[TSeparator]]
      where TItemLoader      : IParseTree
      where TItem            : TItemLoader
      where TSeparatorLoader : IParseTree
      where TSeparator       : TSeparatorLoader
    {
      def parsingSequence = (parseResult.ParserHost.ParsingStates[state].SubruleInfo :> SubruleInfo.ListWithSeparator).ParsingSequence;
      RecoveryModeListWithSeparatorParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, (RecoveryModeParseTreeReaderContext(itemLoader, itemSequenceId, itemConverter), RecoveryModeParseTreeReaderContext(separatorLoader, separatorSequenceId, separatorConverter)))
    }

    public CreateListWithSeparatorOnlyItems[TItemLoader, TItem](
      parseResult           : ParseResult,
      itemLoader            : ISequenceParseTreeLoader[TItemLoader],
      itemSequenceId        : int,
      itemConverter         : ParseTreeCastHelper[TItemLoader, TItem],
      state                 : int,
      startPos              : int,
      endPos                : int
    ) : ListParseTree[TItem]
      where TItemLoader      : IParseTree
      where TItem            : TItemLoader
    {
      def parsingSequence = (parseResult.ParserHost.ParsingStates[state].SubruleInfo :> SubruleInfo.ListWithSeparator).ParsingSequence;
      RecoveryModeListWithSeparatorOnlyItemsParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeParseTreeReaderContext(itemLoader, itemSequenceId, itemConverter))
    }

    public CreateListWithSeparatorOnlySeparators[TSeparatorLoader, TSeparator](
      parseResult            : ParseResult,
      separatorLoader        : ISequenceParseTreeLoader[TSeparatorLoader],
      separatorSequenceId    : int,
      separatorConverter     : ParseTreeCastHelper[TSeparatorLoader, TSeparator],
      state                  : int,
      startPos               : int,
      endPos                 : int
    ) : ListParseTree[TSeparator]
      where TSeparatorLoader : IParseTree
      where TSeparator       : TSeparatorLoader
    {
      def parsingSequence = (parseResult.ParserHost.ParsingStates[state].SubruleInfo :> SubruleInfo.ListWithSeparator).ParsingSequence;
      RecoveryModeListWithSeparatorOnlySeparatorsParseTreeReader.Instance.Read(parseResult, parsingSequence, startPos, endPos, RecoveryModeParseTreeReaderContext(separatorLoader, separatorSequenceId, separatorConverter))
    }

    public FindRecoveredSubrule(subruleStarts : array[SubruleStart], state : int, startPos : out int, endPos : out int) : bool
    {
      foreach (subruleStart when (subruleStart.State == state) in subruleStarts with i)
      {
        startPos = subruleStart.Pos;
        endPos   = subruleStarts[i + 1].Pos;
        return true;
      }

      foreach (subruleStart when (subruleStart.State > state) in subruleStarts)
      {
        startPos = subruleStart.Pos;
        endPos   = startPos;
        return false;
      }

      def subruleStart = subruleStarts[subruleStarts.Length - 1];
      assert(subruleStart.State == -1);
      startPos = subruleStart.Pos;
      endPos   = startPos;
      false
    }

    public CastArray[TConcrete](items : array[ParseTree]) : array[TConcrete]
      where TConcrete : ParseTree
    {
      def result = array(items.Length);
      Array.Copy(items, result, items.Length);
      result
    }
  }
}
