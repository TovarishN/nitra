using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Utility;

using System;
using System.Runtime;
using System.Runtime.ConstrainedExecution;

namespace Nitra
{
  [Record, StructuralEquality]
  public struct NSpan : IParseTree, IComparable[NSpan]
  {
    public this(pos : int)
    {
      StartPos = pos;
      EndPos = pos;
    }

    public StartPos : int
    {
      [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get;
    }
    public EndPos   : int
    {
      [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get;
    }

    public Length : int
    {
      [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get { EndPos - StartPos }
    }

    public IsEmpty : bool
    {
      [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
      get { StartPos == EndPos }
    }

    public static @+(x : NSpan, y : NSpan) : NSpan { NSpan(Math.Min(x.StartPos, y.StartPos), Math.Max(x.EndPos, y.EndPos)) }

    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(pos : int) : bool { pos <= EndPos && pos >= StartPos }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(start : int, end : int) : bool { start <= EndPos && end >= StartPos }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(other : NSpan)         : bool { IntersectsWith(other.StartPos, other.EndPos) }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public IntersectsWith(other : Location)       : bool { IntersectsWith(other.StartPos, other.EndPos) }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Intersection(start : int, end : int)   : ValueOption[NSpan]
    {
      def start = Math.Max(StartPos, start);
      def end   = Math.Min(EndPos, end);

      if (start <= end)
        VSome(NSpan(start, end))
      else
        VNone()
    }

    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Contains(pos : int) : bool { Contains(pos, pos) }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Contains(start : int, end : int) : bool { end < EndPos && start > StartPos }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Contains(other : NSpan)         : bool { Contains(other.StartPos, other.EndPos) }
    [TargetedPatchingOptOut(AssemblyConstants.TargetedPatchingOptOutText)]
    [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
    public Contains(other : Location)       : bool { Contains(other.StartPos, other.EndPos) }


    public override ToString() : string
    {
      $<#"Start: $StartPos Len: $Length"#>;
    }

    SpanImpl : NSpan implements IParseTree.Span
    {
      get { this }
    }

    public CompareTo(other : NSpan) : int
    {
      def result = StartPos.CompareTo(other.StartPos);
      when (result != 0)
        return result;

      EndPos.CompareTo(other.EndPos)
    }

    public FromStart() : NSpan { NSpan(StartPos) }
    public FromEnd() : NSpan { NSpan(EndPos) }
  }
}
