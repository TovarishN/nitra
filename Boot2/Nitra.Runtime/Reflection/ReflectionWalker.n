using Nemerle;
using Nemerle.Surround;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Internal;
using Nitra.Internal.Recovery;
using Nitra.Runtime.Reflection;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  internal sealed class ReflectionWalker : WalkerBase[List[ReflectionStruct]]
  {
    private static EmptyNodes : ReadOnlyCollection[ReflectionStruct] = ReadOnlyCollection(array[]);

    private CreateNode(info : INitraReflection, name : string, startPos : int, endPos : int, children : List[ReflectionStruct]) : ReflectionStruct
    {
      when (string.IsNullOrWhiteSpace(name))
      {
        assert2(false);
      }
      ReflectionStruct(info, name, if (IsRecovered) ReflectionKind.Recovered else ReflectionKind.Normal, NSpan(startPos, endPos), ToReadOnly(children));
    }

    private CreateNode(kind : ReflectionKind, info : INitraReflection, name : string, startPos : int, endPos : int, children : List[ReflectionStruct]) : ReflectionStruct
    {
      when (string.IsNullOrWhiteSpace(name))
      {
        assert2(false);
      }
      ReflectionStruct(info, name, if (IsRecovered && kind == ReflectionKind.Normal) ReflectionKind.Recovered else kind, NSpan(startPos, endPos), ToReadOnly(children));
    }

    private static ToReadOnly(nodes : List[ReflectionStruct]) : ReadOnlyCollection[ReflectionStruct]
    {
      if (nodes == null)
        EmptyNodes
      else if (nodes.Count > 0)
        ReadOnlyCollection(nodes.ToArray())
      else
        EmptyNodes
    }

    public override OnDeleted(parseResult : IParseResult, startPos : int, endPos : int, sequenceInfo : SequenceInfo, context : List[ReflectionStruct]) : void
    {
      _ = parseResult; _ = sequenceInfo;
      def name = "<Deleted>: " + parseResult.SourceSnapshot.Text.Substring(startPos, endPos - startPos);
      def node = CreateNode(ReflectionKind.Deleted, sequenceInfo, name, startPos, endPos, null);
      context.Add(node);
    }

    public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name =
        if (ruleInfo.IsOptimized)
          "OptimizedList: " + ruleInfo.Description
        else
          "List: " + ruleInfo.Description;
      def children = List();
      base.OnList(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(ruleInfo, name, startPos, endPos, children);
      context.Add(node);
    }

    public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "ListWithSeparator: " + ruleInfo.Description;
      def children = List();
      base.OnListWithSeparator(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(ruleInfo, name, startPos, endPos, children);
      context.Add(node);
    }

    public override OnListItem(rawTreePtr : int, ruleInfo : SubruleInfo.ListItem, startPos : int, endPos : int, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      if (startPos == endPos && startPos != parseResult.CompletionPos)
      {
        def name = "Missed: " + ruleInfo;
        def node = CreateNode(ruleInfo, name, startPos, endPos, null);
        context.Add(node);
      }
      else
        base.OnListItem(rawTreePtr, ruleInfo, startPos, endPos, parseResult, context);
    }

    public override OnDyntamicSyntaxExtensionPoint(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "DyntamicSyntaxExtensionPoint: " + ruleInfo.Description;
      def children = List();
      base.OnDyntamicSyntaxExtensionPoint(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(ruleInfo, name, startPos, endPos, children);
      context.Add(node);
    }

    public override OnDynamicExtensibleItem(rawTreePtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      if (startPos == endPos)
      {
        def name = "Missed: " + ruleParser.FullName;
        def node = CreateNode(ruleParser, name, startPos, endPos, null);
        context.Add(node);
      }
      else
        base.OnDynamicExtensibleItem(rawTreePtr, startPos, endPos, ruleParser, parseResult, context);
    }

    public override OnOption(ruleInfo : SubruleInfo.Option, startPos : int, endPos : int, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "Option: " + ruleInfo.Description;
      def children = List();
      base.OnOption(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(ruleInfo, name, startPos, endPos, children);
      context.Add(node);
    }

    public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.RuleParser.Descriptor.Name;
      def children = List();
      base.OnSimpleCall(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(ruleInfo, name, startPos, endPos, children);
      context.Add(node);
    }

    public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.RuleParser.Descriptor.Name;
      def children = List();
      base.OnExtensibleCall(ruleInfo, startPos, endPos, parseResult, children);
      def node = CreateNode(ruleInfo, name, startPos, endPos, children);
      context.Add(node);
    }

    public override WalkPrefix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PrefixRuleParser, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleParser.ParsingSequence.SequenceInfo.ShortName + " (" + ruleParser.ParserData.Descriptor.Name + " prefix)";
      def children = List();
      base.WalkPrefix(rawTreePtr, startPos, endPos, ruleParser, parseResult, children);
      def node = CreateNode(ruleParser, name, startPos, endPos, children);
      context.Add(node);
    }

    public override WalkPostfix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PostfixRuleParser, parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def bp = ruleParser.BindingPower;
      def bpText = if (bp == 0) "" else " ^ " + bp;
      def name = ruleParser.ParsingSequence.SequenceInfo.ShortName + " (" + ruleParser.ParserData.Descriptor.Name + " postfix"  + bpText + ")";
      def children = List();
      base.WalkPostfix(rawTreePtr, startPos, endPos, ruleParser, parseResult, children);
      def node = CreateNode(ruleParser, name, startPos, endPos, children);
      context.Add(node);
    }

    public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, _parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.Descriptor.Name;
      def node = CreateNode(ruleInfo, name, startPos, endPos, null);
      context.Add(node);
    }

    public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, _parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.Description;
      def node = CreateNode(ruleInfo, name, startPos, endPos, null);
      context.Add(node);
    }

    public override OnMarker(ruleInfo : SubruleInfo.Marker, startPos : int, endPos : int, _parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = ruleInfo.Description;
      def node = CreateNode(ruleInfo, name, startPos, endPos, null);
      context.Add(node);
    }

    public override OnEmpty(ruleInfo : SubruleInfo.Empty, startPos : int, endPos : int, _parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "<Empty>";
      def node = CreateNode(ruleInfo, name, startPos, endPos, null);
      context.Add(node);
    }

    public override OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, _parseResult : IParseResult, context : List[ReflectionStruct]) : void
    {
      def name = "Missed: " + ruleParser.Descriptor.Name;
      def node = CreateNode(ruleParser, name, pos, pos, null);
      context.Add(node);
    }

    public class NullNitraReflection : INitraReflection
    {
      public static Instance : NullNitraReflection = NullNitraReflection();
      public ShortName           : string { get { "<NULL>" } }
      public FullName            : string { get { "<NULL>" } }
      public IsMarker            : bool   { get { false } }
      public CanParseEmptyString : bool   { get { false } }
    }

    public override OnAmbiguous(parseResult : IParseResult, parseWays : array[array[SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, context : List[ReflectionStruct]) : void
    {
      def root = List.[ReflectionStruct]();
      foreach (parseWay in parseWays)
      {
        def children = List();
        Walk(parseResult, parseWay, sequenceInfo, children);
        def info = sequenceInfo : INitraReflection ?? NullNitraReflection.Instance;
        def node = CreateNode(ReflectionKind.Ambiguous, info, info.ShortName, startPos, endPos, children);
        root.Add(node);
      }
      def info = sequenceInfo : INitraReflection ?? NullNitraReflection.Instance;
      def node = CreateNode(ReflectionKind.Ambiguous, info, "Ambiguous of " + info.FullName, startPos, endPos, root);
      context.Add(node);
    }

    public override OnAmbiguousPrefix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguous : List[ExtensionAmbiguity[PrefixRuleParser]], startPos : int, endPos : int, context : List[ReflectionStruct]) : void
    {
      OnAmbiguousImpl("prefixes", parseResult, extensibleRuleParser, ambiguous, startPos, endPos, context, true);
    }

    public override OnAmbiguousPostfix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguous : List[ExtensionAmbiguity[PostfixRuleParser]], startPos : int, endPos : int, context : List[ReflectionStruct]) : void
    {
      OnAmbiguousImpl("suffixes", parseResult, extensibleRuleParser, ambiguous, startPos, endPos, context, false);
    }

    private OnAmbiguousImpl[T](name : string, parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguous : List[ExtensionAmbiguity[T]], startPos : int, endPos : int, context : List[ReflectionStruct], isPrefix : bool) : void
      where T : ExtensionRuleParser
    {
      def root = List.[ReflectionStruct]();

      foreach (parser in ambiguous)
      {
        def children = List();
        if (isPrefix)
          _ = WalkPrefix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser :> PrefixRuleParser, parseResult, children);
        else
          _ = WalkPostfix(parser.RawTreePtr, startPos, endPos, parser.ExtensionRuleParser :> PostfixRuleParser, parseResult, children);
        def info = parser.ExtensionRuleParser : INitraReflection;
        def node = CreateNode(ReflectionKind.Ambiguous, info, info.ShortName, startPos, endPos, children);
        root.Add(node);
      }

      def info = extensibleRuleParser : INitraReflection;
      def node = CreateNode(ReflectionKind.Ambiguous, info, "Ambiguous " + name + " of " + info.FullName, startPos, endPos, root);
      context.Add(node);
    }
  }
}
