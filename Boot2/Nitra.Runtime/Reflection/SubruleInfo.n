using Nitra.Internal;
using Nitra.Internal.Recovery;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Nitra.Runtime.Reflection
{
  [Record]
  public variant SubruleInfo : INitraReflection
  {
    public delegate PredicateDelegate(curTextPos : int, text : string, parseResult : ParseResult) : bool;

    [RecordIgnore]
    public Owner                : SequenceInfo { get; internal set; }

    public Offset               : int          { get; }
    public Description          : string       { get; }
    public State                : int          { get; }

    public CanParseEmptyString  : bool         { get { MandatoryTokenCount == 0 } }

    public IsVoid               : bool         { get; }

    public HeadPredicate        : SubruleInfo.PredicateDelegate { get; }
    public HeadPredicates       : array[SequenceInfo.Predicate] { get; internal set; }

    [RecordIgnore]
    public MandatoryTokenCount  : int          { get; internal set; }
    [RecordIgnore]
    public Index                : int          { get; internal set; }
    [RecordIgnore]
    public IndexWithMarkers     : int          { get; internal set; }

    public IsStart              : bool         { get { Owner.Subrules[0] : object == this } }
    public IsLoopSeparatorStart : bool         { get { IsStart && IsLoopSeparator } }
    public IsLoopSeparator      : bool         { get { Owner is SequenceInfo.ListWithSeparatorSeparator } }
    public IsLoopBody           : bool         { get { Owner is SequenceInfo.ListWithSeparatorItem } }
    public IsMarker             : bool         { get { this is Marker } }

    [RecordIgnore]
    internal ConditionalEmpty    : array[SubruleInfo.PredicateDelegate] { get; set; default null }
    internal CanBeEmptyAtPos(pos : int, parseResult : IParseResult) : bool
    {
      when (!CanParseEmptyString)
        return false;
      when (ConditionalEmpty == null)
        return true;
      def parseResult = parseResult :> ParseResult;
      foreach (cond in ConditionalEmpty)
        unless (cond(pos, parseResult.Text, parseResult))
          return false;
      true
    }

    | Empty
    | RegularCall                { Descriptor : RegularRuleDescriptor; SpanClass : SpanClass; FirstCharLowerBound : char; FirstCharUpperBound : char; CanBeEmpty : bool; public Literals : list[string];  }
    | ExtensibleCall             { RuleParser : ExtensibleRuleParser; }
    | SimpleCall                 { RuleParser : SimpleRuleParser; }
    | Option                     { Rule : SequenceInfo.Option; ParseRule : (int * string * Nitra.ParseResult) -> int; }
    | List
      {
        Item : SequenceInfo.ListItem;
        ParseItem : (int * string * Nitra.ParseResult) -> int;
        Min : int;
        Max : int?;
        IsOptimized : bool;
        IsDynamicSyntaxExtentionPoint : bool;
        [RecordIgnore]
        public ParsingSequence : ParsingSequence { get; internal set; }
        [RecordIgnore]
        public ListItemRule : SubruleInfo.ListItem { get; internal set; }
      }

    | ListWithSeparator
      {
        Item : SequenceInfo.ListWithSeparatorItem;
        ParseItem : (int * string * Nitra.ParseResult) -> int;
        Separator : SequenceInfo.ListWithSeparatorSeparator;
        ParseSeparator : (int * string * Nitra.ParseResult) -> int;
        Min : int;
        Max : int?;
        HangingSeparator : bool;
        [RecordIgnore]
        public ParsingSequence : ParsingSequence { get; internal set; }
        [RecordIgnore]
        public ListItemRule : SubruleInfo.ListItem { get; internal set; }
        [RecordIgnore]
        public ListItemSeparator : SubruleInfo.ListItem { get; internal set; }
      }

    | ListItem                   { ParsingSequence : ParsingSequence; IsItem : bool; }
    | TokenString                { Str : string; IsKeyToken : bool; SpanClass : SpanClass; }
    | Marker                     { Name : string; }

    public Parse(pos : int, text : string, parseResult : ParseResult) : int
    {
      def praseSubrules(subrules, mutable pos : int, text : string, parseResult : ParseResult)
      {
        res:
        {
          for (mutable i = 0; i < subrules.Length; ++i)
          {
            when (pos < 0)
              res(-1);
            pos = subrules[i].Parse(pos, text, parseResult);
          }
          pos
        }
      }
      when (HeadPredicate != null)
      when (!HeadPredicate(pos, text, parseResult))
        return -1;
      match (this)
      {
        | ListItem                  => assert(false)
        | Empty                     => if (pos <= text.Length) pos else -1
        | Marker                    => if (pos <= text.Length) pos else -1
        | RegularCall       as rule => rule.Descriptor.Parse(pos, text);
        | ExtensibleCall    as rule => rule.RuleParser.Parse(pos, text, parseResult)
        | SimpleCall        as rule => rule.RuleParser.Parse(pos, text, parseResult)
        | Option            as rule =>
          def newPos = rule.ParseRule(pos, text, parseResult);
          if (newPos < 0) pos else newPos

        | List              as rule when rule.IsOptimized || rule.IsDynamicSyntaxExtentionPoint =>
          mutable curPos = pos;
          mutable counter = 0;
          while (true)
          {
            def newPos = praseSubrules(rule.Item.Subrules, curPos, text, parseResult);
            if (newPos < 0)
              break;
            else
              curPos = newPos;
            ++counter;
            when (counter == rule.Max)
              break;
          }
          if (counter < rule.Min) -1 else curPos

        | List              as rule =>
          mutable curPos = pos;
          mutable counter = 0;
          while (true)
          {
            def newPos = rule.ParseItem(curPos, text, parseResult);
            if (newPos < 0)
              break;
            else
              curPos = newPos;
            ++counter;
            when (counter == rule.Max)
              break;
          }
          if (counter < rule.Min) -1 else curPos

        | ListWithSeparator as rule =>
          mutable curPos = pos;
          mutable endPos = pos;
          mutable counter = 0;
          while (true)
          {
            def newPos = rule.ParseItem(curPos, text, parseResult);
            if (newPos < 0)
              break;
            else
              curPos = newPos;
            ++counter;
            endPos = curPos;
            when (counter == rule.Max)
              break;

            def newPos = rule.ParseSeparator(curPos, text, parseResult);
            if (newPos < 0)
              break;
            else
              curPos = newPos;
            when (rule.HangingSeparator)
              endPos = curPos;
          }
          if (counter < rule.Min) -1 else endPos

        | TokenString       as rule =>
          def str = rule.Str;
          if (pos + str.Length <= text.Length)
          {
            for (mutable i = 0; i < str.Length; ++i)
              when (text[pos + i] != str[i])
                return -1;
            pos + str.Length
          }
          else
            -1
      }
    }

    public ShortName : string
    {
      get
      {
        match (this)
        {
          | ListItem as item => item.ParsingSequence.SequenceInfo.ShortName
          | _ => this.Owner?.ShortName
        }
      }
    }

    public FullName  : string
    {
      get
      {
        match (this)
        {
          | ListItem as item => item.ParsingSequence.SequenceInfo.FullName
          | _ => this.Owner?.FullName
        }
      }
    }

    /*
    public VisitVoid(
      regularCall       : Action[RegularCallDelegate, RegularRuleDescriptor] = null,
      extensibleCall    : Action[ExtensibleRuleParser] = null,
      simpleCall        : Action[SimpleRuleParser] = null,
      option            : Action[SequenceInfo.Option] = null,
      aList             : Action[SequenceInfo.ListItem] = null,
      listWithSeparator : Action[SequenceInfo.ListWithSeparatorItem, SequenceInfo.ListWithSeparatorSeparator] = null,
      predicate         : Action[SequenceInfo.Predicate] = null,
      tokenString       : Action[string, bool] = null,
      noMatch           : Action = null) : void
    {
      match (this)
      {
        | RegularCall      (call, descriptor) when regularCall       != null => regularCall(call, descriptor)
        | ExtensibleCall   (ruleParser)       when extensibleCall    != null => extensibleCall(ruleParser)
        | SimpleCall       (ruleParser)       when simpleCall        != null => simpleCall(ruleParser)
        | Option           (rule)             when option            != null => option(rule)
        | List             (rule)             when aList             != null => aList(rule)
        | ListWithSeparator(rule, sep)        when listWithSeparator != null => listWithSeparator(rule, sep)
        | Predicate        (rule)             when predicate         != null => predicate(rule)
        | TokenString      (str, isKeyToken)  when tokenString       != null => tokenString(str, isKeyToken)
        | _                                                                  => noMatch()
      }
    }

    public Visit[T](
      regularCall       : Func[RegularCallDelegate, RegularRuleDescriptor, T] = null,
      extensibleCall    : Func[ExtensibleRuleParser, T] = null,
      simpleCall        : Func[SimpleRuleParser, T] = null,
      option            : Func[SequenceInfo.Option, T] = null,
      aList             : Func[SequenceInfo.ListItem, T] = null,
      listWithSeparator : Func[SequenceInfo.ListWithSeparatorItem, SequenceInfo.ListWithSeparatorSeparator, T] = null,
      predicate         : Func[SequenceInfo.Predicate, T] = null,
      tokenString       : Func[string, bool, T] = null,
      noMatch           : Func[T] = null) : T
    {
      match (this)
      {
        | RegularCall      (call, descriptor) when regularCall       != null => regularCall(call, descriptor)
        | ExtensibleCall   (ruleParser)       when extensibleCall    != null => extensibleCall(ruleParser)
        | SimpleCall       (ruleParser)       when simpleCall        != null => simpleCall(ruleParser)
        | Option           (rule)             when option            != null => option(rule)
        | List             (rule)             when aList             != null => aList(rule)
        | ListWithSeparator(rule, sep)        when listWithSeparator != null => listWithSeparator(rule, sep)
        | Predicate        (rule)             when predicate         != null => predicate(rule)
        | TokenString      (str, isKeyToken)  when tokenString       != null => tokenString(str, isKeyToken)
        | _                                                                  => noMatch()
      }
    }
*/
    public override ToString() : string
    {
      Description
    }
  }
}
