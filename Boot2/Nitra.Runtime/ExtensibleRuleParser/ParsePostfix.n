using Nitra.Internal.Recovery;
using Nitra.Runtime.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;
using Nemerle.Imperative.GoTo;

using System;
using System.Collections.Generic;

namespace Nitra.Internal
{
  public sealed partial class ExtensibleRuleParser
  {
    public BestPostfix(mutable bestResult : int, parseResult : ParseResult) : int
    {
      // пропускаем правила с низкой силой связывания.
      while (bestResult > 0 && (parseResult.rawTree[bestResult] & RawTreeMask.Id) < FirstPostfixRuleId)
        bestResult = parseResult.rawTree[bestResult + RawTreeOfs.Next];
      // ищем лучшее правило среди тех у кого подходящая сила связывания.
      while (bestResult > 0 && (parseResult.rawTree[bestResult] & RawTreeMask.Flags) != RawTreeFlags.Best)
        bestResult = parseResult.rawTree[bestResult + RawTreeOfs.Next];
      bestResult;
    }

    public ParsePostfix(mutable curTextPos : int, text : string, parseResult : ParseResult) : int
    {
      unchecked
      {
        mutable postfixRawTreePtr;
        mutable state = ExtensionRuleParserState();
        state.parseResult = parseResult;
        state.curTextPos = curTextPos;

        mutable i;
        mutable c; // временная переменная для отсечения правил по первой букве

        when (curTextPos >= text.Length) // постфиксное правило которое не съело ни одного символа игнорируется
          return curTextPos;// при достижении конца текста есть нечего
        //ищем запомненое
        postfixRawTreePtr = parseResult.TryGetRawTree(curTextPos, PostfixId);
        when (postfixRawTreePtr > 0)
        {
          def maxFailPos = parseResult.rawTree[postfixRawTreePtr + PostfixOfs.MaxFailPos];
          when (parseResult.MaxFailPos < maxFailPos)
            parseResult.MaxFailPos = maxFailPos;
          state.lastResult = parseResult.GetPostfix(postfixRawTreePtr);//список разобраных с этого места правил
          state.bestResult = state.lastResult;
          i = parseResult.rawTree[postfixRawTreePtr + PostfixOfs.FirstRuleIndex] - 1;//индекс первого не разобранного правила
          if (i >= FirstPostfixRule)// не всё разобрано
          {
            state.bestResult = BestPostfix(state.bestResult, parseResult);
            if (state.bestResult > 0 && parseResult.rawTree[state.bestResult + RawTreeOfs.State] == ParseResult.RawTreeParsedState)//Убеждаемся что разбор успешный
              state.bestEndPos = curTextPos + GetPostfixSize(state.bestResult, parseResult);
            else
              state.bestEndPos = -1;
            goto postfix_parse;//парсим то что не распарсили раньше
          }
          else
          {
            state.bestResult = BestPostfix(state.bestResult, parseResult);
            if (state.bestResult > 0)
            {
              def rawTreeState = parseResult.rawTree[state.bestResult + RawTreeOfs.State];
              if (rawTreeState == ParseResult.RawTreeParsedState)//Убеждаемся что разбор успешный
                return curTextPos + GetPostfixSize(state.bestResult, parseResult);
              else if (rawTreeState < 0)
                assert3(false)
              else
                return curTextPos;//облом. Заканчиваем разбор.
            }
            else
              return curTextPos;//облом. Заканчиваем разбор.
          }
        }
        //нет мемоизации
        postfixRawTreePtr = parseResult.Allocate(PostfixOfs.NodeSize, PostfixId);
        parseResult.rawTree[postfixRawTreePtr + PostfixOfs.Next] = parseResult.memoize[curTextPos];
        parseResult.memoize[curTextPos] = postfixRawTreePtr;
        state.bestResult = 0;
        state.bestEndPos = curTextPos;
        state.lastResult = 0;
        i = PostfixRules.Length - 1;
      label postfix_parse;
        parseResult.rawTree[postfixRawTreePtr + PostfixOfs.FirstRuleIndex] = FirstPostfixRule;
        c = text[curTextPos];
        for (; i >= FirstPostfixRule; --i)
        {
          def postfixRule = PostfixRules[i];
          when (postfixRule.LowerBound <= c && c <= postfixRule.UpperBound)
          {
            state.newResult = -1;
            state.newEndPos = postfixRule.Parse(curTextPos, text, ref state.newResult, parseResult);
            when (state.newResult > 0)
              state.Append();
          }
        }

        parseResult.rawTree[postfixRawTreePtr + PostfixOfs.List] = state.lastResult;

        when (state.bestResult <= 0 || state.bestEndPos < 0)// не смогли разобрать постфикс
        {
          when (curTextPos > parseResult.MaxFailPos)
            parseResult.MaxFailPos = curTextPos;
          parseResult.rawTree[postfixRawTreePtr + PostfixOfs.MaxFailPos] = parseResult.MaxFailPos;
          return curTextPos;
        }

        parseResult.rawTree[postfixRawTreePtr + PostfixOfs.MaxFailPos] = parseResult.MaxFailPos;

        when (state.bestEndPos <= curTextPos)
          return curTextPos;
        state.bestEndPos;
      }
    }
  }
}
