using Nitra.Runtime;
using Nitra.Typing;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.ProjectSystem
{
  public abstract class NitraProject : Project
  {
    protected this(compilerMessages : ICompilerMessages)
    {
      base(compilerMessages)
    }

    public abstract Manager : ManagerClass { get; }

    public ReferenceSymbolOpt : option[AstSymbol]
    {
      mutable _reference : option[AstSymbol];
      get
      {
        when (_reference : object == null)
          _reference = BindWellKnownSymbol(["Nitra", "Declarations", "Reference"]);
        _reference
      }
    }

    public NameSymbolOpt : option[AstSymbol]
    {
      mutable _name : option[AstSymbol];
      get
      {
        when (_name : object == null)
          _name = BindWellKnownSymbol(["Nitra", "Declarations", "Name"]);
        _name
      }
    }

    public DeclarationSymbolOpt : option[AstSymbol]
    {
      mutable _declaration : option[AstSymbol];
      get
      {
        when (_declaration : object == null)
          _declaration = BindWellKnownSymbol(["Nitra", "Declarations", "Declaration"]);
        _declaration
      }
    }

    public LanguageSymbolOpt : option[LanguageSymbol]
    {
      mutable _language : option[LanguageSymbol];
      get
      {
        when (_language : object == null)
          _language = BindWellKnownSymbol(["Nitra", "Language"]);
        _language
      }
    }

    public KeywordSpanClassSymbolOpt : option[SpanClassSymbol]
    {
      mutable _keywordSpanClass : option[SpanClassSymbol];
      get
      {
        when (_keywordSpanClass : object == null)
          _keywordSpanClass = BindWellKnownSymbol(["Nitra", "Language", "Keyword"]);
        _keywordSpanClass
      }
    }

    public abstract GetNemerleType(symbol : Symbol) : FixedType;
    public abstract MakeFakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location;
    public abstract MakeNitraLocation(location : Nemerle.Compiler.Location) : Nitra.Location;
    public abstract CreateNemerleFile(source : ISource) : NemerleFile;
    public virtual EmitSymbol(symbol : DeclarationSymbol, context : DependentPropertyEvalContext) : void
    {
      IgnoreParams();
    }

    private BindWellKnownSymbol[T](path : list[string]) : option[T]
      where T : Symbol
    {
      match (this.RootNamespace.Node.BindMany.[T](path))
      {
        | [one] => Some(one)
        | []  =>
          this.Error(Location.Default, $<#Unbound name '..$(path; ".")'.#>);
          None()

        | many =>
          using (root = this.RootWarning(Location.Default, $<#Ambiguous '..$(path; ".")' symbol.#>))
            foreach (s in many)
              root.Hint(s.FirstLocation, "Previous definition.");
          None()
      }
    }
  }
}
