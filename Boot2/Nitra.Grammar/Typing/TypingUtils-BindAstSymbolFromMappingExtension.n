using Nitra.Model;
using Nitra.ProjectSystem;
using Nitra.Runtime;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;

using G = NitraSyntaxParseTree;


namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal BindAstSymbolFromMappingExtension(qid : G.QualifiedReference, context : Context) : SymbolRef[AstSymbol]
    {
      BindAstSymbolFromMappingExtension(qid.Location, qid.CalcLocations(), context, context)
    }

    internal BindAstSymbolFromMappingExtension(loc : Location, qid : list[Location], context : Context, compilerMessages : ICompilerMessages) : SymbolRef[AstSymbol]
    {
      def candidates    =
        match (context.GetContext.[MapSyntaxContext]().ReturnType)
        {
          | Ast(astSymbol) | List(astSymbol) | OptionList(astSymbol) | Option(astSymbol) => astSymbol.Node.BindMany(qid)
          | Void => []
        };

      def bindingResult =
        if (candidates is [])
          context.BindMany(qid)
        else
          BindingUtils.MakeBindingResult(loc, candidates);
      Utils.MakeSymbolRefWithMessages(bindingResult, compilerMessages)
    }
  }
}
