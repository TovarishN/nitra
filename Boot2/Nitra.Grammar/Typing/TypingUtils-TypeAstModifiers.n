using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nitra.Declarations;

using System;

using G = NitraSyntaxParseTree;

namespace Nitra.Typing
{
  public partial module TypingUtils
  {
    internal TypeAstModifiers(modifiers : ListParseTree[G.AstModifier], isExtension : bool, isDeclaration : bool, compilerMessages : ICompilerMessages) : bool * bool * AstCardinality * bool
    {
      def isAbstract  = Utils.FoldThrough(modifiers, false,                 _.IsAbstract(_, isExtension, compilerMessages));
      def cardinality = Utils.FoldThrough(modifiers, AstCardinality.Single, _.Cardinality(_, isDeclaration, isAbstract, compilerMessages));
      def ignoreCase  = Utils.FoldThrough(modifiers, false,                 _.IsIgnoreCase(_, isDeclaration, isAbstract, compilerMessages));
      (isDeclaration, isAbstract, cardinality, ignoreCase)
    }

    internal TypeAstModifier_IsAbstract(loc : ILocated, acc : bool, isExtension : bool, compilerMessages : ICompilerMessages) : bool
    {
      if (isExtension)
      {
        compilerMessages.Error(loc, "Modifier 'abstract' is not valid on extension ast");
        acc
      }
      else if (acc)
      {
        compilerMessages.Error(loc, "Duplicate 'abstract' modifier");
        acc
      }
      else
        true
    }

    internal TypeAstModifier_Cardinality(loc : ILocated, acc : AstCardinality, isDeclaration : bool, isAbstract : bool, compilerMessages : ICompilerMessages, value : AstCardinality) : AstCardinality
    {
      if (acc %&& value)
      {
        compilerMessages.Error(loc, $"Duplicate '$(value.GetText())' modifier");
        acc
      }
      else if (isAbstract)
      {
        compilerMessages.Error(loc, $"Modifier '$(value.GetText())' is not compatible with 'abstract'");
        acc
      }
      else if (isDeclaration)
        acc %| value
      else
      {
        compilerMessages.Error(loc, $"Modifier '$(value.GetText())' is not valid on ast");
        acc
      }
    }

    internal TypeAstModifier_IsIgnoreCase(loc : ILocated, acc : bool, isDeclaration : bool, isAbstract : bool, compilerMessages : ICompilerMessages) : bool
    {
      if (acc)
      {
        compilerMessages.Error(loc, $"Duplicate 'ignore-case' modifier");
        acc
      }
      else if (!isDeclaration)
      {
        compilerMessages.Error(loc, $"Modifier 'ignore-case' is not valid on ast");
        acc
      }
      else if (isAbstract)
      {
        compilerMessages.Error(loc, "Modifier 'ignore-case' is not compatible with 'abstract'");
        acc
      }
      else
        true
    }
  }
}
