using DotNet;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Ast;
using Nitra.Ast.AstMembers;
using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Internal;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace Nitra
{
  public module AstUtils
  {
    public static GetAstId : int = StringIndex.GetId("GetAst");

    public Wait[V, R](value : V, result : R) : R
    {
      _ = value;
      result
    }

    public UpdateLiterals(inMap : Map[string, string], literals : StringLiteral.IAstList, name : string) : Map[string, string]
    {
      when (string.IsNullOrEmpty(name))
        return inMap;

      def xs = literals.Select(x => x.Value.ValueOrDefault).Where(x => !string.IsNullOrEmpty(x)).Select(x => (x, name));
      inMap.ReplaceRange(xs)
    }

    public MakeName(loc : Location, value : string, userDefined : bool) : ParsedValue[string * bool]
    {
      def text  = loc.GetText().TrimEnd();
      def start = loc.Span.StartPos;
      ParsedValue(NSpan(start, start + text.Length), (value, userDefined))
    }

    public MakeName(loc : Location, parsedValue : ParsedValue[string * bool]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return parsedValue;

      def (value, userDefined) = parsedValue.Value;
      MakeName(loc, value, userDefined)
    }

    public MakeName(loc : Location, suffix : string, parsedValue : ParsedValue[string * bool]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return parsedValue;

      def (value, userDefined) = parsedValue.Value;
      def name = if (userDefined) value else value + suffix;
      MakeName(loc, name, userDefined)
    }

    public MakeOptionalName(loc : Location, parsedValue : ParsedValue[string * bool]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return parsedValue;

      MakeName(loc, parsedValue.Value[0] + "Opt", parsedValue.Value[1])
    }

    public MakePlural(loc : Location, parsedValue : ParsedValue[string * bool]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return parsedValue;

      MakeName(loc, JetBrains.Util.NounUtil.GetPlural(parsedValue.Value[0]), parsedValue.Value[1])
    }

    public NMakeLiteralName(parsedValue : ParsedValue[string], literals : Map[string, string]) : ParsedValue[string * bool]
    {
      unless (parsedValue.HasValue)
        return ParsedValue(parsedValue.Span.StartPos);

      def value = parsedValue.ValueOrDefault;

      if (literals.Find(value) is Some(name))
        ParsedValue(parsedValue.Span, (name, true))
      else if (Utils.IsIdentifier(value))
        ParsedValue(parsedValue.Span, (Utils.ToPascalCase(value, "Kw"), false))
      else
        ParsedValue(parsedValue.Span, ("Literal", false))
    }

    public MakeCallFieldName(parsedValue : ParsedValue[int]) : ParsedValue[string * bool]
    {
      if (parsedValue.HasValue)
        ParsedValue(parsedValue.Span, (StringIndex.GetText(parsedValue.ValueOrDefault), false))
      else
        ParsedValue(parsedValue.Span.StartPos)
    }

    public TryGetLiterals(reference : Ref[DeclarationSymbol], literals : Map[string, string]) : Map[string, string]
    {
      when (reference.IsSymbolEvaluated)
      when (reference.Symbol is SyntaxModuleSymbol/*(IsLiteralsEvaluated = true)*/ as m)
        return literals.ReplaceRange(m.Literals);

      literals
    }

    public static Init[T](this context : DependentPropertyEvalContext, symbol : T) : T
      where T: DeclarationSymbol
    {
      symbol.EvalProperties(context);
      symbol
    }

    public static Init[T](this context : DependentPropertyEvalContext, symbol : T, name : string) : T
      where T: DeclarationSymbol
    {
      (symbol :> SymbolBase).UpdateName(name);
      symbol.EvalProperties(context);
      symbol
    }

    public CanBeTupleElem(x : RuleTypeSymbol) : bool
    {
      !(x is RuleVoidTypeSymbol)
    }

    public InitTuple(context : DependentPropertyEvalContext, arg1 : RuleTypeSymbol, restArgs : ImmutableArray[RuleTypeSymbol]) : RuleTypeSymbol
    {
      when (restArgs.Length == 0)
      {
        if (CanBeTupleElem(arg1))
          return arg1;
        else
          return WellKnownSymbols.VoidRuleType;
      }

      def args = List();

      when (CanBeTupleElem(arg1))
        args.Add(arg1);

      foreach (arg when CanBeTupleElem(arg) in restArgs)
        args.Add(arg);

      match (args.Count)
      {
        | 0 => WellKnownSymbols.VoidRuleType
        | 1 => args[0]
        | _ => CreateTupleRuleType(args, context)
      }
    }

    public InitTuple(context : DependentPropertyEvalContext, arg1 : RuleTypeSymbol, arg2 : RuleTypeSymbol) : RuleTypeSymbol
    {
      match (CanBeTupleElem(arg1), CanBeTupleElem(arg2))
      {
        | (false,  true) => arg2
        | (true,  false) => arg1
        | (false, false) => WellKnownSymbols.VoidRuleType
        | (true,   true) => CreateTupleRuleType(array[arg1, arg2], context)
      }
    }

    public CreateTupleRuleType(args : IList[RuleTypeSymbol], context : DependentPropertyEvalContext) : RuleTypeSymbol
    {
      def symbol = RuleTupleTypeSymbol();
      symbol.ElemTypes = args;
      symbol.EvalProperties(context);
      symbol
    }

    public InitList(context : DependentPropertyEvalContext, elemType : RuleTypeSymbol) : RuleTypeSymbol
    {
      unless (CanBeTupleElem(elemType))
        return WellKnownSymbols.VoidRuleType;

      def symbol = RuleListTypeSymbol();
      symbol.ElemType = elemType;
      context.Init(symbol)
    }

    public InitOption(context : DependentPropertyEvalContext, valueType : RuleTypeSymbol) : RuleTypeSymbol
    {
      unless (CanBeTupleElem(valueType))
        return WellKnownSymbols.VoidRuleType;

      def symbol      = RuleOptionTypeSymbol();
      symbol.ValueType = valueType;
      context.Init(symbol)
    }

    public CreateRuleTypeVar(context : DependentPropertyEvalContext) : RuleTypeVarSymbol
    {
      def symbol = RuleTypeVarSymbol();
      symbol.EvalProperties(context);
      symbol
    }

    public CreateAstTypeVar(context : DependentPropertyEvalContext) : AstTypeVarSymbol
    {
      def symbol = AstTypeVarSymbol();
      symbol.EvalProperties(context);
      symbol
    }

    public CreateListAstType(loc : ILocated, item : Ref[DeclarationSymbol], context : DependentPropertyEvalContext) : Ref[DeclarationSymbol]
    {
      // TODO: handle unresolved Ref
      item.Resolve(fun (_)
      {
        | symbol is AstSymbol => VSome(CreateListAstType(loc, symbol, context))
        | _ => VNone()
      })
    }

    public CreateListAstType(loc : ILocated, elemType : AstTypeSymbol, context : DependentPropertyEvalContext) : ListAstTypeSymbol
    {
      def listSymbol = ListAstTypeSymbol();
      listSymbol.ElemType = elemType;
      listSymbol.EvalProperties(context);
      listSymbol
    }

    public CreateOptionAstType(loc : ILocated, item : Ref[DeclarationSymbol], context : DependentPropertyEvalContext) : Ref[DeclarationSymbol]
    {
      // TODO: handle unresolved Ref
      item.Resolve(fun (_)
      {
        | symbol is AstSymbol => VSome(CreateOptionAstType(loc, symbol, context))
        | _ => VNone()
      })
    }

    public CreateOptionAstType(loc : ILocated, valueType : AstTypeSymbol, context : DependentPropertyEvalContext) : OptionAstTypeSymbol
    {
      def optionSymbol = OptionAstTypeSymbol();
      optionSymbol.ValueType = valueType;
      optionSymbol.EvalProperties(context);
      optionSymbol
    }

    public CreateFunctionType(loc : ILocated, thisType : TypeSymbol, parameters : IList[TypeSymbol], returnType : TypeSymbol, context : DependentPropertyEvalContext) : FunctionTypeSymbol
    {
      def parametersWithThis = List();
      parametersWithThis.Add(thisType);
      parametersWithThis.AddRange(parameters);
      CreateFunctionType(loc, parametersWithThis, returnType, context)
    }

    public CreateFunctionType(loc : ILocated, parameters : IList[TypeSymbol], returnType : TypeSymbol, context : DependentPropertyEvalContext) : FunctionTypeSymbol
    {
      def funcSymbol = FunctionTypeSymbol();
      funcSymbol.Parameters = parameters;
      funcSymbol.ReturnType = returnType;
      funcSymbol.EvalProperties(context);
      funcSymbol
    }

    public BindAstExtension(name : Reference, scope : Scope, defaultReturnType : AstTypeSymbol) : Ref[AstTypeSymbol]
    {
      def bindRes = scope.Bind(name);

      if (bindRes.IsEmpty)
        Ref.CreateBind(name.Location, BindResult.Single(defaultReturnType))
      else
        Ref.CreateBind(name.Location, bindRes)
    }

    public CreateRuleField(parseTree : NitraSyntaxParseTree.RuleExpression) : RuleField
    {
      def name = Name(parseTree.Location.FromStart(), "<none>");
      def expr = parseTree.GetAst();
      RuleField(parseTree.Location, name, expr)
    }

    public CreateRuleFieldList(parseTree : NitraSyntaxParseTree.RuleExpression) : RuleField.IAstList
    {
      RuleField.AstList(parseTree, AstUtils.CreateRuleField(parseTree));
    }

    public CreateName(loc : Location, desiredName : ParsedValue[string * bool]) : Name
    {
      def text = desiredName.ValueOrDefault[0] ?? "";
      def name = if (text.StartsWith("Kw", StringComparison.Ordinal)) text.Substring(2) else text;
      Name(loc.WithSpan(desiredName.Span), name)
    }

    public IsLooksLikeVariableName(text : string) : bool
    {
      text.Length > 0 && (text[0] == '_' || char.IsLower(text[0]))
    }

    public CreateThisDeclaration(parseTree : ParseTree) : ThisDeclaration
    {
      def loc = parseTree.Location.FromStart();
      ThisDeclaration(loc, Name(loc, "this"))
    }

    public CreateSymbolName(astName : Name) : Name
    {
      Name(astName.Location, astName.Text + "Symbol")
    }

    public CreateMapSyntaxName(parseTree : ParseTree) : Name
    {
      Name(parseTree.Location.FromStart(), GetAstId)
    }

    public CreateMapSyntaxRef(loc : Location, scope : Scope, argumentTypes : ImmutableArray[TypeSymbol]) : Ref[MapSyntaxSymbol]
    {
      def getAstIdRef = Reference(loc, GetAstId);
      def len = argumentTypes.Length;
      def r = getAstIdRef.Bind(scope);
      def isMatch(symbol : MapSyntaxSymbol) : bool
      {
        def parms = symbol.Parameters;
        when (parms.Count != len)
          return false;

        for (mutable i = 0; i < argumentTypes.Length; ++i)
        {
          def p = parms[i];
          def t = argumentTypes[i];
          unless (p.IsTypeEvaluated)
            return false;
          unless (AstTypeUnifier.Instance.TryRequire(t, p.Type))
          {
            def r2 = getAstIdRef.Bind.[MapSyntaxSymbol](t.Scope);
            def isResolved(symbol : MapSyntaxSymbol) : bool
            {
              when (symbol.Parameters.Count != 0)
                return false;

              when (!symbol.IsReturnTypeEvaluated)
                return false;

              def res = AstTypeUnifier.Instance.TryRequire(symbol.ReturnType, p.Type);
              res
            }
            def r3 = r2.Resolve(isResolved);
            if (r3.IsUnresolved || r3.IsAmbiguous)
              return false;
            else
              return true;
          }
        }
        true
      }
      r.Resolve(isMatch)
    }

    public TypeParseTreePatternTuple(loc : IAst, expectedType : TypeSymbol, members : Nitra.Ast.ParseTreePattern.IAstList, context : DependentPropertyEvalContext) : TypeSymbol
    {
      if (expectedType is SyntaxRuleSymbol(IsFieldsEvaluated = true, Fields = fields) as returnType)
      {
        def nonVoidTypes = List();
        foreach (field when field.IsTypeEvaluated in fields)
        {
          when (field.Type is RuleTypeSymbol as t)
          unless (t is RuleVoidTypeSymbol)
            nonVoidTypes.Add(t);
        }
        TypeParseTreePatternCtor(loc, members, nonVoidTypes, returnType, context)
      }
      else
      {
        def args = array(members.Count);
        foreach (m in members with index)
        {
          def typeVar = CreateRuleTypeVar(context);
          args[index] = typeVar;
          m.ExpectedType = typeVar;
        }
        CreateTupleRuleType(args, context)
      }
    }

    public TypeParseTreePatternCtor(loc : IAst, members : Nitra.Ast.ParseTreePattern.IAstList, expectedMemberTypes : IList[TypeSymbol], returnType : TypeSymbol, context : DependentPropertyEvalContext) : TypeSymbol
    {
      if (members.Count == expectedMemberTypes.Count)
      {
        foreach (type in expectedMemberTypes with index)
          members[index].ExpectedType = type;
      }
      else when (members.Count != 0)
        // Pattern can be specified with empty parameter list or without parameters: "Ctor()", "Ctor".
        // We should consider these cases as a constructor with any number of parameters given by the Wildcard.
        loc.Error(context, $"Expected pattern of $(expectedMemberTypes.Count), got pattern of $(members.Count).");

      returnType
    }

    public TypeOptionExpression(loc : ILocated, expectedType : TypeSymbol, context : DependentPropertyEvalContext) : TypeSymbol
    {
      def t = CreateOptionAstType(loc, CreateAstTypeVar(context), context);
      _ = AstTypeUnifier.Instance.Unify(t, expectedType);
      t
    }

    public UnifyAndReturn[T](t1 : TypeSymbol, t2 : TypeSymbol, r : T) : T
    {
      _ = AstTypeUnifier.Instance.Unify(t1, t2);
      r
    }

    public CreateImplicitRuleTypeCast(loc : ILocated, thisType : TypeSymbol, expectedType : TypeSymbol, context : DependentPropertyEvalContext) : Ref[FunctionTypeSymbol]
    {
      mutable validCasts = BindResult.Nil();

      when (expectedType : object != WellKnownSymbols.AnyType)
      {
        def castTemplate = CreateFunctionType(loc, array[thisType], AstTypeUnifier.Instance.CreateTypeVar(expectedType, null), context); def castTemplate = castTemplate;
        def canBeImplicitCast(mapSyntax : MapSyntaxSymbol) : bool
        { def castTemplate = castTemplate;
          mapSyntax.IsTypeEvaluated && AstTypeUnifier.Instance.TryUnify(mapSyntax.Type, castTemplate);
        }
        def scope = if (thisType.IsScopeEvaluated) thisType.Scope else EmptyScope.Instance;
        validCasts = scope.Bind.[MapSyntaxSymbol](canBeImplicitCast);
        when (validCasts.IsEmpty)
        match (thisType)
        {
          | RuleTupleTypeSymbol as tuple
          | RuleTypeVarSymbol(IsTypeEvaluated=true, Type=RuleTupleTypeSymbol as tuple) =>
            def elemTypes = tuple.ElemTypes.Filter(t : RuleTypeSymbol => !(t is RuleCharsTypeSymbol));
            when (elemTypes is [et])
              return CreateImplicitRuleTypeCast(loc, et, expectedType, context);

          | _ => ()
        }
      }

      if (validCasts.IsEmpty)
        Ref.CreateBind(loc.Location, CreateFunctionType(loc, array[thisType], thisType, context))
      else
        Ref.CreateBind(loc.Location, "MapSyntaxCast", validCasts.Map(m => VSome(m.Type :> FunctionTypeSymbol)));
    }

    public FilterResolvedLanguage(refs : ImmutableArray[Ref[DeclarationSymbol]]) : Seq[LanguageSymbol]
    {
      def lst = List(refs.Length);

      foreach (r in refs)
      {
        def r2 = r.Resolve.[LanguageSymbol]();
        when (r2.IsSymbolEvaluated)
          lst.Add(r2.Symbol);
      }

      lst
    }

    public ResolveStructuralPropertyType(candidates : Ref[DeclarationSymbol], context : DependentPropertyEvalContext) : Ref[TypeSymbol]
    {
      def resolve(candidate) : ValueOption[TypeSymbol]
      {
        | ast is AstTypeSymbol => VSome(ast)
        | typeSymbol is TypeSymbol => VSome(typeSymbol)
        | _ => VNone()
      }

      def candidates = candidates.CreateRevole(candidates.Result.Map(resolve));

      if (candidates.IsAmbiguous)
      {
        when (candidates.Contains.[AstTypeSymbol]())// && (candidates.Contains.[ClassSymbol]() || candidates.Contains.[InterfaceSymbol]()))
          return candidates.CreateRevole(candidates.Result.Filter(s => !(s is ClassSymbol || s is InterfaceSymbol))); // TODO: надо отследить, что у выбрасываемых символов тот же полное имя
      }
      else
        when (candidates.Contains.[AstTypeSymbol]())
          return candidates;

      mutable parsedValueType;
      def resolve(candidate) : ValueOption[TypeSymbol]
      {
        when (parsedValueType == null)
          parsedValueType = context.BindFullName(1, "Nitra", "ParsedValue");
        def constructedType = TopConstructedTypeSymbol(context, parsedValueType, ImmutableArray.Create(candidate));
        VSome(constructedType)
      }
      def result = candidates.Result.Map(resolve);
      candidates.CreateRevole(result)
    }

    public GetImplicitBaseTypeForLanguage(context : DependentPropertyEvalContext, symbol : LanguageSymbol, _fullName : string) : Seq[TypeSymbol] -> TypeSymbol
    {
      def isBaseLanguage(symbol)
      {
        symbol.Name == "Language" && symbol.FullName == "Nitra.Language"
      }

      when (isBaseLanguage(symbol))
        return null;

      fun (parentTypes)
      {
        foreach (parent in parentTypes)
          when (parent is LanguageSymbol)
            return null;

        context.GetLanguage()
      }
    }

    public FilterResolvedAstType(refs : ImmutableArray[Ref[DeclarationSymbol]], _for_dependency : AstSymbol) : Seq[AstTypeSymbol]
    {
      def lst = List(refs.Length);

      foreach (r in refs)
      {
        def r2 = r.Resolve.[AstTypeSymbol]();
        when (r2.IsSymbolEvaluated)
          lst.Add(r2.Symbol);
      }

      lst
    }

    public SymbolDeclarationBaseTypeSet(parents : Seq[TypeSymbol]) : Seq[SymbolDeclarationSymbol]
    {
      def lst = List();

      foreach (parent is DeclSymbol in parents)
        when (parent.IsAssociatedSymbolEvaluated)
          lst.Add(parent.AssociatedSymbol);

      lst
    }

    public GetImplicitBaseTypeForDeclaration(context : DependentPropertyEvalContext, symbol : AstSymbol, _for_dependency : ImmutableArray[Ref[DeclarationSymbol]]) : Seq[TypeSymbol] -> TypeSymbol
    {
      def isBaseDeclaration(symbol : AstSymbol) : bool
      {
        if (symbol.Name == "Declaration" && symbol.FullName == "Nitra.Declarations.Declaration") // symbol.IsNameValid && && symbol.IsFullNameEvaluated
          true
        else
          false
      }

      when (isBaseDeclaration(symbol) || !(symbol is DeclSymbol))
        return null;

      fun (parentTypes : Seq[TypeSymbol]) : TypeSymbol
      {
        foreach (_parent is DeclSymbol in parentTypes)
        {
          return null;
        }

        context.GetDeclaration()
      }
    }

    public GetImplicitBaseTypeForDeclarationSymbol(context : DependentPropertyEvalContext, symbol : SymbolDeclarationSymbol, _for_dependency : Scope) : Seq[TypeSymbol] -> TypeSymbol
    {
      def isBaseDeclaration(symbol : SymbolDeclarationSymbol) : bool
      {
        if (symbol.Name == "DeclarationSymbol" && symbol.FullName == "Nitra.Declarations.DeclarationSymbol") // symbol.IsNameValid && && symbol.IsFullNameEvaluated
          true
        else
          false
      }

      when (isBaseDeclaration(symbol))
        return null;

      fun (parentTypes : Seq[TypeSymbol]) : TypeSymbol
      {
        unless (parentTypes.IsEmpty())
        {
          return null;
        }

        context.GetDeclarationSymbol()
      }
    }

    public ListAstTypeMakeHint(symbol : ListAstTypeSymbol) : string
    {
      MakeHintWithSuffix(symbol, "*", if (symbol.IsElemTypeEvaluated) symbol.ElemType else null, "ElemType")
    }

    public OptionAstTypeMakeHint(symbol : OptionAstTypeSymbol) : string
    {
      MakeHintWithSuffix(symbol, "?", if (symbol.IsValueTypeEvaluated) symbol.ValueType else null, "ValueType")
    }

    public ValueAstTypeMakeHint(symbol : ValueAstTypeSymbol) : string
    {
      MakeHintWithParam(symbol, if (symbol.IsValueTypeEvaluated) symbol.ValueType else null, "ValueType")
    }

    public MakeHintWithParam(symbol : DeclarationSymbol, paramOpt : DeclarationSymbol, paramName : string) : string
    {
      def builder = StringBuilder();
      try
      {
        _ = builder.Append("<keyword>").Append(symbol.Kind).Append("</keyword> ").SymbolToHintMlWithSubHint(symbol);

        if (paramOpt != null)
        {
          _ = builder.Append("&lt;");
          _ = builder.SymbolToHintMlWithSubHint(paramOpt);
          _ = builder.Append("&gt;");
        }
        else
          _ = builder.Append("«").Append(paramName).Append(" not evaluated»");

        _ = builder.MakeLocations(symbol);
      }
      catch { e => _ = builder.HintMlException(e); }
      builder.ToString()
    }

    public MakeHintWithSuffix(symbol : DeclarationSymbol, suffix : string, paramOpt : DeclarationSymbol, paramName : string) : string
    {
      def builder = StringBuilder();
      try
      {
        _ = builder.Append("<keyword>").Append(symbol.Kind).Append("</keyword> ");

        if (paramOpt != null)
        {
          _ = builder.SymbolToHintMlWithSubHint(paramOpt);
          _ = builder.Append(suffix);
        }
        else
          _ = builder.Append("«").Append(paramName).Append(" not evaluated»");

        _ = builder.MakeLocations(symbol);
      }
      catch { e => _ = builder.HintMlException(e); }
      builder.ToString()
    }

    public FunctionTypeMakeHint(this builder : StringBuilder, symbolCache : ISymbolCache, symbol : FunctionTypeSymbol) : StringBuilder
    {
      try
      {
        // $"..$(Parameters; \" * \") -> $ReturnType"
        if (symbol.IsParametersEvaluated)
          _ = builder.JoinAnd(symbol.Parameters, (b, p) => b.MakeHintForType(symbolCache, p)).Append(" * ");
        else
          _ = builder.Append("«Parameters not evaluated»");

        _ = builder.Append(" -> ");

        if (symbol.IsReturnTypeEvaluated)
          _ = builder.MakeHintForType(symbolCache, symbol.ReturnType);
        else
          _ = builder.Append("«ReturnType not evaluated»");

        builder
      }
      catch { e => builder.HintMlException(e) }
    }

    public FunctionTypeMakeHint(symbolCache : ISymbolCache, symbol : FunctionTypeSymbol) : string
    {
      def builder = StringBuilder();
      builder.Append("<keyword>").Append(symbol.Kind).Append("</keyword> ")
        .FunctionTypeMakeHint(symbolCache, symbol)
        .MakeLocations(symbol)
        .ToString()
    }

    /// Prefer a TPrefer, if the candidate contains both symbols TPrefer and other symbol types.
    public PreferSymbolType[TCandidate, TPrefer](candidates : Ref[TCandidate]) : Ref[TCandidate]
      where TCandidate: DeclarationSymbol
      where TPrefer: TCandidate
    {
    	when (candidates.IsAmbiguous && candidates.Contains.[TPrefer]())
        return candidates.CreateRevole(candidates.Result.Filter(s => s is TPrefer));

      candidates
    }

    public ToHint(this symbol : TypeSymbol, context : DependentPropertyEvalContext) : string
    {
      StringBuilder().MakeHintForType(context.SymbolCache, symbol).ToString()
    }

    public MakeHintForType(this builder : StringBuilder, symbolCache : ISymbolCache, type : TypeSymbol) : StringBuilder
    {
      symbolCache?.CacheSymbol(type);
      match (type)
      {
        | x is ListAstTypeSymbol =>
          if (x.IsElemTypeEvaluated)
            builder.MakeHintForType(symbolCache, x.ElemType).Append("*")
          else
            builder.Append("«list type not evaluated»")

        | x is OptionAstTypeSymbol =>
          if (x.IsValueTypeEvaluated)
            builder.MakeHintForType(symbolCache, x.ValueType).Append("?")
          else
            builder.Append("«option type not evaluated»")

        | x is ValueAstTypeSymbol =>
          if (x.IsValueTypeEvaluated)
            builder.Append("ValueAst[").MakeHintForType(symbolCache, x.ValueType).Append("]")
          else
            builder.Append("«option type not evaluated»")

        | x is FunctionTypeSymbol => builder.FunctionTypeMakeHint(symbolCache, x)
        | _ is RuleCharsTypeSymbol => builder.Append("<keyword>chars</keyword>")
        | _ is RuleLiteralTypeSymbol => builder.Append("<keyword>string</keyword>")
        | _ is RuleVoidTypeSymbol => builder.Append("<keyword>void</keyword>")
        | x is RuleListTypeSymbol =>
          if (x.IsElemTypeEvaluated)
            builder.MakeHintForType(symbolCache, x.ElemType).Append("*")
          else
            builder.Append("«list type not evaluated»")

        | x is RuleOptionTypeSymbol =>
          if (x.IsValueTypeEvaluated)
            builder.MakeHintForType(symbolCache, x.ValueType).Append("?")
          else
            builder.Append("«option type not evaluated»")

        | x is RuleTupleTypeSymbol =>
          if (x.IsElemTypesEvaluated)
            builder.Append("(").Join(x.ElemTypes, MakeHintForType(_, symbolCache, _)).Append(")")
          else
            builder.Append("«tuple type not evaluated»")

        | x is TypeVarSymbol =>
          if (x.IsTypeEvaluated)
            builder.MakeHintForType(symbolCache, x.Type)
          else match (x.IsBaseTypeConstraintEvaluated, x.IsDerivedTypeConstraintEvaluated)
          {
            | (false, false) => builder.Append("<keyword>unbound</keyword>")
            | (true,  false) => builder.MakeHintForType(symbolCache, x.BaseTypeConstraint).Append("+")
            | (false,  true) => builder.MakeHintForType(symbolCache, x.DerivedTypeConstraint).Append("-")
            | (true,   true) => builder.MakeHintForType(symbolCache, x.BaseTypeConstraint).Append(" TILL ").MakeHintForType(symbolCache, x.DerivedTypeConstraint)
          }

        | x => builder.SymbolToHintMlWithSubHint(x)
      }
    }

    public TypedDeclarationMakeHint(symbolCache : ISymbolCache, symbol : TypedDeclarationSymbol) : string
    {
      def builder = StringBuilder();
      try
      {
        symbolCache.CacheSymbol(symbol);
        _ = builder.Append("<keyword>").HintMlEscape(symbol.Kind).Append("</keyword> ")
          .SymbolToHintMlWithSubHint(symbol)
          .Append(" : ")
          .MakeHintForType(symbolCache, symbol.Type);

        _ = builder.MakeLocations(symbol);
      }
      catch { e => _ = builder.HintMlException(e); }
      builder.ToString()
    }

    public RuleFieldMakeHint(symbolCache : ISymbolCache, symbol : RuleFieldSymbol) : string
    {
      def builder = StringBuilder();
      try
      {
        symbolCache?.CacheSymbol(symbol);
        _ = builder.Append("<keyword>").HintMlEscape(symbol.Kind).Append("</keyword> ")
          .SymbolToHintMlWithSubHint(symbol)
          .Append(" : ")
          .MakeHintForType(symbolCache, symbol.Type);

        _ = builder.MakeLocations(symbol);
      }
      catch { e => _ = builder.HintMlException(e); }
      builder.ToString()
    }

    public RuleAliasMakeHint(symbolCache : ISymbolCache, symbol : RuleAliasSymbol) : string
    {
      def builder = StringBuilder();
      try
      {

        symbolCache?.CacheSymbol(symbol);
        _ = builder.Append("<keyword>").HintMlEscape(symbol.Kind).Append("</keyword> ")
          .SymbolToHintMlWithSubHint(symbol)
          .Append(" <b>expanded to</b> ");

        if (symbol.IsTypeSubstEvaluated)
        {
          def replasmebtSymbol = symbol.TypeSubst;
          _ = builder.Append("<keyword>").HintMlEscape(replasmebtSymbol.Kind).Append("</keyword> ")
            .MakeHintForType(symbolCache, replasmebtSymbol);
        }
        else
          _ = builder.Append(<# <b><font color="Red">TypeSubst symbol not evaluated</font></b>.#>);

        _ = builder.MakeLocations(symbol);
      }
      catch { e => _ = builder.HintMlException(e); }
      builder.ToString()
    }

    public StructuralPropertyMakeHint(symbolCache : ISymbolCache, symbol : StructuralPropertySymbol) : string
    {
      def builder = StringBuilder();
      try
      {
        symbolCache?.CacheSymbol(symbol);
        _ = builder.Append("<keyword>").HintMlEscape(symbol.Kind).Append("</keyword> ")
          .SymbolToHintMlWithSubHint(symbol)
          .Append(" : ");

        if (symbol.IsTypeEvaluated)
          _ = builder.MakeHintForType(symbolCache, symbol.Type);
        else
          _ = builder.Append(<# <b><font color="Red">Type symbol not evaluated</font></b>.#>);

        _ = builder.MakeLocations(symbol);
      }
      catch { e => _ = builder.HintMlException(e); }
      builder.ToString()
    }

    public SupportsInheritanceTypeMakeHint(symbolCache : ISymbolCache, symbol : SupportsInheritanceTypeSymbol) : string
    {
      def builder = StringBuilder();
      try
      {
        symbolCache?.CacheSymbol(symbol);
        _ = builder.Append("<keyword>");
        if (symbol.IsKindEvaluated)
          _ = builder.HintMlEscape(symbol.Kind);
        else
          _ = builder.Append("<b><font color='Red'>symbol.Kind is not evaluated</font></b>");
        _ = builder.Append("</keyword> ");
        _ = builder.SymbolToHintMlWithSubHint(symbol);

        if (symbol.IsBaseTypeSetEvaluated)
        {
          def set = symbol.BaseTypeSet;
          def parents = set.ParentTypes.ToArray();
          def ancestorTypes = set.AncestorTypes.ToArray();
          when (parents.Length > 0)
          {
            _ = builder.Append(" : ")
              .Join(parents, MakeHintForType(_, symbolCache, _))
              .Append("<br/><br/><hint value='Ancestors'>")
              .Join(ancestorTypes, MakeHintForType(_, symbolCache, _))
              .Append("</hint>");
          }
        }
        else
          _ = builder.Append(<# <b><font color="Red">BaseTypeSet not evaluated</font></b>.#>);

        _ = builder.MakeLocations(symbol);
      }
      catch { e => _ = builder.HintMlException(e); }
      builder.ToString()
    }

    public FilterWithAstTypeSymbol(this scope : Scope) : Scope
    {
      def filter(symbol : DeclarationSymbol) : bool
      {
        | _ is AstTypeSymbol => true
        | _ is NamespaceSymbol => true
        | u is UsingAliasDirectiveSymbol when u.IsReplacementEvaluated && u.Replacement.IsSymbolEvaluated => filter(u.Replacement.Symbol)
        | _ => false
      }
      scope.FilterWith(filter)
    }


    public FilterWithRuleTypeSymbol : ScopeFactory = FilterWithRuleTypeSymbolImpl;

    public FilterWithRuleTypeSymbolImpl(this scope : Scope) : Scope
    {
      def filter(symbol : DeclarationSymbol) : bool
      {
        | _ is RuleTypeSymbol => true
        | _ is SyntaxModuleSymbol => true
        | _ is NamespaceSymbol => true
        | u is UsingAliasDirectiveSymbol when u.IsReplacementEvaluated && u.Replacement.IsSymbolEvaluated => filter(u.Replacement.Symbol)
        | _ => false
      }
      scope.FilterWith(filter)
    }
  } // module
} // namespace
