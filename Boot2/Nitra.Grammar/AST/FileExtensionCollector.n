using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace Nitra.Ast
{
  public sealed class FileExtensionCollector
  {
    //TODO: rewrite with actual ICollector implementation

    private _extensions : Dictionary[string, FileExtension] = Dictionary(StringComparer.OrdinalIgnoreCase);

    public Add(fileExtension : FileExtension, context : DependentPropertyEvalContext) : FileExtensionCollector
    {
      when (fileExtension.Extension.HasValue)
      {
        def extension = fileExtension.Extension.Value;
        mutable existingFileExtension;
        if (_extensions.TryGetValue(extension, out existingFileExtension))
        {
          // TODO: use RootError, add hint to first definition of the extension
          fileExtension.Error(context, $"Duplicated file extension '$extension'.");
        }
        else
          _extensions.Add(extension, fileExtension);
      }
      this
    }

    public ToImmutable() : ImmutableArray[string]
    {
      def builder = ImmutableArray.CreateBuilder(_extensions.Count);
      builder.AddRange(_extensions.Keys);
      builder.MoveToImmutable()
    }
  }
}
