using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;

namespace Nitra.Ast
{
  public sealed class SyntaxModuleCollector
  {
    //TODO: rewrite with actual ICollector implementation

    private _syntaxModules : Dictionary[SyntaxModuleSymbol, SyntaxModuleReference] = Dictionary();

    public Add(declaration : SyntaxModuleReference, symbolRef : Ref[SyntaxModuleSymbol], context : DependentPropertyEvalContext) : SyntaxModuleCollector
    {
      when (symbolRef.IsSymbolEvaluated)
      {
        def syntaxModule = symbolRef.Symbol;
        mutable existingSyntaxModuleReference;
        if (_syntaxModules.TryGetValue(syntaxModule, out existingSyntaxModuleReference))
        {
          // TODO: use RootError, add hint to first definition of the symbol reference
          declaration.Error(context, $"Duplicated reference to syntax module '$(syntaxModule.FullName)'.");
        }
        else
          _syntaxModules.Add(syntaxModule, declaration);
      }
      this
    }

    public ToImmutable() : ImmutableArray[SyntaxModuleSymbol]
    {
      def builder = ImmutableArray.CreateBuilder(_syntaxModules.Count);
      builder.AddRange(_syntaxModules.Keys);
      builder.MoveToImmutable()
    }
  }
}
