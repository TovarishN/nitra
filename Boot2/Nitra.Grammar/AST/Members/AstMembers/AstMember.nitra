using DotNet;

using Nitra.AstUtils;
using Nitra.Declarations;

using R = Nitra.Ast.RuleExpressions;

namespace Nitra.Ast.AstMembers
{
  abstract ast AstMember : BindableAst, ScopedAst
  {
    in Parent : AstSymbol;

    ContainingTable = Parent.MemberTable;
  }

  abstract declaration AstMemberDeclaration : AstMember
  {
    symbol
    {
      in Parent : AstSymbol;
      FullName = AstUtils.MakeFullName(this.Parent.FullName, this.Name);
    }

    Symbol.Parent = Parent;
  }

  declaration StructuralProperty : AstMemberDeclaration, TypedDeclaration
  {
    symbol
    {
      SpanClass = NitraLang.PropertySpanClass;
      Kind = "structural property";
      MakeHint = AstUtils.StructuralPropertyMakeHint(symbolCache, this);
    }

  stage 1:
    out TypeRef : Ref[TypeSymbol] = AstUtils.ResolveStructuralPropertyType(TypeName.Ref, context);

    TypeName.Scope = Scope;
    Symbol.Type    = TypeRef.Symbol;

    TypeName : QualifiedReference;
  }

  declaration AstDependentProperty : DependentProperty, AstMemberDeclaration
  {
  }

  declaration ChildAst : Nitra.Ast.Ast, AstMemberDeclaration
  {
    symbol
    {
      MakeHint = AstUtils.SupportsInheritanceTypeMakeHint(symbolCache, this);
    }
    EmitSymbol(Symbol, context);
  }

  ast StageScope : AstMember
  {
    Stage : int;
  }

  ast DependentAssignStatement : AstMember
  {
    Path : QualifiedReference;
  }

  ast DependentCallStatement : AstMember
  {
    Name : Reference;
  }

  ast DependentAddStatement : AstMember
  {
    Path : QualifiedReference;
  }

  ast Decompose : AstMember
  {
  }

  declaration NestedAst : Nitra.Ast.Ast, AstMember
  {
    symbol
    {
      MakeHint = AstUtils.SupportsInheritanceTypeMakeHint(symbolCache, this);
    }
    Symbol.BaseTypeSet |= (Parent, TypeBase.Ref)[0]; // tuple adds dependency to TypeBase.Ref property
    Members.Parent = Symbol;
  }
}
