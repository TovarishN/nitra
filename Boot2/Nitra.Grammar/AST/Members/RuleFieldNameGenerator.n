using Nitra.Declarations;
using Nitra.ProjectSystem;
using Nitra.Internal;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Nitra.Ast
{
  public sealed class RuleFieldNameGenerator
  {
    private static _plainNameGenerator : RuleFieldNameGenerator = RuleFieldNameGenerator(null);

    private _table : Dictionary[long, bool * int];

    private this(table : Dictionary[long, bool * int])
    {
      _table = table;
    }

    public static Create(names : ImmutableArray[ParsedValue[string * bool]]) : RuleFieldNameGenerator
    {
      when (names.Length > 1)
      {
        def table = Dictionary(names.Length);
        mutable containsNonUniqeNames = false;
        foreach (name in names)
        {
          mutable data;
          def id = GetId(name);
          if (table.TryGetValue(id, out data))
          {
            containsNonUniqeNames = true;
            data = (false, 0);
          }
          else
            data = (true, 0);

          table[id] = data;
        }
        when (containsNonUniqeNames)
          return RuleFieldNameGenerator(table);
      }
      _plainNameGenerator
    }

    public GetName(loc : Location, desiredName : ParsedValue[string * bool]) : Name
    {
      def isUserDefinedName = IsUserDefinedName(desiredName);
      def source            = loc.Source;
      def span              = desiredName.Span;
      def id                = GetId(desiredName);
      if (_table : object == null || isUserDefinedName)
        Name(Location(source, span), id)
      else
      {
        def data = _table[id];
        if (data[0])
          Name(Location(source, span), id)
        else
        {
          // TODO: generated name can be non unique in some cases
          def index   = data[1] + 1;
          _table[id]  = (false, index);
          def newName = StringIndex.GetText(id) + index.ToString(CultureInfo.InvariantCulture);
          Name(Location(source, span), newName)
        }
      }
    }

    private static IsUserDefinedName(desiredName : ParsedValue[string * bool]) : bool
    {
      if (desiredName.HasValue) desiredName.Value[1] else false
    }

    private static GetId(desiredName : ParsedValue[string * bool]) : long
    {
      def text = if (desiredName.HasValue) desiredName.Value[0] else "Node";
      StringIndex.GetId(text)
    }
  }
}
