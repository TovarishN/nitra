using DotNet;
using Nitra;
using Nitra.Declarations;

namespace Nitra.Ast
{
  abstract ast ParseTreePattern : ScopedAst, BindableAst
  {
  stage 1:
    in  ExpectedType : TypeSymbol;
    out Type         : TypeSymbol;

    unless (Type.IsSubtypeOf(ExpectedType))
      Error(context, $"<hint>Pattern type '$(AstUtils.ToHint(self.Type, context))' is not subtype of expected type '$(AstUtils.ToHint(self.ExpectedType, context))'.</hint>");

    | Wildcard
      {
        Type = ExpectedType;
      }

    | Ctor
      {
        out CtorRef : Ref[FunctionTypeSymbol] = Reference.Ref.Resolve();

        Type                      = AstUtils.TypeParseTreePatternCtor(this, Arguments, CtorRef.Symbol.Parameters, CtorRef.Symbol.ReturnType, context);
        Reference.Scope           = Scope;
        Arguments.Scope           = Scope;
        Arguments.ContainingTable = ContainingTable;

        Reference : Reference;
        Arguments : ParseTreePattern*;
      }

    | Tuple
      {
        Type                    = AstUtils.TypeParseTreePatternTuple(this, ExpectedType, Members, context);
        Members.Scope           = Scope;
        Members.ContainingTable = ContainingTable;

        Members : ParseTreePattern*;
      }

    | List1
      {
        out ItemType : RuleTypeSymbol = AstUtils.CreateRuleTypeVar(context);

        Type                 = AstUtils.InitList(context, ItemType);
        Head.Scope           = Scope;
        Head.ContainingTable = ContainingTable;
        Head.ExpectedType    = ItemType;
        Tail.Scope           = Scope;
        Tail.ContainingTable = ContainingTable;
        Tail.ExpectedType    = Type;

        Head : ParseTreePattern;
        Tail : ParseTreePattern;
      }

    | List2
      {
        out ItemType : RuleTypeSymbol = AstUtils.CreateRuleTypeVar(context);

        Type                  = AstUtils.InitList(context, ItemType);
        Items.Scope           = Scope;
        Items.ContainingTable = ContainingTable;
        Items.ExpectedType    = ItemType;

        Items : ParseTreePattern*;
      }
  }

  declaration ParseTreePatternVariable : ParseTreePattern, TypedDeclaration
  {
    symbol
    {
      Kind     = "pattern variable";
      MakeHint = AstUtils.TypedDeclarationMakeHint(symbolCache, this);
    }

    Type        = ExpectedType;
    Symbol.Type = ExpectedType;
  }
}
