using DotNet;

using Nitra.Declarations;

namespace Nitra.Ast
{
  abstract ast MapSyntaxBody : BindableAst
  {
    This : ThisDeclaration;

    in  Owner     : MapSyntaxSymbol;
    out BodyScope : TableScope = TableScope("body");
    This.ContainingTable       = BodyScope;

  stage 1:
    in AstScope : Scope;
    in AstType  : AstTypeSymbol;

    | Empty
      {
      }

    | Inline
      {
        Code : string;
      }

    | PerMember
      {
        Members.AstScope = AstScope;
        Members.Scope    = Scope.HideWith(BodyScope);
        Members.AstType  = AstType;

        Members : MapSyntaxExpressionAstMember*;
      }

    | Expression
      {
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope.HideWith(BodyScope);
        Expression.ExpectedType = Owner.ReturnType;

        Expression : MapSyntaxExpression;
      }

    | Extensions
      {
        Members.DeclaredIn    = Owner.ThisType :> ExtensionContainerSymbol;

        Members.Prototype      = Owner;
        Members.AstScope       = AstScope;
        Members.Scope          = Scope;    // don't pass 'this' variable
        Members.DefaultAstType = AstType;

        Members : ExtensionMapSyntax*;
      }
  }

  declaration ThisDeclaration : TypedDeclaration
  {
    symbol
    {
      Kind      = "this";
      SpanClass = Language.KeywordSpanClass;
    }
  }
}
