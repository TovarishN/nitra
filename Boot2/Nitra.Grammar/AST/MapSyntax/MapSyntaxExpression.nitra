using DotNet;

using Nitra.Declarations;
using Nitra.Ast.AstMembers;

using System.Text;

namespace Nitra.Ast
{
  abstract ast MapSyntaxExpression : BindableAst
  {
  stage 1:
    in  AstScope     : Scope;

  stage 3:
    in  ExpectedType : TypeSymbol;
    out Type         : TypeSymbol;

    unless (ExpectedType : object == WellKnownSymbols.AnyType || Type.IsSubtypeOf(ExpectedType))
      Error(context, $"<hint>Expression type '$(AstUtils.ToHint(self.Type, context))' is not subtype of expected type '$(AstUtils.ToHint(self.ExpectedType, context))'.</hint>");

    | Identifier
      {
      stage 3:
        out TempScope : Scope = Scope;
        out VariableRef : Ref[TypedDeclarationSymbol] = Reference.Ref.Resolve();
        out ImplicitCastRef : Ref[FunctionTypeSymbol] = AstUtils.CreateImplicitRuleTypeCast(this, VariableRef.Symbol.Type, ExpectedType, context);

        Reference.Scope = TempScope;
        Type            = ImplicitCastRef.Symbol.Return;

        Reference : Reference;
      }

    | Ast
      {
      stage 1:
        out AstTypeRef : Ref[AstTypeSymbol] = Ast.Ref.Resolve();

        Ast.Scope        = AstScope;
        Members.Scope    = Scope;
        Members.AstType  = AstTypeRef.Symbol;
        Members.AstScope = AstScope;
        Type             = AstTypeRef.Symbol;

        Ast     : QualifiedReference;
        Members : MapSyntaxExpressionAstMember*;
      }

    | List
      {
        out ItemTypeVar : AstTypeSymbol = AstUtils.CreateAstTypeVar(context);

        Type               = AstUtils.CreateListAstType(this, ItemTypeVar, context);
        Items.AstScope     = AstScope;
        Items.Scope        = Scope;
        Items.ExpectedType = AstUtils.UnifyAndReturn(Type, ExpectedType, ItemTypeVar);

        Items : MapSyntaxExpression*;
      }

    | OptionSome
      {
        out ValueTypeVar : AstTypeSymbol = AstUtils.CreateAstTypeVar(context);

        Type               = AstUtils.CreateOptionAstType(this, ValueTypeVar, context);
        Value.AstScope     = AstScope;
        Value.Scope        = Scope;
        Value.ExpectedType = AstUtils.UnifyAndReturn(Type, ExpectedType, ValueTypeVar);

        Value : MapSyntaxExpression;
      }

    | OptionNone
      {
        Type = AstUtils.TypeOptionExpression(this, ExpectedType, context);
      }

    | Match
      {
        Type                    = ExpectedType;
        Expression.ExpectedType = WellKnownSymbols.AnyType;
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Cases.AstScope          = AstScope;
        Cases.Scope             = Scope;
        Cases.ExpectedType      = ExpectedType;
        Cases.PatternType       = Expression.Type;

        when (ExpectedType : object == WellKnownSymbols.AnyType)
          Error(context, "Type inference is not supported, please specify type with ':' operator.");

        unless (Expression.Type is RuleTypeSymbol)
          Expression.Error(context, $"<hint>Expression type '$(AstUtils.ToHint(this.Expression.Type, context))' is not a parse tree type.</hint>");

        Expression : MapSyntaxExpression;
        Cases      : MapSyntaxMatchCase*;
      }

    | Fold
      {
        out ItemTypeVar  : RuleTypeSymbol = AstUtils.CreateRuleTypeVar(context);

        Item.ContainingTable        = TableScope("variables");
        Item.Symbol.Type            = ItemTypeVar;
        ItemExpression.ExpectedType = AstUtils.InitList(context, ItemTypeVar);
        ItemExpression.AstScope     = AstScope;
        ItemExpression.Scope        = Scope;
        InitExpression.ExpectedType = AstUtils.Wait(ItemExpression.Type, ExpectedType);
        InitExpression.AstScope     = AstScope;
        InitExpression.Scope        = Scope.HideWith(Item.ContainingTable);
        Accumulator.ContainingTable = TableScope("variables");
        Accumulator.Symbol.Type     = ExpectedType;
        AccumulatorRef.Scope        = Accumulator.ContainingTable;
        EachExpression.ExpectedType = ExpectedType;
        EachExpression.AstScope     = AstScope;
        EachExpression.Scope        = InitExpression.Scope.HideWith(Accumulator.ContainingTable);
        Type                        = ExpectedType;

        Item           : MapSyntaxVariable;
        ItemExpression : MapSyntaxExpression;

        Accumulator    : MapSyntaxVariable;
        InitExpression : MapSyntaxExpression;

        AccumulatorRef : Reference;
        EachExpression : MapSyntaxExpression;
      }

    | TypeHint
      {
      stage 1:
        out ExpectedTypeRef : Ref[TypeSymbol] = TypeName.Ref.Resolve();

        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Expression.ExpectedType = ExpectedTypeRef.Symbol;
        TypeName.Scope          = AstScope;
        Type                    = ExpectedTypeRef.Symbol;

        Expression : MapSyntaxExpression;
        TypeName   : QualifiedReference;
      }

    | Call
      {
      stage 3:
        out MapSyntaxRef : Ref[MapSyntaxSymbol] = AstUtils.CreateMapSyntaxRef(Arguments.Location.FromStart(), Expression.Type.Scope, Arguments.Type);

        Type                    = MapSyntaxRef.Symbol.ReturnType;
        Expression.ExpectedType = WellKnownSymbols.AnyType;
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Arguments.ExpectedType  = WellKnownSymbols.AnyType;
        Arguments.AstScope      = AstScope;
        Arguments.Scope         = Scope;

        // TODO: move error handling to IRef
        when (MapSyntaxRef.IsUnresolved)
          Error(context, $"<hint>Syntax mapping not found for type '$(AstUtils.ToHint(this.Expression.Type, context))'.</hint>");
        when (MapSyntaxRef.IsAmbiguous)
          Error(context, "<hint>Syntax mapping for type '$(AstUtils.ToHint(this.Expression.Type, context))' is ambiguous, try specify type of arguments explicitly.</hint>");

        Expression : MapSyntaxExpression;
        Arguments  : MapSyntaxExpression*;
      }

    | MemberAccess
      {
      stage 1:
        out VariableRef : Ref[TypedDeclarationSymbol] = Reference.Ref.Resolve();

      stage 3:
        out ImplicitCastRef : Ref[FunctionTypeSymbol] = AstUtils.CreateImplicitRuleTypeCast(this, VariableRef.Symbol.Type, ExpectedType, context);

        Expression.ExpectedType = AstUtils.CreateRuleTypeVar(context);
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Reference.Scope         = Expression.Type.Scope;
        Type                    = ImplicitCastRef.Symbol.Return;

        Expression : MapSyntaxExpression;
        Reference  : Reference;
      }

    | DefineVariable
      {
      stage 1:
        out TypeRef : Ref[TypeSymbol] = AstUtils.ResolveStructuralPropertyType(VariableType.Ref, context);

        Variable.ContainingTable = TableScope("variables");
        Variable.Symbol.Type     = TypeRef.Symbol;
        VariableType.Scope       = Scope;
        Expression.AstScope      = AstScope;
        Expression.Scope         = Scope;
        Body.AstScope            = AstScope;
        Body.Scope               = Scope.HideWith(Variable.ContainingTable);
        Type                     = Body.Type;

        Variable     : MapSyntaxVariable;
        VariableType : QualifiedReference;
        Expression   : MapSyntaxExpression;
        Body         : MapSyntaxExpression;
      }
  }

  declaration MapSyntaxVariable : TypedDeclaration
  {
    symbol
    {
      Kind = "variable";
    }
  }

  abstract ast MapSyntaxExpressionAstMember : BindableAst
  {
  stage 1:
    in  AstScope    : Scope;
    in  AstType     : AstTypeSymbol;
    out PropertyRef : Ref[StructuralPropertySymbol] = AstProperty.Ref.Resolve();

    AstProperty.Scope  = AstType.Scope;

    AstProperty : Reference;

    | Inline
      {
        Code : string;
      }

    | Expression
      {
        Expression.AstScope     = AstScope;
        Expression.Scope        = Scope;
        Expression.ExpectedType = PropertyRef.Symbol.Type;

        Expression  : MapSyntaxExpression;
      }
  }
}
