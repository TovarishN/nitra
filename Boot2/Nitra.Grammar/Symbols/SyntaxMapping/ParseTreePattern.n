using Nitra.Model;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;

namespace Nitra.Typing
{
  [Record]
  public variant ParseTreePattern : Located
  {
    | Var  { Name  : Identifier; }
    | Ctor { Value : ParseTreeCtor; Args : list[ParseTreePattern] }

    public override Location   : Location { get; }
    public          Type       : RuleType { get; }
    public          IsWildcard : bool     { get { this is Var(Identifier(Value = "_")) } }

    public static Wildcard(location : Location, ruleType : RuleType) : ParseTreePattern
    {
      def name = Identifier(location, "_");
      ParseTreePattern.Var(location, ruleType, name)
    }

    public static ParseTree(location : Location, ruleSymbol : SyntaxRuleSymbol, args : list[ParseTreePattern]) : ParseTreePattern
    {
      def arity = SyntaxMappingTyper.GetNonVoidSubRules(ruleSymbol).Length;
      assert(arity == args.Length);
      ParseTreePattern.Ctor(location, RuleType.Ref(ruleSymbol), ParseTreeCtor.ParseTree(arity), args)
    }

    public static AppendPattern(this buffer : StringBuilder, pattern : ParseTreePattern) : StringBuilder
    {
      match (pattern)
      {
        | Var(n)           => buffer.Append(n)
        | Ctor(ctor, args) => buffer.Append(ctor.Name).Append('(').AppendList(args, AppendPattern, ", ").Append(')')
      }
    }

    public override ToString() : string
    {
      StringBuilder().AppendPattern(this).ToString()
    }
  }
}
