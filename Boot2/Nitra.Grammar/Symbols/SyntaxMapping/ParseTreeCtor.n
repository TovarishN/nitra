using Nitra.Model;

using Nemerle;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;

namespace Nitra.Typing
{
  [Record, StructuralEquality]
  public variant ParseTreeCtor
  {
    | ListCons
    | ListNil
    | OptionSome
    | OptionNone
    | Tuple     { arity : int }
    | ParseTree { arity : int }

    public Name  : string
    {
      get
      {
        match (this)
        {
          | ListCons   => "List.Cons"
          | ListNil    => "List.Nil"
          | OptionSome => "Option.Some"
          | OptionNone => "Option.None"
          | Tuple      => "Tuple"
          | ParseTree  => "ParseTree"
        }
      }
    }

    public Arity : int
    {
      get
      {
        match (this)
        {
          | ListCons         => 2
          | ListNil          => 0
          | OptionSome       => 1
          | OptionNone       => 0
          | Tuple(arity)     => arity
          | ParseTree(arity) => arity
        }
      }
    }

    public Span  : int
    {
      get
      {
        match (this)
        {
          | ListCons
          | ListNil
          | OptionSome
          | OptionNone => 2
          | Tuple      => 1
          | ParseTree  => 1
        }
      }
    }

    public static AppendCtor(this buffer : StringBuilder, ctor : ParseTreeCtor) : StringBuilder
    {
      buffer.Append(ctor.Name).Append('(').AppendNTimes(ctor.Arity, "_", ", ").Append(')')
    }

    public override ToString() : string
    {
      StringBuilder().AppendCtor(this).ToString()
    }
  }
}
