using Nitra.Model;
using Nitra.Runtime.GraphUtils;
using Nitra.Serialization;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  public abstract class AstSymbol : PropertyContainerSymbol, IGraphNode[AstSymbol]
  {
    public abstract Parents       : list[AstSymbol] implements IGraphNode[AstSymbol].Connections { get; }
    public abstract IsDeclaration : bool                          { get; }
    public abstract Cardinality   : AstCardinality                { get; }
    public abstract IgnoreCase    : bool                          { get; }
    public abstract Symbol        : SymbolRef[SymbolSymbol]       { get; }
    public override GetParents() : Seq[PropertyContainerSymbol] { Parents }

    public AllBaseAsts : Seq[AstSymbol]
    {
      get { TypeInheritance(); _allBaseAsts }
    }

    public override AllProperties : Seq[PropertySymbol]
    {
      get { TypeInheritance(); _allProperties.Values }
    }

    public override IsSubtypeOf(other : PropertyContainerSymbol) : bool
    {
      | AstSymbol as other =>
        TypeInheritance();
        this == other || _allBaseAsts.Contains(other)

      | _ => false
    }

    [RecordIgnore] private mutable _allBaseAsts         : HashSet[AstSymbol];
    [RecordIgnore] private mutable _allProperties       : Dictionary[string, PropertySymbol];
    [RecordIgnore] private mutable _isTypingInheritance : bool;
    [RecordIgnore] private mutable _isCyclic            : bool;

    public TypeInheritance() : void
    {
      if (_isTypingInheritance)
      {
        unless (_isCyclic)
        {
          foreach (group when group.IsNonTrivial() in GraphAlgorithms.FindStronglyConnectedComponents([this]))
          {
            def firstSymbol = group.Nodes.FirstItem;
            using (root = Node.Project.RootError(firstSymbol.FirstLocation, $"Declaration '$(firstSymbol.FullName)' is cyclic."))
            {
              // 'foreach' causes invalid IL
              def e = group.Nodes.GetEnumerator();
              _ = e.MoveNext();
              while (e.MoveNext())
              {
                def symbol = e.Current;
                root.Hint(symbol.FirstLocation, $"Circular base declaration dependency '$(symbol.FullName)' for declaration '$(firstSymbol.FullName)'.");
              }
            }
          }

          _isCyclic = true;
        }
      }
      else when (_allBaseAsts : object == null)
      {
        _isTypingInheritance = true;
        try
        {
          _allBaseAsts   = HashSet();
          _allProperties = Dictionary(StringComparer.Ordinal);

          foreach (a when _allBaseAsts.Add(a) in Parents)
            _allBaseAsts.UnionWith(a.AllBaseAsts);

          unless (_isCyclic)
            CollectInheritedProperties(_allBaseAsts, _allProperties);

          when (CreateSymbolSymbol() is SymbolRef.Some(symbolSymbol))
            TryOverrideSymbolProperty(symbolSymbol);

          CollectDeclaredProperties(_allProperties);
        }
        finally _isTypingInheritance = false;
      }
    }

    public override GetAncestors() : Seq[PropertyContainerSymbol]
    {
      AllBaseAsts
    }

    public override LookupProperty(name : string) : ValueOption[PropertySymbol]
    {
      TypeInheritance();

      mutable symbol;
      if (_allProperties.TryGetValue(name, out symbol))
        VSome(symbol)
      else
        VNone()
    }

    protected virtual CreateSymbolSymbol() : SymbolRef[SymbolSymbol]
    {
      Symbol
    }

    private TryOverrideSymbolProperty(symbol : SymbolSymbol) : void
    {
      assert(_allProperties != null);

      mutable foundSymbol;
      when (_allProperties.TryGetValue("Symbol", out foundSymbol))
      when (foundSymbol is DependentPropertySymbol as symbolProperty)
      {
        def newSymbolProperty = ChemicalDependentPropertySymbol(FirstLocation, "Symbol")
          .SetAssemblyId(AssemblyIds.CurrentAssembly)
          .SetPropertyContainer(this)
          .SetDirection(symbolProperty.Direction)
          .SetLinkedProperty(SymbolRef.None(Location.Default, true))
          .SetOverrideProperty(SymbolRef.Some(Location.Default, true, symbolProperty))
          .SetStage(symbolProperty.Stage)
          .SetType(Utils.MakeNTypeQualified(FirstLocation, symbol.Node.FullNameParts));

        _ = Node.AddAndReport(newSymbolProperty, FirstLocation)
      }
    }

    protected CreateSymbolSymbolImpl(makeSymbol : list[SymbolSymbol] -> SymbolSymbol) : SymbolRef[SymbolSymbol]
    {
      if (IsDeclaration)
      {
        mutable baseSymbols = [];
        mutable sealedSymbolFromBase;
        foreach (baseAst in Parents)
        {
          when (baseAst.Symbol is SymbolRef.Some(s))
          {
            if (s.IsAbstract)
              baseSymbols ::= s;
            else
            {
              sealedSymbolFromBase = s;
              break;
            }
          }
        }

        if (sealedSymbolFromBase : object == null)
          SymbolRef.Some(FirstLocation, true, makeSymbol(baseSymbols));
        else
        {
          foreach (baseAst in Parents)
          {
            when (baseAst.Symbol is SymbolRef.Some(s))
            unless (sealedSymbolFromBase.IsSubtypeOf(s))
              using (root = Node.Project.RootError(FirstLocation, $"Symbol inheritance is not available from sealed symbol '$(sealedSymbolFromBase.FullName)'."))
              {
                root.Hint(sealedSymbolFromBase.FirstLocation, "Sealed symbol.");
                break;
              }
          }

          SymbolRef.Some(FirstLocation, true, sealedSymbolFromBase);
        }
      }
      else
        SymbolRef.None(FirstLocation, true);
    }
  }
}
