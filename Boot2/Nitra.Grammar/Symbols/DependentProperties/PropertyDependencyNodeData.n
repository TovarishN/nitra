using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Internal;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Typing
{
  [Record]
  public variant PropertyDependencyNodeData : Located
  {
    static mutable DebugStop : bool = false;
    
    public override Location    : Location                { get; }
    public          DeclaredIn  : PropertyContainerSymbol { get; }
    public          Path        : DependencyPath          { get; }
    public          DependendOn : list[int]               { get; }
    public          IsCollector : bool                    { get; }
    public          IsDependent : bool                    { get { Path.IsDependent } }

    public override ToString() : string
    {
      (match (this)
      {
        | Assign => "Assign: "
        | Use    => "Use: "
      })
      + Location.GetText()
    }

    | Assign
      {
        [RecordCtor]
        public new this(
          [MappedMember("Location")] location : Location,
          [MappedMember("DeclaredIn")] declaredIn : PropertyContainerSymbol,
          [MappedMember("Path")] path : DependencyPath,
          [MappedMember("DependendOn")] dependendOn : list[int],
          [MappedMember("IsCollector")] isCollector : bool,
          [MappedMember("CompiledMethodName")] compiledMethodName : string,
          [MappedMember("IsValueAwaiting")] isValueAwaiting : bool)
        {
          assert2(!DebugStop || !location.IsEmpty);
          base(location, declaredIn, path, dependendOn, isCollector);
          this.CompiledMethodName = compiledMethodName;
          this.IsValueAwaiting = isValueAwaiting;
        }

        CompiledMethodName : string;
        IsValueAwaiting : bool;
      }
    | Use
  }
}
