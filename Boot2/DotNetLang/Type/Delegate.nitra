using DotNet;

using Nemerle.Collections;

using Nitra;
using Nitra.Declarations;
using Nitra.Internal;

using System.Linq;
using SCG = System.Collections.Generic;

namespace DotNet
{
  abstract declaration Delegate : GenericType
  {
    symbol
    {
      Kind = "delegate";
      SpanClass = DotNetLang.TypeSpanClass;

      table ParameterScope;
      in  ReturnType     : TypeSymbol;
    }

    ReturnType.Scope           = TypeParameterConstraints.Scope;
    Parameters.ContainingTable = Symbol.ParameterScope;
    Parameters.Scope           = TypeParameterConstraints.Scope;

    ReturnType               : QualifiedReference;
    Parameters               : FormalParameter*;
  }

  declaration TopDelegate    : Delegate, TopGenericType
  {
    symbol
    {
      IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate);
      CanMerge       = AstUtils.CanMerge.[TopDelegate](TypeParametersCount, candidate);
    }
    ContainingTable = DeclaredIn.MemberTable;
  }

  declaration NestedDelegate : Delegate, NestedGenericType
  {
    symbol
    {
      IsSameIdentity = AstUtils.IsSameIdentity(TypeParametersCount, candidate);
      CanMerge       = AstUtils.CanMerge.[NestedDelegate](TypeParametersCount, candidate);
    }
    ContainingTable = DeclaredIn.MemberTable;
  }
}
