using Nitra;
using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace DotNet
{
  public partial interface ConstructedTypeSymbol : TypeSymbol, IEquatable[ConstructedTypeSymbol]
  {
  }

  public partial class TopConstructedTypeSymbol : SymbolBase, ConstructedTypeSymbol
  {
    public override Equals(other : object) : bool implements IEquatable[ConstructedTypeSymbol].Equals
    {
      | TopConstructedTypeSymbol as other => this.TypeInfo.Equals(other.TypeInfo) && this.Args.Equals(other.Args)
      | _ => false
    }

    public override GetHashCode() : int
    {
      unchecked
      {
        mutable i = TypeInfo.GetHashCode();
        foreach (arg in Args with index)
          i ^= arg.GetHashCode() << index;
        i
      }
    }
  }

  public partial class NestedConstructedTypeSymbol : SymbolBase, ConstructedTypeSymbol
  {
    public override Equals(other : object) : bool implements IEquatable[ConstructedTypeSymbol].Equals
    {
      | NestedConstructedTypeSymbol as other => this.TypeInfo.Equals(other.TypeInfo) && this.Args.Equals(other.Args) && this.Parent.Equals(other.Parent)
      | _ => false
    }

    public override GetHashCode() : int
    {
      unchecked
      {
        mutable i = TypeInfo.GetHashCode();
        i ^= Parent.GetHashCode();
        foreach (arg in Args with index)
          i ^= arg.GetHashCode() << index;
        i
      }
    }
  }
}
