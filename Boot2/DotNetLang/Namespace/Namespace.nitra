using Nitra;
using Nitra.Declarations;
using DotNet.AstUtils;

namespace DotNet
{
  abstract declaration Namespace : NamespaceMemberDeclaration, Container
  {
    sealed symbol
    {
      Kind      = "namespace";
      SpanClass = DotNetLang.NamespaceSpanClass;
      Scope     = MemberTable;

      IsSameIdentity = AstUtils.IsSameIdentity(0, candidate);
      CanMerge       = candidate is Namespace || candidate is ExternalDeclaration[NamespaceSymbol];
      //MakeHint       = "<keyword>namespace</keyword> " + AstUtils.Combine(DeclaredIn, this);
      DeclaredInOpt = if (DeclaredIn == null) VNone() else VSome(DeclaredIn);
    }
  }

  declaration ImplicitNamespace : Namespace
  {
    inout DeclaredInPipe : NamespaceSymbol;

    DeclaredIn                      = DeclaredInPipeIn;
    Symbol.DeclaredIn               = DeclaredIn;
    ContainingTable                 = DeclaredInPipeIn.MemberTable;
    DeclaredInPipeOut               = Symbol;
  }

  abstract ast NamespaceBody : BindableAst
  {
  stage 1:
    out EnteredScope : Scope;

    Members.OpeningIn         = EmptyScope.Instance;
    Members.UsingAliasesScope = TableScope("aliases");
    Members.CurrentScope      = this.Scope;
    Members.Scope             = MakeMembersScope(EnteredScope, Members.OpeningOut, Members.UsingAliasesScope);

    Members         : NamespaceMember*;
  }

  declaration ExplicitNamespace : Namespace, NamespaceBody
  {
    EnteredScope                    = MakeEnteredScope(Scope, DeclaredIn, Symbol);
    Path.DeclaredInPipeIn           = DeclaredIn;
    ContainingTable                 = Path.DeclaredInPipeOut.MemberTable;
    Members.DeclaredIn              = Symbol;
    Symbol.DeclaredIn               = Path.DeclaredInPipeOut;

    Path            : ImplicitNamespace*;
  }
}
