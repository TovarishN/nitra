using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using Nemerle;
using Nemerle.Imperative;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace DotNet
{
  public module AstUtils
  {
    public Append(this lst : QualifiedReference.IAstList, item : QualifiedReference) : QualifiedReference.IAstList
    {
      def newItems = array(lst.Count + 1);
      lst.CopyTo(newItems, 0);
      newItems[lst.Count] = item;
      QualifiedReference.AstList(lst, newItems)
    }

    public MakeMembersScope(currentScope : Scope, opening : Scope, aliases : TableScope) : Scope
    {
      def makeCurrentScope(scope : Scope) : Scope
      {
        def withAliases =
          if (aliases.Symbols.Count == 0)
            scope
          else
            scope.UnionWith(aliases);

        opening.HideWith(withAliases)
      }

      if (currentScope is HidingScope as h)
        h.Hidden.HideWith(makeCurrentScope(h.Scope))
      else
        makeCurrentScope(currentScope)
    }

    public MakeEnteredScope(parentScope : Scope, parentNs : NamespaceSymbol, enteredNs : NamespaceSymbol) : Scope
    {
      def buildEnterNsScope(ns : NamespaceSymbol) : Scope
      {
        def declaredIn = ns.DeclaredIn;
        def scope      = ns.Scope;

        if (declaredIn : object == parentNs)
          parentScope.HideWith(scope)
        else
          buildEnterNsScope(declaredIn).HideWith(scope)
      }
      
      buildEnterNsScope(enteredNs)
    }
    
    [Memoize]
    public TypeOverloadResolution(argumentsCount : int) : ResolutionAlgorithm[DeclarationSymbol, DeclarationSymbol]
    {
      fun (candidate : DeclarationSymbol) : ValueOption[DeclarationSymbol]
      {
        | symbol is GenericEntitySymbol when argumentsCount == symbol.TypeParametersCount => VSome(symbol)
        | _                             when argumentsCount == 0                          => VSome(candidate)
        | _ => VNone()
      }
    }

    public CreateMissingQualifiedReference(loc : Location) : QualifiedReference
    {
      QualifiedReference.Simple(loc, Name = Reference.AmbiguousOrMissing(loc))
    }

    public CreateSimpleName(loc : Location, name : string) : QualifiedReference
    {
      QualifiedReference.Simple(loc, Reference(loc, name))
    }

    public CreateTupleQualifiedReference(loc : Location, items : QualifiedReference.IAstList) : QualifiedReference
    {
      QualifiedReference.Generic(loc,
        CreateSimpleName(loc.FromStart(), "#Tuple"),
        items)
    }

    public CreateFuncQualifiedReference(loc : Location, qualifiedReference1 : QualifiedReference, qualifiedReference2 : QualifiedReference) : QualifiedReference
    {
      def arguments = 
        match (qualifiedReference1)
        {
          | QualifiedReference.Generic(QualifiedName = QualifiedReference.Simple(Name = Reference(Text = "#Tuple")), Arguments = tupleArguments) => tupleArguments.Append(qualifiedReference2)
          | _ => QualifiedReference.AstList(qualifiedReference1.Location, qualifiedReference1, qualifiedReference2)
        };

      QualifiedReference.Generic(loc,
        CreateSimpleName(loc.FromStart(), "#Func"),
        arguments)
    }

    public MakeNamespaceFullName(parentFullName : string, name : string, typeParameters : IList[TypeParameterSymbol] = null) : string
    {
      def result =
        if (string.IsNullOrEmpty(parentFullName))
          name
        else
          parentFullName + "." + name;
          
      if (typeParameters == null || typeParameters.Count == 0)
        result
      else
        $<#$result<..$(typeParameters; ", "; _.Name)>#>
    }

    public IsSameIdentity(typeParametersCount : int, candidate : Declaration) : bool
    {
      match (candidate)
      {
        | DotNet.GenericType as t => t.TypeParameterAliases.Count == typeParametersCount
        | Namespace
        | _ is ExternalDeclaration[NamespaceSymbol]
        | Nitra.Declarations.Type => typeParametersCount == 0
        | _                       => false
      }
    }

    public CanMerge[T](typeParametersCount : int, candidate : Declaration) : bool
      where T : GenericType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == typeParametersCount
        | _ => false
      }
    }

     public CanMerge[T](symbol : GenericEntitySymbol, candidate : Declaration) : bool
      where T : GenericEntity
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == symbol.TypeParametersCount
        | _ => false
      }
    }

    public CanMerge[T](symbol : GenericContainerTypeSymbol, candidate : Declaration) : bool
      where T : GenericContainerType
    {
      match (candidate)
      {
        | genericType is T => genericType.TypeParameterAliases.Count == symbol.TypeParametersCount && symbol.IsPartial && genericType.IsPartial.ValueOrDefault
        | _ => false
      }
    }

    public FilterResolved(refs : ImmutableArray[Ref[DeclarationSymbol]]) : Seq[TypeSymbol]
    {
      def lst = List(refs.Length);

      foreach (r in refs)
      {
        def r2 = r.Resolve.[TypeSymbol]();
        when (r2.IsSymbolEvaluated)
          lst.Add(r2.Symbol);
      }

      lst
    }

    public CreateNestedConstructedTypeSymbol(t : NestedGenericTypeSymbol, parentTypeSubst : TypeSymbol, context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def resultSymbol      = NestedConstructedTypeSymbol();
      resultSymbol.Parent   = parentTypeSubst;
      resultSymbol.TypeSubst = resultSymbol;
      foreach (decl in t.Declarations)
        resultSymbol.AddDeclaration(decl);
      resultSymbol.TypeInfo = t;
      resultSymbol.Args     = t.TypeParameters.ToArray();
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public CreateNestedConstructedTypeSymbol(loc : Location, parentTypeSubst : TypeSymbol, typeInfo : GenericTypeSymbol, arguments : IList[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def name              = Name(loc, "#ConstructedType");
      def decl              = NestedConstructedType(loc, name);
      def resultSymbol      = NestedConstructedTypeSymbol();
      resultSymbol.Parent   = parentTypeSubst;
      resultSymbol.TypeSubst = resultSymbol;
      name.Symbol = resultSymbol;
      resultSymbol.AddDeclaration(decl);
      resultSymbol.TypeInfo = typeInfo;
      resultSymbol.Args     = arguments;
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public CreateConstructedTypeSymbol(loc : Location, typeInfo : GenericTypeSymbol, arguments : IList[TypeSymbol], context : DependentPropertyEvalContext) : ConstructedTypeSymbol
    {
      def name              = Name(loc, "#ConstructedType");
      def decl              = TopConstructedType(loc, name);
      def resultSymbol      = TopConstructedTypeSymbol();
      name.Symbol = resultSymbol;
      resultSymbol.AddDeclaration(decl);
      resultSymbol.TypeInfo = typeInfo;
      resultSymbol.Args     = arguments;
      resultSymbol.EvalProperties(context);
      resultSymbol
    }

    public MakeConstructedType(ast : ILocated, args : ImmutableArray[Ref[DeclarationSymbol]], context : DependentPropertyEvalContext) : ResolutionAlgorithm[DeclarationSymbol, DeclarationSymbol]
    {
      def (resolvedArgs, allArgumentsResolved) = ResolveAll.[TypeSymbol, _](args);
      fun (symbol)
      {
        def makeArguments(symbol : GenericTypeSymbol)
        {
          mutable argsWithTemplates = resolvedArgs;
          unless (allArgumentsResolved)
          {
            def typeParameters = symbol.TypeParameters;
            argsWithTemplates  = array(resolvedArgs.Length);
            foreach (arg in resolvedArgs with index)
              argsWithTemplates[index] = arg ?? typeParameters[index];
          }
          argsWithTemplates
        }

        match (symbol)
        {
          | symbol is NestedGenericTypeSymbol => VSome(CreateNestedConstructedTypeSymbol(ast.Location, symbol.DeclaredIn.TypeSubst, symbol, makeArguments(symbol), context))
          | symbol is TopGenericTypeSymbol    => VSome(CreateConstructedTypeSymbol(ast.Location, symbol, makeArguments(symbol), context))
          | _ => VNone()
        }
      }
    }

    public static ResolveAll[TSymbol, TRef](refs : ImmutableArray[TRef]) : array[TSymbol] * bool
      where TSymbol : DeclarationSymbol
      where TRef    : IRef
    {
      mutable isResolvedAll = true;
      def symbols = array(refs.Length);
      foreach (r in refs with index)
      {
        def resolvedArg = r.Resolve.[TSymbol]();
        if (resolvedArg.IsSymbolEvaluated)
          symbols[index] = resolvedArg.Symbol
        else
        {
          isResolvedAll  = false; 
          symbols[index] = default(TSymbol);
        }
      }
      (symbols, isResolvedAll)
    }

    public GetTypeParametersCount(declaration : Declaration) : int
    {
      (declaration :> GenericEntity).TypeParameterAliases?.Count
    }

    public GetTypeParameter(alias : TypeParameterAlias, typeParameterSymbols : IList[TypeParameterSymbol], IndexIn : int) : TypeParameterSymbol
    {
      def typeParameterSymbol = typeParameterSymbols[IndexIn];
      typeParameterSymbol.AddAliasSymbol(alias);
      typeParameterSymbol
    }

    public NoTypeParameters : array[TypeParameterSymbol] = array(0);

    public CreateTypeParameters(count : int) : array[TypeParameterSymbol]
    {
      if (count == 0)
        NoTypeParameters
      else
      {
        def result = array(count);
        for (mutable i = 0; i < result.Length; ++i)
          result[i] = TypeParameterSymbol();
        result
      }
    }

    public IsPartial(declarations : Seq[GenericContainerType]) : bool
    {
      declarations.FirstOrDefault()?.IsPartial.ValueOrDefault
    }
    
    public FilterDeclaredTypeSymbol(memberTable : TableScope) : IList[NestedTypeSymbol]
    {
      def symbols = memberTable.Symbols;
      symbols.SelectMany(s => s.OfType.[NestedTypeSymbol]()).ToArray()
    }
  }
}
