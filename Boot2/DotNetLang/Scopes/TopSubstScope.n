using Nitra.Declarations;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;

namespace DotNet
{
  public class TopSubstScope : Scope
  {
    private _typeInfo : GenericTypeSymbol;
    private _args     : SCG.IList[TypeSymbol];

    public this(typeInfo : GenericTypeSymbol, _scope : Scope, args : SCG.IList[TypeSymbol])
    {
      _typeInfo = typeInfo;
      _args     = args;
    }

    public override BindMany[TSymbol](reference : Reference, results : ref LightList[TSymbol]) : void
    {
      // TODO: add type subst
      _typeInfo.Scope.BindMany(reference : Reference, ref results);
    }

    public override FindMany[TSymbol](predicate : Predicate[TSymbol], results : ref LightList[TSymbol]) : void
    {
      _typeInfo.Scope.FindMany(predicate, ref results);
    }

    public override MakeCompletionList(prefix : string) : Seq[DeclarationSymbol]
    {
      _typeInfo.Scope.MakeCompletionList(prefix)
    }

    public override Serialize(writer : System.IO.BinaryWriter, metadataWriter : Nitra.Serialization2.MetadataWriter) : void
    {
      _typeInfo.Scope.Serialize(writer, metadataWriter)
    }

    public static Deserialize(reader : System.IO.BinaryReader, metadataReader : Nitra.Serialization2.MetadataReader) : this
    {
      IgnoreParams();
      throw System.NotImplementedException()
    }
  }
}
