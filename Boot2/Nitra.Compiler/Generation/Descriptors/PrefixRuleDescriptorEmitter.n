using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nitra.Compiler
{
  [Record]
  internal sealed class PrefixRuleDescriptorEmitter : RuleDescriptorEmitter[ExtensionRuleSymbol]
  {
    protected override BaseType  : PExpr  { get <[ Nitra.PrefixRuleDescriptor ]> }
    protected override ClassName : string { get "_N_PrefixRuleDescriptor_#" }

    public override DefineDescriptor() : void
    {
      base.DefineDescriptor();
      DefineNewParserMethod(<[ Nitra.Internal.PrefixRuleParser ]>, [<[parameter: parserData : Nitra.Internal.ExtensibleRuleParserData ]>]);

      def baseRuleExpr = MakeRuleSelector(ruleSymbol => ruleSymbol.BaseRule.GetValue(Owner.Environment.Project), _.GetRuleDescriptorRef());
      DescriptorTb.DefineConditional(<[decl: public override BaseRule : Nitra.ExtensibleRuleDescriptor { get { $baseRuleExpr } } ]>);

      DescriptorTb.DefineConditional(<[decl: public override PreferIfConflictWithList : list[ExtensionRuleDescriptor] { get { [] } } ]>);

      def createParseTreeExpr1 = MakeRuleSelectorForParseTree(ruleSymbol =>
        <[
          $(Owner.Environment.GetParseTreeType(ruleSymbol) : typed).__Parsed__Node(
            ref pos,
            rawTreePtr,
            parseResult)
        ]>);
      DescriptorTb.DefineConditional(<[ decl:
        public override CreateParseTree(pos : ref int, rawTreePtr : int, parseResult : Nitra.ParseResult) : Nitra.ParseTree
        {
          IgnoreParams();
          $createParseTreeExpr1
        }
      ]>);

      def createParseTreeExpr2 = MakeRuleSelectorForParseTree(ruleSymbol =>
        <[
          $(Owner.Environment.GetParseTreeType(ruleSymbol) : typed).__Parsed__Node(
            startPos,
            endPos,
            recoveredSubrulesIndex,
            parseResult)
        ]>);
      DescriptorTb.DefineConditional(<[ decl:
        public override CreateParseTree(startPos : int, endPos : int, recoveredSubrulesIndex : int, parseResult : Nitra.ParseResult) : Nitra.ParseTree
        {
          IgnoreParams();
          $createParseTreeExpr2
        }
      ]>);
    }
  }
}
