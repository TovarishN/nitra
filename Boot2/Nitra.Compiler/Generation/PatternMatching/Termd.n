using Nitra.Typing;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Text;

namespace Nitra.Compiler.PatternMatching
{
  internal variant Termd
  {
    | Pos { Con : ParseTreeCtor; Args : list[Termd] }
    | Neg { Cons : list[ParseTreeCtor] }

    public static Any : Neg = Neg([]);

    [Memoize]
    public static MakeAnyList(length : int) : list[Termd]
    {
      if (length > 0)
        Any :: MakeAnyList(length - 1)
      else if (length == 0)
        []
      else
        assert(false)
    }

    public static AppendTermd(this buffer : StringBuilder, termd : Termd) : StringBuilder
    {
      match (termd)
      {
        | Pos(con, args) => buffer.Append(con.Name).Append('(').AppendList(args, AppendTermd, ", ").Append(')')
        | Neg([])        => buffer.Append('*')
        | Neg(nonset)    => buffer.Append('!').Append('{').AppendList(nonset, ParseTreeCtor.AppendCtor, ", ").Append('}')
      }
    }

    public override ToString() : string
    {
      StringBuilder().AppendTermd(this).ToString()
    }
  }
}
